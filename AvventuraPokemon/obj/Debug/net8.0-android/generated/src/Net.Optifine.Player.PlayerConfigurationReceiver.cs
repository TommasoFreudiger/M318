//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Net.Optifine.Player {

	// Metadata.xml XPath class reference: path="/api/package[@name='net.optifine.player']/class[@name='PlayerConfigurationReceiver']"
	[global::Android.Runtime.Register ("net/optifine/player/PlayerConfigurationReceiver", DoNotGenerateAcw=true)]
	public partial class PlayerConfigurationReceiver : global::Java.Lang.Object, global::Net.Optifine.Http.IFileDownloadListener {
		static readonly JniPeerMembers _members = new XAPeerMembers ("net/optifine/player/PlayerConfigurationReceiver", typeof (PlayerConfigurationReceiver));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected PlayerConfigurationReceiver (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='net.optifine.player']/class[@name='PlayerConfigurationReceiver']/constructor[@name='PlayerConfigurationReceiver' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register (".ctor", "(Ljava/lang/String;)V", "")]
		public unsafe PlayerConfigurationReceiver (string? player) : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "(Ljava/lang/String;)V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			IntPtr native_player = JNIEnv.NewString ((string?)player);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_player);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_player);
			}
		}

		static Delegate? cb_fileDownloadFinished_Ljava_lang_String_arrayBLjava_lang_Throwable_;
#pragma warning disable 0169
		static Delegate GetFileDownloadFinished_Ljava_lang_String_arrayBLjava_lang_Throwable_Handler ()
		{
			if (cb_fileDownloadFinished_Ljava_lang_String_arrayBLjava_lang_Throwable_ == null)
				cb_fileDownloadFinished_Ljava_lang_String_arrayBLjava_lang_Throwable_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPLLL_V (n_FileDownloadFinished_Ljava_lang_String_arrayBLjava_lang_Throwable_));
			return cb_fileDownloadFinished_Ljava_lang_String_arrayBLjava_lang_Throwable_;
		}

		static void n_FileDownloadFinished_Ljava_lang_String_arrayBLjava_lang_Throwable_ (IntPtr jnienv, IntPtr native__this, IntPtr native_url, IntPtr native_bytes, IntPtr native_exception)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Player.PlayerConfigurationReceiver> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var url = JNIEnv.GetString (native_url, JniHandleOwnership.DoNotTransfer);
			var bytes = (byte[]?) JNIEnv.GetArray (native_bytes, JniHandleOwnership.DoNotTransfer, typeof (byte));
			var exception = global::Java.Lang.Object.GetObject<global::Java.Lang.Throwable> (native_exception, JniHandleOwnership.DoNotTransfer);
			__this.FileDownloadFinished (url, bytes, exception);
			if (bytes != null)
				JNIEnv.CopyArray (bytes, native_bytes);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.player']/class[@name='PlayerConfigurationReceiver']/method[@name='fileDownloadFinished' and count(parameter)=3 and parameter[1][@type='java.lang.String'] and parameter[2][@type='byte[]'] and parameter[3][@type='java.lang.Throwable']]"
		[Register ("fileDownloadFinished", "(Ljava/lang/String;[BLjava/lang/Throwable;)V", "GetFileDownloadFinished_Ljava_lang_String_arrayBLjava_lang_Throwable_Handler")]
		public virtual unsafe void FileDownloadFinished (string? url, byte[]? bytes, global::Java.Lang.Throwable? exception)
		{
			const string __id = "fileDownloadFinished.(Ljava/lang/String;[BLjava/lang/Throwable;)V";
			IntPtr native_url = JNIEnv.NewString ((string?)url);
			IntPtr native_bytes = JNIEnv.NewArray (bytes);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_url);
				__args [1] = new JniArgumentValue (native_bytes);
				__args [2] = new JniArgumentValue ((exception == null) ? IntPtr.Zero : ((global::Java.Lang.Throwable) exception).Handle);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_url);
				if (bytes != null) {
					JNIEnv.CopyArray (native_bytes, bytes);
					JNIEnv.DeleteLocalRef (native_bytes);
				}
				global::System.GC.KeepAlive (bytes);
				global::System.GC.KeepAlive (exception);
			}
		}

	}
}
