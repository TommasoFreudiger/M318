//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Net.Optifine.Util {

	// Metadata.xml XPath class reference: path="/api/package[@name='net.optifine.util']/class[@name='ArrayUtils']"
	[global::Android.Runtime.Register ("net/optifine/util/ArrayUtils", DoNotGenerateAcw=true)]
	public partial class ArrayUtils : global::Java.Lang.Object {
		static readonly JniPeerMembers _members = new XAPeerMembers ("net/optifine/util/ArrayUtils", typeof (ArrayUtils));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected ArrayUtils (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='net.optifine.util']/class[@name='ArrayUtils']/constructor[@name='ArrayUtils' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe ArrayUtils () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='ArrayUtils']/method[@name='addIntToArray' and count(parameter)=2 and parameter[1][@type='int[]'] and parameter[2][@type='int']]"
		[Register ("addIntToArray", "([II)[I", "")]
		public static unsafe int[]? AddIntToArray (int[]? intArray, int intValue)
		{
			const string __id = "addIntToArray.([II)[I";
			IntPtr native_intArray = JNIEnv.NewArray (intArray);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_intArray);
				__args [1] = new JniArgumentValue (intValue);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (int[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (int));
			} finally {
				if (intArray != null) {
					JNIEnv.CopyArray (native_intArray, intArray);
					JNIEnv.DeleteLocalRef (native_intArray);
				}
				global::System.GC.KeepAlive (intArray);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='ArrayUtils']/method[@name='addIntsToArray' and count(parameter)=2 and parameter[1][@type='int[]'] and parameter[2][@type='int[]']]"
		[Register ("addIntsToArray", "([I[I)[I", "")]
		public static unsafe int[]? AddIntsToArray (int[]? intArray, int[]? copyFrom)
		{
			const string __id = "addIntsToArray.([I[I)[I";
			IntPtr native_intArray = JNIEnv.NewArray (intArray);
			IntPtr native_copyFrom = JNIEnv.NewArray (copyFrom);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_intArray);
				__args [1] = new JniArgumentValue (native_copyFrom);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (int[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (int));
			} finally {
				if (intArray != null) {
					JNIEnv.CopyArray (native_intArray, intArray);
					JNIEnv.DeleteLocalRef (native_intArray);
				}
				if (copyFrom != null) {
					JNIEnv.CopyArray (native_copyFrom, copyFrom);
					JNIEnv.DeleteLocalRef (native_copyFrom);
				}
				global::System.GC.KeepAlive (intArray);
				global::System.GC.KeepAlive (copyFrom);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='ArrayUtils']/method[@name='addObjectToArray' and count(parameter)=2 and parameter[1][@type='java.lang.Object[]'] and parameter[2][@type='java.lang.Object']]"
		[Register ("addObjectToArray", "([Ljava/lang/Object;Ljava/lang/Object;)[Ljava/lang/Object;", "")]
		public static unsafe global::Java.Lang.Object[]? AddObjectToArray (global::Java.Lang.Object[]? arr, global::Java.Lang.Object? obj)
		{
			const string __id = "addObjectToArray.([Ljava/lang/Object;Ljava/lang/Object;)[Ljava/lang/Object;";
			IntPtr native_arr = JNIEnv.NewArray (arr);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_arr);
				__args [1] = new JniArgumentValue ((obj == null) ? IntPtr.Zero : ((global::Java.Lang.Object) obj).Handle);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (global::Java.Lang.Object[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (global::Java.Lang.Object));
			} finally {
				if (arr != null) {
					JNIEnv.CopyArray (native_arr, arr);
					JNIEnv.DeleteLocalRef (native_arr);
				}
				global::System.GC.KeepAlive (arr);
				global::System.GC.KeepAlive (obj);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='ArrayUtils']/method[@name='addObjectToArray' and count(parameter)=3 and parameter[1][@type='java.lang.Object[]'] and parameter[2][@type='java.lang.Object'] and parameter[3][@type='int']]"
		[Register ("addObjectToArray", "([Ljava/lang/Object;Ljava/lang/Object;I)[Ljava/lang/Object;", "")]
		public static unsafe global::Java.Lang.Object[]? AddObjectToArray (global::Java.Lang.Object[]? arr, global::Java.Lang.Object? obj, int index)
		{
			const string __id = "addObjectToArray.([Ljava/lang/Object;Ljava/lang/Object;I)[Ljava/lang/Object;";
			IntPtr native_arr = JNIEnv.NewArray (arr);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_arr);
				__args [1] = new JniArgumentValue ((obj == null) ? IntPtr.Zero : ((global::Java.Lang.Object) obj).Handle);
				__args [2] = new JniArgumentValue (index);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (global::Java.Lang.Object[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (global::Java.Lang.Object));
			} finally {
				if (arr != null) {
					JNIEnv.CopyArray (native_arr, arr);
					JNIEnv.DeleteLocalRef (native_arr);
				}
				global::System.GC.KeepAlive (arr);
				global::System.GC.KeepAlive (obj);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='ArrayUtils']/method[@name='addObjectsToArray' and count(parameter)=2 and parameter[1][@type='java.lang.Object[]'] and parameter[2][@type='java.lang.Object[]']]"
		[Register ("addObjectsToArray", "([Ljava/lang/Object;[Ljava/lang/Object;)[Ljava/lang/Object;", "")]
		public static unsafe global::Java.Lang.Object[]? AddObjectsToArray (global::Java.Lang.Object[]? arr, global::Java.Lang.Object[]? objs)
		{
			const string __id = "addObjectsToArray.([Ljava/lang/Object;[Ljava/lang/Object;)[Ljava/lang/Object;";
			IntPtr native_arr = JNIEnv.NewArray (arr);
			IntPtr native_objs = JNIEnv.NewArray (objs);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_arr);
				__args [1] = new JniArgumentValue (native_objs);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (global::Java.Lang.Object[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (global::Java.Lang.Object));
			} finally {
				if (arr != null) {
					JNIEnv.CopyArray (native_arr, arr);
					JNIEnv.DeleteLocalRef (native_arr);
				}
				if (objs != null) {
					JNIEnv.CopyArray (native_objs, objs);
					JNIEnv.DeleteLocalRef (native_objs);
				}
				global::System.GC.KeepAlive (arr);
				global::System.GC.KeepAlive (objs);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='ArrayUtils']/method[@name='arrayToHexString' and count(parameter)=2 and parameter[1][@type='int[]'] and parameter[2][@type='java.lang.String']]"
		[Register ("arrayToHexString", "([ILjava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? ArrayToHexString (int[]? arr, string? separator)
		{
			const string __id = "arrayToHexString.([ILjava/lang/String;)Ljava/lang/String;";
			IntPtr native_arr = JNIEnv.NewArray (arr);
			IntPtr native_separator = JNIEnv.NewString ((string?)separator);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_arr);
				__args [1] = new JniArgumentValue (native_separator);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (arr != null) {
					JNIEnv.CopyArray (native_arr, arr);
					JNIEnv.DeleteLocalRef (native_arr);
				}
				JNIEnv.DeleteLocalRef (native_separator);
				global::System.GC.KeepAlive (arr);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='ArrayUtils']/method[@name='arrayToString' and count(parameter)=1 and parameter[1][@type='boolean[]']]"
		[Register ("arrayToString", "([Z)Ljava/lang/String;", "")]
		public static unsafe string? ArrayToString (bool[]? arr)
		{
			const string __id = "arrayToString.([Z)Ljava/lang/String;";
			IntPtr native_arr = JNIEnv.NewArray (arr);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_arr);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (arr != null) {
					JNIEnv.CopyArray (native_arr, arr);
					JNIEnv.DeleteLocalRef (native_arr);
				}
				global::System.GC.KeepAlive (arr);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='ArrayUtils']/method[@name='arrayToString' and count(parameter)=2 and parameter[1][@type='boolean[]'] and parameter[2][@type='int']]"
		[Register ("arrayToString", "([ZI)Ljava/lang/String;", "")]
		public static unsafe string? ArrayToString (bool[]? arr, int maxLen)
		{
			const string __id = "arrayToString.([ZI)Ljava/lang/String;";
			IntPtr native_arr = JNIEnv.NewArray (arr);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_arr);
				__args [1] = new JniArgumentValue (maxLen);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (arr != null) {
					JNIEnv.CopyArray (native_arr, arr);
					JNIEnv.DeleteLocalRef (native_arr);
				}
				global::System.GC.KeepAlive (arr);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='ArrayUtils']/method[@name='arrayToString' and count(parameter)=2 and parameter[1][@type='boolean[]'] and parameter[2][@type='java.lang.String']]"
		[Register ("arrayToString", "([ZLjava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? ArrayToString (bool[]? arr, string? separator)
		{
			const string __id = "arrayToString.([ZLjava/lang/String;)Ljava/lang/String;";
			IntPtr native_arr = JNIEnv.NewArray (arr);
			IntPtr native_separator = JNIEnv.NewString ((string?)separator);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_arr);
				__args [1] = new JniArgumentValue (native_separator);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (arr != null) {
					JNIEnv.CopyArray (native_arr, arr);
					JNIEnv.DeleteLocalRef (native_arr);
				}
				JNIEnv.DeleteLocalRef (native_separator);
				global::System.GC.KeepAlive (arr);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='ArrayUtils']/method[@name='arrayToString' and count(parameter)=3 and parameter[1][@type='boolean[]'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='int']]"
		[Register ("arrayToString", "([ZLjava/lang/String;I)Ljava/lang/String;", "")]
		public static unsafe string? ArrayToString (bool[]? arr, string? separator, int maxLen)
		{
			const string __id = "arrayToString.([ZLjava/lang/String;I)Ljava/lang/String;";
			IntPtr native_arr = JNIEnv.NewArray (arr);
			IntPtr native_separator = JNIEnv.NewString ((string?)separator);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_arr);
				__args [1] = new JniArgumentValue (native_separator);
				__args [2] = new JniArgumentValue (maxLen);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (arr != null) {
					JNIEnv.CopyArray (native_arr, arr);
					JNIEnv.DeleteLocalRef (native_arr);
				}
				JNIEnv.DeleteLocalRef (native_separator);
				global::System.GC.KeepAlive (arr);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='ArrayUtils']/method[@name='arrayToString' and count(parameter)=1 and parameter[1][@type='float[]']]"
		[Register ("arrayToString", "([F)Ljava/lang/String;", "")]
		public static unsafe string? ArrayToString (float[]? arr)
		{
			const string __id = "arrayToString.([F)Ljava/lang/String;";
			IntPtr native_arr = JNIEnv.NewArray (arr);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_arr);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (arr != null) {
					JNIEnv.CopyArray (native_arr, arr);
					JNIEnv.DeleteLocalRef (native_arr);
				}
				global::System.GC.KeepAlive (arr);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='ArrayUtils']/method[@name='arrayToString' and count(parameter)=2 and parameter[1][@type='float[]'] and parameter[2][@type='java.lang.String']]"
		[Register ("arrayToString", "([FLjava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? ArrayToString (float[]? arr, string? separator)
		{
			const string __id = "arrayToString.([FLjava/lang/String;)Ljava/lang/String;";
			IntPtr native_arr = JNIEnv.NewArray (arr);
			IntPtr native_separator = JNIEnv.NewString ((string?)separator);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_arr);
				__args [1] = new JniArgumentValue (native_separator);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (arr != null) {
					JNIEnv.CopyArray (native_arr, arr);
					JNIEnv.DeleteLocalRef (native_arr);
				}
				JNIEnv.DeleteLocalRef (native_separator);
				global::System.GC.KeepAlive (arr);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='ArrayUtils']/method[@name='arrayToString' and count(parameter)=3 and parameter[1][@type='float[]'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='java.lang.String']]"
		[Register ("arrayToString", "([FLjava/lang/String;Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? ArrayToString (float[]? arr, string? separator, string? format)
		{
			const string __id = "arrayToString.([FLjava/lang/String;Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native_arr = JNIEnv.NewArray (arr);
			IntPtr native_separator = JNIEnv.NewString ((string?)separator);
			IntPtr native_format = JNIEnv.NewString ((string?)format);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_arr);
				__args [1] = new JniArgumentValue (native_separator);
				__args [2] = new JniArgumentValue (native_format);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (arr != null) {
					JNIEnv.CopyArray (native_arr, arr);
					JNIEnv.DeleteLocalRef (native_arr);
				}
				JNIEnv.DeleteLocalRef (native_separator);
				JNIEnv.DeleteLocalRef (native_format);
				global::System.GC.KeepAlive (arr);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='ArrayUtils']/method[@name='arrayToString' and count(parameter)=1 and parameter[1][@type='int[]']]"
		[Register ("arrayToString", "([I)Ljava/lang/String;", "")]
		public static unsafe string? ArrayToString (int[]? arr)
		{
			const string __id = "arrayToString.([I)Ljava/lang/String;";
			IntPtr native_arr = JNIEnv.NewArray (arr);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_arr);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (arr != null) {
					JNIEnv.CopyArray (native_arr, arr);
					JNIEnv.DeleteLocalRef (native_arr);
				}
				global::System.GC.KeepAlive (arr);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='ArrayUtils']/method[@name='arrayToString' and count(parameter)=2 and parameter[1][@type='int[]'] and parameter[2][@type='java.lang.String']]"
		[Register ("arrayToString", "([ILjava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? ArrayToString (int[]? arr, string? separator)
		{
			const string __id = "arrayToString.([ILjava/lang/String;)Ljava/lang/String;";
			IntPtr native_arr = JNIEnv.NewArray (arr);
			IntPtr native_separator = JNIEnv.NewString ((string?)separator);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_arr);
				__args [1] = new JniArgumentValue (native_separator);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (arr != null) {
					JNIEnv.CopyArray (native_arr, arr);
					JNIEnv.DeleteLocalRef (native_arr);
				}
				JNIEnv.DeleteLocalRef (native_separator);
				global::System.GC.KeepAlive (arr);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='ArrayUtils']/method[@name='arrayToString' and count(parameter)=1 and parameter[1][@type='java.lang.Object[]']]"
		[Register ("arrayToString", "([Ljava/lang/Object;)Ljava/lang/String;", "")]
		public static unsafe string? ArrayToString (global::Java.Lang.Object[]? arr)
		{
			const string __id = "arrayToString.([Ljava/lang/Object;)Ljava/lang/String;";
			IntPtr native_arr = JNIEnv.NewArray (arr);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_arr);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (arr != null) {
					JNIEnv.CopyArray (native_arr, arr);
					JNIEnv.DeleteLocalRef (native_arr);
				}
				global::System.GC.KeepAlive (arr);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='ArrayUtils']/method[@name='arrayToString' and count(parameter)=2 and parameter[1][@type='java.lang.Object[]'] and parameter[2][@type='java.lang.String']]"
		[Register ("arrayToString", "([Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? ArrayToString (global::Java.Lang.Object[]? arr, string? separator)
		{
			const string __id = "arrayToString.([Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native_arr = JNIEnv.NewArray (arr);
			IntPtr native_separator = JNIEnv.NewString ((string?)separator);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_arr);
				__args [1] = new JniArgumentValue (native_separator);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (arr != null) {
					JNIEnv.CopyArray (native_arr, arr);
					JNIEnv.DeleteLocalRef (native_arr);
				}
				JNIEnv.DeleteLocalRef (native_separator);
				global::System.GC.KeepAlive (arr);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='ArrayUtils']/method[@name='collectionToArray' and count(parameter)=2 and parameter[1][@type='java.util.Collection'] and parameter[2][@type='java.lang.Class']]"
		[Register ("collectionToArray", "(Ljava/util/Collection;Ljava/lang/Class;)[Ljava/lang/Object;", "")]
		public static unsafe global::Java.Lang.Object[]? CollectionToArray (global::System.Collections.ICollection? coll, global::Java.Lang.Class? elementClass)
		{
			const string __id = "collectionToArray.(Ljava/util/Collection;Ljava/lang/Class;)[Ljava/lang/Object;";
			IntPtr native_coll = global::Android.Runtime.JavaCollection.ToLocalJniHandle (coll);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_coll);
				__args [1] = new JniArgumentValue ((elementClass == null) ? IntPtr.Zero : ((global::Java.Lang.Object) elementClass).Handle);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (global::Java.Lang.Object[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (global::Java.Lang.Object));
			} finally {
				JNIEnv.DeleteLocalRef (native_coll);
				global::System.GC.KeepAlive (coll);
				global::System.GC.KeepAlive (elementClass);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='ArrayUtils']/method[@name='contains' and count(parameter)=2 and parameter[1][@type='int[]'] and parameter[2][@type='int']]"
		[Register ("contains", "([II)Z", "")]
		public static unsafe bool Contains (int[]? arr, int val)
		{
			const string __id = "contains.([II)Z";
			IntPtr native_arr = JNIEnv.NewArray (arr);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_arr);
				__args [1] = new JniArgumentValue (val);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				if (arr != null) {
					JNIEnv.CopyArray (native_arr, arr);
					JNIEnv.DeleteLocalRef (native_arr);
				}
				global::System.GC.KeepAlive (arr);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='ArrayUtils']/method[@name='contains' and count(parameter)=2 and parameter[1][@type='java.lang.Object[]'] and parameter[2][@type='java.lang.Object']]"
		[Register ("contains", "([Ljava/lang/Object;Ljava/lang/Object;)Z", "")]
		public static unsafe bool Contains (global::Java.Lang.Object[]? arr, global::Java.Lang.Object? val)
		{
			const string __id = "contains.([Ljava/lang/Object;Ljava/lang/Object;)Z";
			IntPtr native_arr = JNIEnv.NewArray (arr);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_arr);
				__args [1] = new JniArgumentValue ((val == null) ? IntPtr.Zero : ((global::Java.Lang.Object) val).Handle);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				if (arr != null) {
					JNIEnv.CopyArray (native_arr, arr);
					JNIEnv.DeleteLocalRef (native_arr);
				}
				global::System.GC.KeepAlive (arr);
				global::System.GC.KeepAlive (val);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='ArrayUtils']/method[@name='equals' and count(parameter)=2 and parameter[1][@type='java.lang.Object'] and parameter[2][@type='java.lang.Object']]"
		[Register ("equals", "(Ljava/lang/Object;Ljava/lang/Object;)Z", "")]
		public static unsafe bool Equals (global::Java.Lang.Object? o1, global::Java.Lang.Object? o2)
		{
			const string __id = "equals.(Ljava/lang/Object;Ljava/lang/Object;)Z";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((o1 == null) ? IntPtr.Zero : ((global::Java.Lang.Object) o1).Handle);
				__args [1] = new JniArgumentValue ((o2 == null) ? IntPtr.Zero : ((global::Java.Lang.Object) o2).Handle);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (o1);
				global::System.GC.KeepAlive (o2);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='ArrayUtils']/method[@name='equalsOne' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='int[]']]"
		[Register ("equalsOne", "(I[I)Z", "")]
		public static unsafe bool EqualsOne (int val, int[]? vals)
		{
			const string __id = "equalsOne.(I[I)Z";
			IntPtr native_vals = JNIEnv.NewArray (vals);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (val);
				__args [1] = new JniArgumentValue (native_vals);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				if (vals != null) {
					JNIEnv.CopyArray (native_vals, vals);
					JNIEnv.DeleteLocalRef (native_vals);
				}
				global::System.GC.KeepAlive (vals);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='ArrayUtils']/method[@name='equalsOne' and count(parameter)=2 and parameter[1][@type='java.lang.Object'] and parameter[2][@type='java.lang.Object[]']]"
		[Register ("equalsOne", "(Ljava/lang/Object;[Ljava/lang/Object;)Z", "")]
		public static unsafe bool EqualsOne (global::Java.Lang.Object? a, global::Java.Lang.Object[]? bs)
		{
			const string __id = "equalsOne.(Ljava/lang/Object;[Ljava/lang/Object;)Z";
			IntPtr native_bs = JNIEnv.NewArray (bs);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((a == null) ? IntPtr.Zero : ((global::Java.Lang.Object) a).Handle);
				__args [1] = new JniArgumentValue (native_bs);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				if (bs != null) {
					JNIEnv.CopyArray (native_bs, bs);
					JNIEnv.DeleteLocalRef (native_bs);
				}
				global::System.GC.KeepAlive (a);
				global::System.GC.KeepAlive (bs);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='ArrayUtils']/method[@name='indexOf' and count(parameter)=2 and parameter[1][@type='int[]'] and parameter[2][@type='int']]"
		[Register ("indexOf", "([II)I", "")]
		public static unsafe int IndexOf (int[]? arr, int val)
		{
			const string __id = "indexOf.([II)I";
			IntPtr native_arr = JNIEnv.NewArray (arr);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_arr);
				__args [1] = new JniArgumentValue (val);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (arr != null) {
					JNIEnv.CopyArray (native_arr, arr);
					JNIEnv.DeleteLocalRef (native_arr);
				}
				global::System.GC.KeepAlive (arr);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='ArrayUtils']/method[@name='indexOf' and count(parameter)=2 and parameter[1][@type='java.lang.Object[]'] and parameter[2][@type='java.lang.Object']]"
		[Register ("indexOf", "([Ljava/lang/Object;Ljava/lang/Object;)I", "")]
		public static unsafe int IndexOf (global::Java.Lang.Object[]? arr, global::Java.Lang.Object? val)
		{
			const string __id = "indexOf.([Ljava/lang/Object;Ljava/lang/Object;)I";
			IntPtr native_arr = JNIEnv.NewArray (arr);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_arr);
				__args [1] = new JniArgumentValue ((val == null) ? IntPtr.Zero : ((global::Java.Lang.Object) val).Handle);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (arr != null) {
					JNIEnv.CopyArray (native_arr, arr);
					JNIEnv.DeleteLocalRef (native_arr);
				}
				global::System.GC.KeepAlive (arr);
				global::System.GC.KeepAlive (val);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='ArrayUtils']/method[@name='isSameOne' and count(parameter)=2 and parameter[1][@type='java.lang.Object'] and parameter[2][@type='java.lang.Object[]']]"
		[Register ("isSameOne", "(Ljava/lang/Object;[Ljava/lang/Object;)Z", "")]
		public static unsafe bool IsSameOne (global::Java.Lang.Object? a, global::Java.Lang.Object[]? bs)
		{
			const string __id = "isSameOne.(Ljava/lang/Object;[Ljava/lang/Object;)Z";
			IntPtr native_bs = JNIEnv.NewArray (bs);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((a == null) ? IntPtr.Zero : ((global::Java.Lang.Object) a).Handle);
				__args [1] = new JniArgumentValue (native_bs);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				if (bs != null) {
					JNIEnv.CopyArray (native_bs, bs);
					JNIEnv.DeleteLocalRef (native_bs);
				}
				global::System.GC.KeepAlive (a);
				global::System.GC.KeepAlive (bs);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='ArrayUtils']/method[@name='newBoolean' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='boolean']]"
		[Register ("newBoolean", "(IZ)[Z", "")]
		public static unsafe bool[]? NewBoolean (int len, bool val)
		{
			const string __id = "newBoolean.(IZ)[Z";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (len);
				__args [1] = new JniArgumentValue (val);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (bool[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (bool));
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='ArrayUtils']/method[@name='newInt' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='int']]"
		[Register ("newInt", "(II)[I", "")]
		public static unsafe int[]? NewInt (int len, int val)
		{
			const string __id = "newInt.(II)[I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (len);
				__args [1] = new JniArgumentValue (val);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (int[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (int));
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='ArrayUtils']/method[@name='newObject' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='java.lang.Object']]"
		[Register ("newObject", "(ILjava/lang/Object;)[Ljava/lang/Object;", "")]
		public static unsafe global::Java.Lang.Object[]? NewObject (int len, global::Java.Lang.Object? val)
		{
			const string __id = "newObject.(ILjava/lang/Object;)[Ljava/lang/Object;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (len);
				__args [1] = new JniArgumentValue ((val == null) ? IntPtr.Zero : ((global::Java.Lang.Object) val).Handle);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (global::Java.Lang.Object[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (global::Java.Lang.Object));
			} finally {
				global::System.GC.KeepAlive (val);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='ArrayUtils']/method[@name='removeObjectFromArray' and count(parameter)=2 and parameter[1][@type='java.lang.Object[]'] and parameter[2][@type='java.lang.Object']]"
		[Register ("removeObjectFromArray", "([Ljava/lang/Object;Ljava/lang/Object;)[Ljava/lang/Object;", "")]
		public static unsafe global::Java.Lang.Object[]? RemoveObjectFromArray (global::Java.Lang.Object[]? arr, global::Java.Lang.Object? obj)
		{
			const string __id = "removeObjectFromArray.([Ljava/lang/Object;Ljava/lang/Object;)[Ljava/lang/Object;";
			IntPtr native_arr = JNIEnv.NewArray (arr);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_arr);
				__args [1] = new JniArgumentValue ((obj == null) ? IntPtr.Zero : ((global::Java.Lang.Object) obj).Handle);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (global::Java.Lang.Object[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (global::Java.Lang.Object));
			} finally {
				if (arr != null) {
					JNIEnv.CopyArray (native_arr, arr);
					JNIEnv.DeleteLocalRef (native_arr);
				}
				global::System.GC.KeepAlive (arr);
				global::System.GC.KeepAlive (obj);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='ArrayUtils']/method[@name='toObject' and count(parameter)=1 and parameter[1][@type='int[]']]"
		[Register ("toObject", "([I)[Ljava/lang/Integer;", "")]
		public static unsafe global::Java.Lang.Integer[]? ToObject (int[]? arr)
		{
			const string __id = "toObject.([I)[Ljava/lang/Integer;";
			IntPtr native_arr = JNIEnv.NewArray (arr);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_arr);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (global::Java.Lang.Integer[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (global::Java.Lang.Integer));
			} finally {
				if (arr != null) {
					JNIEnv.CopyArray (native_arr, arr);
					JNIEnv.DeleteLocalRef (native_arr);
				}
				global::System.GC.KeepAlive (arr);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='ArrayUtils']/method[@name='toPrimitive' and count(parameter)=1 and parameter[1][@type='java.lang.Integer[]']]"
		[Register ("toPrimitive", "([Ljava/lang/Integer;)[I", "")]
		public static unsafe int[]? ToPrimitive (global::Java.Lang.Integer[]? arr)
		{
			const string __id = "toPrimitive.([Ljava/lang/Integer;)[I";
			IntPtr native_arr = JNIEnv.NewArray (arr);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_arr);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (int[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (int));
			} finally {
				if (arr != null) {
					JNIEnv.CopyArray (native_arr, arr);
					JNIEnv.DeleteLocalRef (native_arr);
				}
				global::System.GC.KeepAlive (arr);
			}
		}

	}
}
