//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Net.Optifine.Util {

	// Metadata.xml XPath class reference: path="/api/package[@name='net.optifine.util']/class[@name='StaticMultiMap']"
	[global::Android.Runtime.Register ("net/optifine/util/StaticMultiMap", DoNotGenerateAcw=true)]
	public partial class StaticMultiMap : global::Java.Lang.Object {
		static readonly JniPeerMembers _members = new XAPeerMembers ("net/optifine/util/StaticMultiMap", typeof (StaticMultiMap));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected StaticMultiMap (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='net.optifine.util']/class[@name='StaticMultiMap']/constructor[@name='StaticMultiMap' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe StaticMultiMap () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='StaticMultiMap']/method[@name='contains' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String']]"
		[Register ("contains", "(Ljava/lang/String;Ljava/lang/String;)Z", "")]
		public static unsafe bool Contains (string? mapName, string? key)
		{
			const string __id = "contains.(Ljava/lang/String;Ljava/lang/String;)Z";
			IntPtr native_mapName = JNIEnv.NewString ((string?)mapName);
			IntPtr native_key = JNIEnv.NewString ((string?)key);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_mapName);
				__args [1] = new JniArgumentValue (native_key);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_mapName);
				JNIEnv.DeleteLocalRef (native_key);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='StaticMultiMap']/method[@name='contains' and count(parameter)=3 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='java.lang.Object']]"
		[Register ("contains", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)Z", "")]
		public static unsafe bool Contains (string? mapName, string? key, global::Java.Lang.Object? value)
		{
			const string __id = "contains.(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)Z";
			IntPtr native_mapName = JNIEnv.NewString ((string?)mapName);
			IntPtr native_key = JNIEnv.NewString ((string?)key);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_mapName);
				__args [1] = new JniArgumentValue (native_key);
				__args [2] = new JniArgumentValue ((value == null) ? IntPtr.Zero : ((global::Java.Lang.Object) value).Handle);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_mapName);
				JNIEnv.DeleteLocalRef (native_key);
				global::System.GC.KeepAlive (value);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='StaticMultiMap']/method[@name='containsValue' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.Object']]"
		[Register ("containsValue", "(Ljava/lang/String;Ljava/lang/Object;)Z", "")]
		public static unsafe bool ContainsValue (string? mapName, global::Java.Lang.Object? val)
		{
			const string __id = "containsValue.(Ljava/lang/String;Ljava/lang/Object;)Z";
			IntPtr native_mapName = JNIEnv.NewString ((string?)mapName);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_mapName);
				__args [1] = new JniArgumentValue ((val == null) ? IntPtr.Zero : ((global::Java.Lang.Object) val).Handle);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_mapName);
				global::System.GC.KeepAlive (val);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='StaticMultiMap']/method[@name='get' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String']]"
		[Register ("get", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;", "")]
		public static unsafe global::Java.Lang.Object? Get (string? mapName, string? key)
		{
			const string __id = "get.(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;";
			IntPtr native_mapName = JNIEnv.NewString ((string?)mapName);
			IntPtr native_key = JNIEnv.NewString ((string?)key);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_mapName);
				__args [1] = new JniArgumentValue (native_key);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Lang.Object.GetObject<global::Java.Lang.Object> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_mapName);
				JNIEnv.DeleteLocalRef (native_key);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='StaticMultiMap']/method[@name='getMap' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("getMap", "(Ljava/lang/String;)Ljava/util/Map;", "")]
		public static unsafe global::System.Collections.Generic.IDictionary<string, global::Java.Lang.Object>? GetMap (string? mapName)
		{
			const string __id = "getMap.(Ljava/lang/String;)Ljava/util/Map;";
			IntPtr native_mapName = JNIEnv.NewString ((string?)mapName);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_mapName);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Android.Runtime.JavaDictionary<string, global::Java.Lang.Object>.FromJniHandle (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_mapName);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='StaticMultiMap']/method[@name='put' and count(parameter)=3 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='java.lang.Object']]"
		[Register ("put", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V", "")]
		public static unsafe void Put (string? mapName, string? key, global::Java.Lang.Object? value)
		{
			const string __id = "put.(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V";
			IntPtr native_mapName = JNIEnv.NewString ((string?)mapName);
			IntPtr native_key = JNIEnv.NewString ((string?)key);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_mapName);
				__args [1] = new JniArgumentValue (native_key);
				__args [2] = new JniArgumentValue ((value == null) ? IntPtr.Zero : ((global::Java.Lang.Object) value).Handle);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_mapName);
				JNIEnv.DeleteLocalRef (native_key);
				global::System.GC.KeepAlive (value);
			}
		}

	}
}
