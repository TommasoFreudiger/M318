//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Net.Optifine.Render {

	// Metadata.xml XPath class reference: path="/api/package[@name='net.optifine.render']/class[@name='ChunkLayerSet']"
	[global::Android.Runtime.Register ("net/optifine/render/ChunkLayerSet", DoNotGenerateAcw=true)]
	public partial class ChunkLayerSet : global::Java.Lang.Object, global::Java.Util.ISet {
		static readonly JniPeerMembers _members = new XAPeerMembers ("net/optifine/render/ChunkLayerSet", typeof (ChunkLayerSet));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected ChunkLayerSet (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='net.optifine.render']/class[@name='ChunkLayerSet']/constructor[@name='ChunkLayerSet' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe ChunkLayerSet () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		static Delegate? cb_isEmpty;
#pragma warning disable 0169
		static Delegate GetIsEmptyHandler ()
		{
			if (cb_isEmpty == null)
				cb_isEmpty = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_Z (n_IsEmpty));
			return cb_isEmpty;
		}

		static bool n_IsEmpty (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Render.ChunkLayerSet> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			return __this.IsEmpty;
		}
#pragma warning restore 0169

		public virtual unsafe bool IsEmpty {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.render']/class[@name='ChunkLayerSet']/method[@name='isEmpty' and count(parameter)=0]"
			[Register ("isEmpty", "()Z", "GetIsEmptyHandler")]
			get {
				const string __id = "isEmpty.()Z";
				try {
					var __rm = _members.InstanceMethods.InvokeVirtualBooleanMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		static Delegate? cb_clear;
#pragma warning disable 0169
		static Delegate GetClearHandler ()
		{
			if (cb_clear == null)
				cb_clear = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_V (n_Clear));
			return cb_clear;
		}

		static void n_Clear (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Render.ChunkLayerSet> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			__this.Clear ();
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.render']/class[@name='ChunkLayerSet']/method[@name='clear' and count(parameter)=0]"
		[Register ("clear", "()V", "GetClearHandler")]
		public virtual unsafe void Clear ()
		{
			const string __id = "clear.()V";
			try {
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, null);
			} finally {
			}
		}

		static Delegate? cb_contains_Ljava_lang_Object_;
#pragma warning disable 0169
		static Delegate GetContains_Ljava_lang_Object_Handler ()
		{
			if (cb_contains_Ljava_lang_Object_ == null)
				cb_contains_Ljava_lang_Object_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_Z (n_Contains_Ljava_lang_Object_));
			return cb_contains_Ljava_lang_Object_;
		}

		static bool n_Contains_Ljava_lang_Object_ (IntPtr jnienv, IntPtr native__this, IntPtr native_obj)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Render.ChunkLayerSet> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var obj = global::Java.Lang.Object.GetObject<global::Java.Lang.Object> (native_obj, JniHandleOwnership.DoNotTransfer);
			bool __ret = __this.Contains (obj);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.render']/class[@name='ChunkLayerSet']/method[@name='contains' and count(parameter)=1 and parameter[1][@type='java.lang.Object']]"
		[Register ("contains", "(Ljava/lang/Object;)Z", "GetContains_Ljava_lang_Object_Handler")]
		public virtual unsafe bool Contains (global::Java.Lang.Object? obj)
		{
			const string __id = "contains.(Ljava/lang/Object;)Z";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((obj == null) ? IntPtr.Zero : ((global::Java.Lang.Object) obj).Handle);
				var __rm = _members.InstanceMethods.InvokeVirtualBooleanMethod (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (obj);
			}
		}

		static Delegate? cb_containsAll_Ljava_util_Collection_;
#pragma warning disable 0169
		static Delegate GetContainsAll_Ljava_util_Collection_Handler ()
		{
			if (cb_containsAll_Ljava_util_Collection_ == null)
				cb_containsAll_Ljava_util_Collection_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_Z (n_ContainsAll_Ljava_util_Collection_));
			return cb_containsAll_Ljava_util_Collection_;
		}

		static bool n_ContainsAll_Ljava_util_Collection_ (IntPtr jnienv, IntPtr native__this, IntPtr native_c)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Render.ChunkLayerSet> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var c = global::Android.Runtime.JavaCollection<object>.FromJniHandle (native_c, JniHandleOwnership.DoNotTransfer);
			bool __ret = __this.ContainsAll (c);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.render']/class[@name='ChunkLayerSet']/method[@name='containsAll' and count(parameter)=1 and parameter[1][@type='java.util.Collection&lt;?&gt;']]"
		[Register ("containsAll", "(Ljava/util/Collection;)Z", "GetContainsAll_Ljava_util_Collection_Handler")]
		public virtual unsafe bool ContainsAll (global::System.Collections.Generic.ICollection<object>? c)
		{
			const string __id = "containsAll.(Ljava/util/Collection;)Z";
			IntPtr native_c = global::Android.Runtime.JavaCollection<object>.ToLocalJniHandle (c);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_c);
				var __rm = _members.InstanceMethods.InvokeVirtualBooleanMethod (__id, this, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_c);
				global::System.GC.KeepAlive (c);
			}
		}

		static Delegate? cb_iterator;
#pragma warning disable 0169
		static Delegate GetIteratorHandler ()
		{
			if (cb_iterator == null)
				cb_iterator = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_L (n_Iterator));
			return cb_iterator;
		}

		static IntPtr n_Iterator (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Render.ChunkLayerSet> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			return JNIEnv.ToLocalJniHandle (__this.Iterator ());
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.render']/class[@name='ChunkLayerSet']/method[@name='iterator' and count(parameter)=0]"
		[Register ("iterator", "()Ljava/util/Iterator;", "GetIteratorHandler")]
		public virtual unsafe global::Java.Util.IIterator? Iterator ()
		{
			const string __id = "iterator.()Ljava/util/Iterator;";
			try {
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
				return global::Java.Lang.Object.GetObject<global::Java.Util.IIterator> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
			}
		}

		static Delegate? cb_remove_Ljava_lang_Object_;
#pragma warning disable 0169
		static Delegate GetRemove_Ljava_lang_Object_Handler ()
		{
			if (cb_remove_Ljava_lang_Object_ == null)
				cb_remove_Ljava_lang_Object_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_Z (n_Remove_Ljava_lang_Object_));
			return cb_remove_Ljava_lang_Object_;
		}

		static bool n_Remove_Ljava_lang_Object_ (IntPtr jnienv, IntPtr native__this, IntPtr native_o)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Render.ChunkLayerSet> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var o = global::Java.Lang.Object.GetObject<global::Java.Lang.Object> (native_o, JniHandleOwnership.DoNotTransfer);
			bool __ret = __this.Remove (o);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.render']/class[@name='ChunkLayerSet']/method[@name='remove' and count(parameter)=1 and parameter[1][@type='java.lang.Object']]"
		[Register ("remove", "(Ljava/lang/Object;)Z", "GetRemove_Ljava_lang_Object_Handler")]
		public virtual unsafe bool Remove (global::Java.Lang.Object? o)
		{
			const string __id = "remove.(Ljava/lang/Object;)Z";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((o == null) ? IntPtr.Zero : ((global::Java.Lang.Object) o).Handle);
				var __rm = _members.InstanceMethods.InvokeVirtualBooleanMethod (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (o);
			}
		}

		static Delegate? cb_removeAll_Ljava_util_Collection_;
#pragma warning disable 0169
		static Delegate GetRemoveAll_Ljava_util_Collection_Handler ()
		{
			if (cb_removeAll_Ljava_util_Collection_ == null)
				cb_removeAll_Ljava_util_Collection_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_Z (n_RemoveAll_Ljava_util_Collection_));
			return cb_removeAll_Ljava_util_Collection_;
		}

		static bool n_RemoveAll_Ljava_util_Collection_ (IntPtr jnienv, IntPtr native__this, IntPtr native_c)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Render.ChunkLayerSet> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var c = global::Android.Runtime.JavaCollection<object>.FromJniHandle (native_c, JniHandleOwnership.DoNotTransfer);
			bool __ret = __this.RemoveAll (c);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.render']/class[@name='ChunkLayerSet']/method[@name='removeAll' and count(parameter)=1 and parameter[1][@type='java.util.Collection&lt;?&gt;']]"
		[Register ("removeAll", "(Ljava/util/Collection;)Z", "GetRemoveAll_Ljava_util_Collection_Handler")]
		public virtual unsafe bool RemoveAll (global::System.Collections.Generic.ICollection<object>? c)
		{
			const string __id = "removeAll.(Ljava/util/Collection;)Z";
			IntPtr native_c = global::Android.Runtime.JavaCollection<object>.ToLocalJniHandle (c);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_c);
				var __rm = _members.InstanceMethods.InvokeVirtualBooleanMethod (__id, this, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_c);
				global::System.GC.KeepAlive (c);
			}
		}

		static Delegate? cb_retainAll_Ljava_util_Collection_;
#pragma warning disable 0169
		static Delegate GetRetainAll_Ljava_util_Collection_Handler ()
		{
			if (cb_retainAll_Ljava_util_Collection_ == null)
				cb_retainAll_Ljava_util_Collection_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_Z (n_RetainAll_Ljava_util_Collection_));
			return cb_retainAll_Ljava_util_Collection_;
		}

		static bool n_RetainAll_Ljava_util_Collection_ (IntPtr jnienv, IntPtr native__this, IntPtr native_c)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Render.ChunkLayerSet> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var c = global::Android.Runtime.JavaCollection<object>.FromJniHandle (native_c, JniHandleOwnership.DoNotTransfer);
			bool __ret = __this.RetainAll (c);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.render']/class[@name='ChunkLayerSet']/method[@name='retainAll' and count(parameter)=1 and parameter[1][@type='java.util.Collection&lt;?&gt;']]"
		[Register ("retainAll", "(Ljava/util/Collection;)Z", "GetRetainAll_Ljava_util_Collection_Handler")]
		public virtual unsafe bool RetainAll (global::System.Collections.Generic.ICollection<object>? c)
		{
			const string __id = "retainAll.(Ljava/util/Collection;)Z";
			IntPtr native_c = global::Android.Runtime.JavaCollection<object>.ToLocalJniHandle (c);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_c);
				var __rm = _members.InstanceMethods.InvokeVirtualBooleanMethod (__id, this, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_c);
				global::System.GC.KeepAlive (c);
			}
		}

		static Delegate? cb_size;
#pragma warning disable 0169
		static Delegate GetSizeHandler ()
		{
			if (cb_size == null)
				cb_size = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_I (n_Size));
			return cb_size;
		}

		static int n_Size (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Render.ChunkLayerSet> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			return __this.Size ();
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.render']/class[@name='ChunkLayerSet']/method[@name='size' and count(parameter)=0]"
		[Register ("size", "()I", "GetSizeHandler")]
		public virtual unsafe int Size ()
		{
			const string __id = "size.()I";
			try {
				var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, null);
				return __rm;
			} finally {
			}
		}

		static Delegate? cb_toArray;
#pragma warning disable 0169
		static Delegate GetToArrayHandler ()
		{
			if (cb_toArray == null)
				cb_toArray = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_L (n_ToArray));
			return cb_toArray;
		}

		static IntPtr n_ToArray (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Render.ChunkLayerSet> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			return JNIEnv.NewArray (__this.ToArray ());
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.render']/class[@name='ChunkLayerSet']/method[@name='toArray' and count(parameter)=0]"
		[Register ("toArray", "()[Ljava/lang/Object;", "GetToArrayHandler")]
		public virtual unsafe global::Java.Lang.Object[]? ToArray ()
		{
			const string __id = "toArray.()[Ljava/lang/Object;";
			try {
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
				return (global::Java.Lang.Object[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (global::Java.Lang.Object));
			} finally {
			}
		}

		static Delegate? cb_toArray_arrayLjava_lang_Object_;
#pragma warning disable 0169
		static Delegate GetToArray_arrayLjava_lang_Object_Handler ()
		{
			if (cb_toArray_arrayLjava_lang_Object_ == null)
				cb_toArray_arrayLjava_lang_Object_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_L (n_ToArray_arrayLjava_lang_Object_));
			return cb_toArray_arrayLjava_lang_Object_;
		}

		static IntPtr n_ToArray_arrayLjava_lang_Object_ (IntPtr jnienv, IntPtr native__this, IntPtr native_a)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Render.ChunkLayerSet> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var a = (global::Java.Lang.Object[]?) JNIEnv.GetArray (native_a, JniHandleOwnership.DoNotTransfer, typeof (global::Java.Lang.Object));
			IntPtr __ret = JNIEnv.NewArray (__this.ToArray (a));
			if (a != null)
				JNIEnv.CopyArray (a, native_a);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.render']/class[@name='ChunkLayerSet']/method[@name='toArray' and count(parameter)=1 and parameter[1][@type='T[]']]"
		[Register ("toArray", "([Ljava/lang/Object;)[Ljava/lang/Object;", "GetToArray_arrayLjava_lang_Object_Handler")]
		[global::Java.Interop.JavaTypeParameters (new string [] {"T"})]
		public virtual unsafe global::Java.Lang.Object[]? ToArray (global::Java.Lang.Object[]? a)
		{
			const string __id = "toArray.([Ljava/lang/Object;)[Ljava/lang/Object;";
			IntPtr native_a = JNIEnv.NewArray (a);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_a);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return (global::Java.Lang.Object[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (global::Java.Lang.Object));
			} finally {
				if (a != null) {
					JNIEnv.CopyArray (native_a, a);
					JNIEnv.DeleteLocalRef (native_a);
				}
				global::System.GC.KeepAlive (a);
			}
		}

	}
}
