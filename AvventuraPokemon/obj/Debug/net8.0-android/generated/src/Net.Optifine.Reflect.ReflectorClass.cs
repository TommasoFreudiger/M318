//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Net.Optifine.Reflect {

	// Metadata.xml XPath class reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorClass']"
	[global::Android.Runtime.Register ("net/optifine/reflect/ReflectorClass", DoNotGenerateAcw=true)]
	public partial class ReflectorClass : global::Java.Lang.Object, global::Net.Optifine.Reflect.IResolvable {
		static readonly JniPeerMembers _members = new XAPeerMembers ("net/optifine/reflect/ReflectorClass", typeof (ReflectorClass));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected ReflectorClass (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorClass']/constructor[@name='ReflectorClass' and count(parameter)=1 and parameter[1][@type='java.lang.Class']]"
		[Register (".ctor", "(Ljava/lang/Class;)V", "")]
		public unsafe ReflectorClass (global::Java.Lang.Class? targetClass) : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "(Ljava/lang/Class;)V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((targetClass == null) ? IntPtr.Zero : ((global::Java.Lang.Object) targetClass).Handle);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (targetClass);
			}
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorClass']/constructor[@name='ReflectorClass' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register (".ctor", "(Ljava/lang/String;)V", "")]
		public unsafe ReflectorClass (string? targetClassName) : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "(Ljava/lang/String;)V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			IntPtr native_targetClassName = JNIEnv.NewString ((string?)targetClassName);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_targetClassName);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_targetClassName);
			}
		}

		static Delegate? cb_getTargetClass;
#pragma warning disable 0169
		static Delegate GetGetTargetClassHandler ()
		{
			if (cb_getTargetClass == null)
				cb_getTargetClass = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_L (n_GetTargetClass));
			return cb_getTargetClass;
		}

		static IntPtr n_GetTargetClass (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Reflect.ReflectorClass> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			return JNIEnv.ToLocalJniHandle (__this.TargetClass);
		}
#pragma warning restore 0169

		public virtual unsafe global::Java.Lang.Class? TargetClass {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorClass']/method[@name='getTargetClass' and count(parameter)=0]"
			[Register ("getTargetClass", "()Ljava/lang/Class;", "GetGetTargetClassHandler")]
			get {
				const string __id = "getTargetClass.()Ljava/lang/Class;";
				try {
					var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
					return global::Java.Lang.Object.GetObject<global::Java.Lang.Class> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
		}

		static Delegate? cb_getTargetClassName;
#pragma warning disable 0169
		static Delegate GetGetTargetClassNameHandler ()
		{
			if (cb_getTargetClassName == null)
				cb_getTargetClassName = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_L (n_GetTargetClassName));
			return cb_getTargetClassName;
		}

		static IntPtr n_GetTargetClassName (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Reflect.ReflectorClass> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			return JNIEnv.NewString (__this.TargetClassName);
		}
#pragma warning restore 0169

		public virtual unsafe string? TargetClassName {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorClass']/method[@name='getTargetClassName' and count(parameter)=0]"
			[Register ("getTargetClassName", "()Ljava/lang/String;", "GetGetTargetClassNameHandler")]
			get {
				const string __id = "getTargetClassName.()Ljava/lang/String;";
				try {
					var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
					return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
		}

		static Delegate? cb_exists;
#pragma warning disable 0169
		static Delegate GetExistsHandler ()
		{
			if (cb_exists == null)
				cb_exists = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_Z (n_Exists));
			return cb_exists;
		}

		static bool n_Exists (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Reflect.ReflectorClass> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			return __this.Exists ();
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorClass']/method[@name='exists' and count(parameter)=0]"
		[Register ("exists", "()Z", "GetExistsHandler")]
		public virtual unsafe bool Exists ()
		{
			const string __id = "exists.()Z";
			try {
				var __rm = _members.InstanceMethods.InvokeVirtualBooleanMethod (__id, this, null);
				return __rm;
			} finally {
			}
		}

		static Delegate? cb_isInstance_Ljava_lang_Object_;
#pragma warning disable 0169
		static Delegate GetIsInstance_Ljava_lang_Object_Handler ()
		{
			if (cb_isInstance_Ljava_lang_Object_ == null)
				cb_isInstance_Ljava_lang_Object_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_Z (n_IsInstance_Ljava_lang_Object_));
			return cb_isInstance_Ljava_lang_Object_;
		}

		static bool n_IsInstance_Ljava_lang_Object_ (IntPtr jnienv, IntPtr native__this, IntPtr native_obj)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Reflect.ReflectorClass> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var obj = global::Java.Lang.Object.GetObject<global::Java.Lang.Object> (native_obj, JniHandleOwnership.DoNotTransfer);
			bool __ret = __this.IsInstance (obj);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorClass']/method[@name='isInstance' and count(parameter)=1 and parameter[1][@type='java.lang.Object']]"
		[Register ("isInstance", "(Ljava/lang/Object;)Z", "GetIsInstance_Ljava_lang_Object_Handler")]
		public virtual unsafe bool IsInstance (global::Java.Lang.Object? obj)
		{
			const string __id = "isInstance.(Ljava/lang/Object;)Z";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((obj == null) ? IntPtr.Zero : ((global::Java.Lang.Object) obj).Handle);
				var __rm = _members.InstanceMethods.InvokeVirtualBooleanMethod (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (obj);
			}
		}

		static Delegate? cb_makeConstructor_arrayLjava_lang_Class_;
#pragma warning disable 0169
		static Delegate GetMakeConstructor_arrayLjava_lang_Class_Handler ()
		{
			if (cb_makeConstructor_arrayLjava_lang_Class_ == null)
				cb_makeConstructor_arrayLjava_lang_Class_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_L (n_MakeConstructor_arrayLjava_lang_Class_));
			return cb_makeConstructor_arrayLjava_lang_Class_;
		}

		static IntPtr n_MakeConstructor_arrayLjava_lang_Class_ (IntPtr jnienv, IntPtr native__this, IntPtr native_paramTypes)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Reflect.ReflectorClass> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var paramTypes = (global::Java.Lang.Class[]?) JNIEnv.GetArray (native_paramTypes, JniHandleOwnership.DoNotTransfer, typeof (global::Java.Lang.Class));
			IntPtr __ret = JNIEnv.ToLocalJniHandle (__this.MakeConstructor (paramTypes));
			if (paramTypes != null)
				JNIEnv.CopyArray (paramTypes, native_paramTypes);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorClass']/method[@name='makeConstructor' and count(parameter)=1 and parameter[1][@type='java.lang.Class[]']]"
		[Register ("makeConstructor", "([Ljava/lang/Class;)Lnet/optifine/reflect/ReflectorConstructor;", "GetMakeConstructor_arrayLjava_lang_Class_Handler")]
		public virtual unsafe global::Net.Optifine.Reflect.ReflectorConstructor? MakeConstructor (global::Java.Lang.Class[]? paramTypes)
		{
			const string __id = "makeConstructor.([Ljava/lang/Class;)Lnet/optifine/reflect/ReflectorConstructor;";
			IntPtr native_paramTypes = JNIEnv.NewArray (paramTypes);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_paramTypes);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Lang.Object.GetObject<global::Net.Optifine.Reflect.ReflectorConstructor> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (paramTypes != null) {
					JNIEnv.CopyArray (native_paramTypes, paramTypes);
					JNIEnv.DeleteLocalRef (native_paramTypes);
				}
				global::System.GC.KeepAlive (paramTypes);
			}
		}

		static Delegate? cb_makeField_Ljava_lang_Class_;
#pragma warning disable 0169
		static Delegate GetMakeField_Ljava_lang_Class_Handler ()
		{
			if (cb_makeField_Ljava_lang_Class_ == null)
				cb_makeField_Ljava_lang_Class_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_L (n_MakeField_Ljava_lang_Class_));
			return cb_makeField_Ljava_lang_Class_;
		}

		static IntPtr n_MakeField_Ljava_lang_Class_ (IntPtr jnienv, IntPtr native__this, IntPtr native_type)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Reflect.ReflectorClass> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var type = global::Java.Lang.Object.GetObject<global::Java.Lang.Class> (native_type, JniHandleOwnership.DoNotTransfer);
			IntPtr __ret = JNIEnv.ToLocalJniHandle (__this.MakeField (type));
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorClass']/method[@name='makeField' and count(parameter)=1 and parameter[1][@type='java.lang.Class']]"
		[Register ("makeField", "(Ljava/lang/Class;)Lnet/optifine/reflect/ReflectorField;", "GetMakeField_Ljava_lang_Class_Handler")]
		public virtual unsafe global::Net.Optifine.Reflect.ReflectorField? MakeField (global::Java.Lang.Class? type)
		{
			const string __id = "makeField.(Ljava/lang/Class;)Lnet/optifine/reflect/ReflectorField;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((type == null) ? IntPtr.Zero : ((global::Java.Lang.Object) type).Handle);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Lang.Object.GetObject<global::Net.Optifine.Reflect.ReflectorField> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				global::System.GC.KeepAlive (type);
			}
		}

		static Delegate? cb_makeField_Ljava_lang_String_;
#pragma warning disable 0169
		static Delegate GetMakeField_Ljava_lang_String_Handler ()
		{
			if (cb_makeField_Ljava_lang_String_ == null)
				cb_makeField_Ljava_lang_String_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_L (n_MakeField_Ljava_lang_String_));
			return cb_makeField_Ljava_lang_String_;
		}

		static IntPtr n_MakeField_Ljava_lang_String_ (IntPtr jnienv, IntPtr native__this, IntPtr native_name)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Reflect.ReflectorClass> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var name = JNIEnv.GetString (native_name, JniHandleOwnership.DoNotTransfer);
			IntPtr __ret = JNIEnv.ToLocalJniHandle (__this.MakeField (name));
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorClass']/method[@name='makeField' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("makeField", "(Ljava/lang/String;)Lnet/optifine/reflect/ReflectorField;", "GetMakeField_Ljava_lang_String_Handler")]
		public virtual unsafe global::Net.Optifine.Reflect.ReflectorField? MakeField (string? name)
		{
			const string __id = "makeField.(Ljava/lang/String;)Lnet/optifine/reflect/ReflectorField;";
			IntPtr native_name = JNIEnv.NewString ((string?)name);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_name);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Lang.Object.GetObject<global::Net.Optifine.Reflect.ReflectorField> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_name);
			}
		}

		static Delegate? cb_makeField_Lnet_optifine_reflect_IFieldLocator_;
#pragma warning disable 0169
		static Delegate GetMakeField_Lnet_optifine_reflect_IFieldLocator_Handler ()
		{
			if (cb_makeField_Lnet_optifine_reflect_IFieldLocator_ == null)
				cb_makeField_Lnet_optifine_reflect_IFieldLocator_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_L (n_MakeField_Lnet_optifine_reflect_IFieldLocator_));
			return cb_makeField_Lnet_optifine_reflect_IFieldLocator_;
		}

		static IntPtr n_MakeField_Lnet_optifine_reflect_IFieldLocator_ (IntPtr jnienv, IntPtr native__this, IntPtr native_loc)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Reflect.ReflectorClass> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var loc = (global::Net.Optifine.Reflect.IFieldLocator?)global::Java.Lang.Object.GetObject<global::Net.Optifine.Reflect.IFieldLocator> (native_loc, JniHandleOwnership.DoNotTransfer);
			IntPtr __ret = JNIEnv.ToLocalJniHandle (__this.MakeField (loc));
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorClass']/method[@name='makeField' and count(parameter)=1 and parameter[1][@type='net.optifine.reflect.IFieldLocator']]"
		[Register ("makeField", "(Lnet/optifine/reflect/IFieldLocator;)Lnet/optifine/reflect/ReflectorField;", "GetMakeField_Lnet_optifine_reflect_IFieldLocator_Handler")]
		public virtual unsafe global::Net.Optifine.Reflect.ReflectorField? MakeField (global::Net.Optifine.Reflect.IFieldLocator? loc)
		{
			const string __id = "makeField.(Lnet/optifine/reflect/IFieldLocator;)Lnet/optifine/reflect/ReflectorField;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((loc == null) ? IntPtr.Zero : ((global::Java.Lang.Object) loc).Handle);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Lang.Object.GetObject<global::Net.Optifine.Reflect.ReflectorField> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				global::System.GC.KeepAlive (loc);
			}
		}

		static Delegate? cb_makeFieldTypes_Ljava_lang_Class_Ljava_lang_Class_Ljava_lang_Class_Ljava_lang_String_;
#pragma warning disable 0169
		static Delegate GetMakeFieldTypes_Ljava_lang_Class_Ljava_lang_Class_Ljava_lang_Class_Ljava_lang_String_Handler ()
		{
			if (cb_makeFieldTypes_Ljava_lang_Class_Ljava_lang_Class_Ljava_lang_Class_Ljava_lang_String_ == null)
				cb_makeFieldTypes_Ljava_lang_Class_Ljava_lang_Class_Ljava_lang_Class_Ljava_lang_String_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPLLLL_L (n_MakeFieldTypes_Ljava_lang_Class_Ljava_lang_Class_Ljava_lang_Class_Ljava_lang_String_));
			return cb_makeFieldTypes_Ljava_lang_Class_Ljava_lang_Class_Ljava_lang_Class_Ljava_lang_String_;
		}

		static IntPtr n_MakeFieldTypes_Ljava_lang_Class_Ljava_lang_Class_Ljava_lang_Class_Ljava_lang_String_ (IntPtr jnienv, IntPtr native__this, IntPtr native_preType, IntPtr native_type, IntPtr native_postTypes, IntPtr native_errorName)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Reflect.ReflectorClass> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var preType = global::Java.Lang.Object.GetObject<global::Java.Lang.Class> (native_preType, JniHandleOwnership.DoNotTransfer);
			var type = global::Java.Lang.Object.GetObject<global::Java.Lang.Class> (native_type, JniHandleOwnership.DoNotTransfer);
			var postTypes = global::Java.Lang.Object.GetObject<global::Java.Lang.Class> (native_postTypes, JniHandleOwnership.DoNotTransfer);
			var errorName = JNIEnv.GetString (native_errorName, JniHandleOwnership.DoNotTransfer);
			IntPtr __ret = JNIEnv.ToLocalJniHandle (__this.MakeFieldTypes (preType, type, postTypes, errorName));
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorClass']/method[@name='makeFieldTypes' and count(parameter)=4 and parameter[1][@type='java.lang.Class'] and parameter[2][@type='java.lang.Class'] and parameter[3][@type='java.lang.Class'] and parameter[4][@type='java.lang.String']]"
		[Register ("makeFieldTypes", "(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Lnet/optifine/reflect/ReflectorField;", "GetMakeFieldTypes_Ljava_lang_Class_Ljava_lang_Class_Ljava_lang_Class_Ljava_lang_String_Handler")]
		public virtual unsafe global::Net.Optifine.Reflect.ReflectorField? MakeFieldTypes (global::Java.Lang.Class? preType, global::Java.Lang.Class? type, global::Java.Lang.Class? postTypes, string? errorName)
		{
			const string __id = "makeFieldTypes.(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Lnet/optifine/reflect/ReflectorField;";
			IntPtr native_errorName = JNIEnv.NewString ((string?)errorName);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue ((preType == null) ? IntPtr.Zero : ((global::Java.Lang.Object) preType).Handle);
				__args [1] = new JniArgumentValue ((type == null) ? IntPtr.Zero : ((global::Java.Lang.Object) type).Handle);
				__args [2] = new JniArgumentValue ((postTypes == null) ? IntPtr.Zero : ((global::Java.Lang.Object) postTypes).Handle);
				__args [3] = new JniArgumentValue (native_errorName);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Lang.Object.GetObject<global::Net.Optifine.Reflect.ReflectorField> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_errorName);
				global::System.GC.KeepAlive (preType);
				global::System.GC.KeepAlive (type);
				global::System.GC.KeepAlive (postTypes);
			}
		}

		static Delegate? cb_makeMethod_Ljava_lang_String_;
#pragma warning disable 0169
		static Delegate GetMakeMethod_Ljava_lang_String_Handler ()
		{
			if (cb_makeMethod_Ljava_lang_String_ == null)
				cb_makeMethod_Ljava_lang_String_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_L (n_MakeMethod_Ljava_lang_String_));
			return cb_makeMethod_Ljava_lang_String_;
		}

		static IntPtr n_MakeMethod_Ljava_lang_String_ (IntPtr jnienv, IntPtr native__this, IntPtr native_name)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Reflect.ReflectorClass> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var name = JNIEnv.GetString (native_name, JniHandleOwnership.DoNotTransfer);
			IntPtr __ret = JNIEnv.ToLocalJniHandle (__this.MakeMethod (name));
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorClass']/method[@name='makeMethod' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("makeMethod", "(Ljava/lang/String;)Lnet/optifine/reflect/ReflectorMethod;", "GetMakeMethod_Ljava_lang_String_Handler")]
		public virtual unsafe global::Net.Optifine.Reflect.ReflectorMethod? MakeMethod (string? name)
		{
			const string __id = "makeMethod.(Ljava/lang/String;)Lnet/optifine/reflect/ReflectorMethod;";
			IntPtr native_name = JNIEnv.NewString ((string?)name);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_name);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Lang.Object.GetObject<global::Net.Optifine.Reflect.ReflectorMethod> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_name);
			}
		}

		static Delegate? cb_makeMethod_Ljava_lang_String_arrayLjava_lang_Class_;
#pragma warning disable 0169
		static Delegate GetMakeMethod_Ljava_lang_String_arrayLjava_lang_Class_Handler ()
		{
			if (cb_makeMethod_Ljava_lang_String_arrayLjava_lang_Class_ == null)
				cb_makeMethod_Ljava_lang_String_arrayLjava_lang_Class_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPLL_L (n_MakeMethod_Ljava_lang_String_arrayLjava_lang_Class_));
			return cb_makeMethod_Ljava_lang_String_arrayLjava_lang_Class_;
		}

		static IntPtr n_MakeMethod_Ljava_lang_String_arrayLjava_lang_Class_ (IntPtr jnienv, IntPtr native__this, IntPtr native_name, IntPtr native_paramTypes)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Reflect.ReflectorClass> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var name = JNIEnv.GetString (native_name, JniHandleOwnership.DoNotTransfer);
			var paramTypes = (global::Java.Lang.Class[]?) JNIEnv.GetArray (native_paramTypes, JniHandleOwnership.DoNotTransfer, typeof (global::Java.Lang.Class));
			IntPtr __ret = JNIEnv.ToLocalJniHandle (__this.MakeMethod (name, paramTypes));
			if (paramTypes != null)
				JNIEnv.CopyArray (paramTypes, native_paramTypes);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorClass']/method[@name='makeMethod' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.Class[]']]"
		[Register ("makeMethod", "(Ljava/lang/String;[Ljava/lang/Class;)Lnet/optifine/reflect/ReflectorMethod;", "GetMakeMethod_Ljava_lang_String_arrayLjava_lang_Class_Handler")]
		public virtual unsafe global::Net.Optifine.Reflect.ReflectorMethod? MakeMethod (string? name, global::Java.Lang.Class[]? paramTypes)
		{
			const string __id = "makeMethod.(Ljava/lang/String;[Ljava/lang/Class;)Lnet/optifine/reflect/ReflectorMethod;";
			IntPtr native_name = JNIEnv.NewString ((string?)name);
			IntPtr native_paramTypes = JNIEnv.NewArray (paramTypes);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_name);
				__args [1] = new JniArgumentValue (native_paramTypes);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Lang.Object.GetObject<global::Net.Optifine.Reflect.ReflectorMethod> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_name);
				if (paramTypes != null) {
					JNIEnv.CopyArray (native_paramTypes, paramTypes);
					JNIEnv.DeleteLocalRef (native_paramTypes);
				}
				global::System.GC.KeepAlive (paramTypes);
			}
		}

		static Delegate? cb_resolve;
#pragma warning disable 0169
		static Delegate GetResolveHandler ()
		{
			if (cb_resolve == null)
				cb_resolve = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_V (n_Resolve));
			return cb_resolve;
		}

		static void n_Resolve (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Reflect.ReflectorClass> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			__this.Resolve ();
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorClass']/method[@name='resolve' and count(parameter)=0]"
		[Register ("resolve", "()V", "GetResolveHandler")]
		public virtual unsafe void Resolve ()
		{
			const string __id = "resolve.()V";
			try {
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, null);
			} finally {
			}
		}

	}
}
