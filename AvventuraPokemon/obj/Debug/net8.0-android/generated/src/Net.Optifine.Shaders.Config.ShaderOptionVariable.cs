//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Net.Optifine.Shaders.Config {

	// Metadata.xml XPath class reference: path="/api/package[@name='net.optifine.shaders.config']/class[@name='ShaderOptionVariable']"
	[global::Android.Runtime.Register ("net/optifine/shaders/config/ShaderOptionVariable", DoNotGenerateAcw=true)]
	public partial class ShaderOptionVariable : global::Net.Optifine.Shaders.Config.ShaderOption {
		static readonly JniPeerMembers _members = new XAPeerMembers ("net/optifine/shaders/config/ShaderOptionVariable", typeof (ShaderOptionVariable));

		internal static new IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected ShaderOptionVariable (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='net.optifine.shaders.config']/class[@name='ShaderOptionVariable']/constructor[@name='ShaderOptionVariable' and count(parameter)=5 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='java.lang.String'] and parameter[4][@type='java.lang.String[]'] and parameter[5][@type='java.lang.String']]"
		[Register (".ctor", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V", "")]
		public unsafe ShaderOptionVariable (string? name, string? description, string? value, string[]? values, string? path) : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			IntPtr native_name = JNIEnv.NewString ((string?)name);
			IntPtr native_description = JNIEnv.NewString ((string?)description);
			IntPtr native_value = JNIEnv.NewString ((string?)value);
			IntPtr native_values = JNIEnv.NewArray (values);
			IntPtr native_path = JNIEnv.NewString ((string?)path);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [5];
				__args [0] = new JniArgumentValue (native_name);
				__args [1] = new JniArgumentValue (native_description);
				__args [2] = new JniArgumentValue (native_value);
				__args [3] = new JniArgumentValue (native_values);
				__args [4] = new JniArgumentValue (native_path);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_name);
				JNIEnv.DeleteLocalRef (native_description);
				JNIEnv.DeleteLocalRef (native_value);
				if (values != null) {
					JNIEnv.CopyArray (native_values, values);
					JNIEnv.DeleteLocalRef (native_values);
				}
				JNIEnv.DeleteLocalRef (native_path);
				global::System.GC.KeepAlive (values);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.shaders.config']/class[@name='ShaderOptionVariable']/method[@name='parseOption' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String']]"
		[Register ("parseOption", "(Ljava/lang/String;Ljava/lang/String;)Lnet/optifine/shaders/config/ShaderOption;", "")]
		public static unsafe global::Net.Optifine.Shaders.Config.ShaderOption? ParseOption (string? line, string? path)
		{
			const string __id = "parseOption.(Ljava/lang/String;Ljava/lang/String;)Lnet/optifine/shaders/config/ShaderOption;";
			IntPtr native_line = JNIEnv.NewString ((string?)line);
			IntPtr native_path = JNIEnv.NewString ((string?)path);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_line);
				__args [1] = new JniArgumentValue (native_path);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Lang.Object.GetObject<global::Net.Optifine.Shaders.Config.ShaderOption> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_line);
				JNIEnv.DeleteLocalRef (native_path);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.shaders.config']/class[@name='ShaderOptionVariable']/method[@name='parseValues' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String']]"
		[Register ("parseValues", "(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;", "")]
		public static unsafe string[]? ParseValues (string? value, string? valuesStr)
		{
			const string __id = "parseValues.(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;";
			IntPtr native_value = JNIEnv.NewString ((string?)value);
			IntPtr native_valuesStr = JNIEnv.NewString ((string?)valuesStr);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_value);
				__args [1] = new JniArgumentValue (native_valuesStr);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (string[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (string));
			} finally {
				JNIEnv.DeleteLocalRef (native_value);
				JNIEnv.DeleteLocalRef (native_valuesStr);
			}
		}

	}
}
