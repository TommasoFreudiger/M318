//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Optifine {

	// Metadata.xml XPath class reference: path="/api/package[@name='optifine']/class[@name='Patcher']"
	[global::Android.Runtime.Register ("optifine/Patcher", DoNotGenerateAcw=true)]
	public partial class Patcher : global::Java.Lang.Object {
		// Metadata.xml XPath field reference: path="/api/package[@name='optifine']/class[@name='Patcher']/field[@name='CONFIG_FILE']"
		[Register ("CONFIG_FILE")]
		public const string ConfigFile = (string) "patch.cfg";

		// Metadata.xml XPath field reference: path="/api/package[@name='optifine']/class[@name='Patcher']/field[@name='CONFIG_FILE2']"
		[Register ("CONFIG_FILE2")]
		public const string ConfigFile2 = (string) "patch2.cfg";

		// Metadata.xml XPath field reference: path="/api/package[@name='optifine']/class[@name='Patcher']/field[@name='CONFIG_FILE3']"
		[Register ("CONFIG_FILE3")]
		public const string ConfigFile3 = (string) "patch3.cfg";

		// Metadata.xml XPath field reference: path="/api/package[@name='optifine']/class[@name='Patcher']/field[@name='PREFIX_PATCH']"
		[Register ("PREFIX_PATCH")]
		public const string PrefixPatch = (string) "patch/";

		// Metadata.xml XPath field reference: path="/api/package[@name='optifine']/class[@name='Patcher']/field[@name='SUFFIX_DELTA']"
		[Register ("SUFFIX_DELTA")]
		public const string SuffixDelta = (string) ".xdelta";

		// Metadata.xml XPath field reference: path="/api/package[@name='optifine']/class[@name='Patcher']/field[@name='SUFFIX_MD5']"
		[Register ("SUFFIX_MD5")]
		public const string SuffixMd5 = (string) ".md5";

		static readonly JniPeerMembers _members = new XAPeerMembers ("optifine/Patcher", typeof (Patcher));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected Patcher (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='optifine']/class[@name='Patcher']/constructor[@name='Patcher' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe Patcher () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='Patcher']/method[@name='applyPatch' and count(parameter)=5 and parameter[1][@type='java.lang.String'] and parameter[2][@type='byte[]'] and parameter[3][@type='java.util.regex.Pattern[]'] and parameter[4][@type='java.util.Map&lt;java.lang.String, java.lang.String&gt;'] and parameter[5][@type='optifine.IResourceProvider']]"
		[Register ("applyPatch", "(Ljava/lang/String;[B[Ljava/util/regex/Pattern;Ljava/util/Map;Loptifine/IResourceProvider;)[B", "")]
		public static unsafe byte[]? ApplyPatch (string? name, byte[]? bytesDiff, global::Java.Util.Regex.Pattern[]? patterns, global::System.Collections.Generic.IDictionary<string, string>? cfgMap, global::Optifine.IResourceProvider? resourceProvider)
		{
			const string __id = "applyPatch.(Ljava/lang/String;[B[Ljava/util/regex/Pattern;Ljava/util/Map;Loptifine/IResourceProvider;)[B";
			IntPtr native_name = JNIEnv.NewString ((string?)name);
			IntPtr native_bytesDiff = JNIEnv.NewArray (bytesDiff);
			IntPtr native_patterns = JNIEnv.NewArray (patterns);
			IntPtr native_cfgMap = global::Android.Runtime.JavaDictionary<string, string>.ToLocalJniHandle (cfgMap);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [5];
				__args [0] = new JniArgumentValue (native_name);
				__args [1] = new JniArgumentValue (native_bytesDiff);
				__args [2] = new JniArgumentValue (native_patterns);
				__args [3] = new JniArgumentValue (native_cfgMap);
				__args [4] = new JniArgumentValue ((resourceProvider == null) ? IntPtr.Zero : ((global::Java.Lang.Object) resourceProvider).Handle);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
				JNIEnv.DeleteLocalRef (native_name);
				if (bytesDiff != null) {
					JNIEnv.CopyArray (native_bytesDiff, bytesDiff);
					JNIEnv.DeleteLocalRef (native_bytesDiff);
				}
				if (patterns != null) {
					JNIEnv.CopyArray (native_patterns, patterns);
					JNIEnv.DeleteLocalRef (native_patterns);
				}
				JNIEnv.DeleteLocalRef (native_cfgMap);
				global::System.GC.KeepAlive (bytesDiff);
				global::System.GC.KeepAlive (patterns);
				global::System.GC.KeepAlive (cfgMap);
				global::System.GC.KeepAlive (resourceProvider);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='Patcher']/method[@name='getConfigurationMap' and count(parameter)=1 and parameter[1][@type='java.util.zip.ZipFile']]"
		[Register ("getConfigurationMap", "(Ljava/util/zip/ZipFile;)Ljava/util/Map;", "")]
		public static unsafe global::System.Collections.Generic.IDictionary<string, string>? GetConfigurationMap (global::Java.Util.Zip.ZipFile? modZip)
		{
			const string __id = "getConfigurationMap.(Ljava/util/zip/ZipFile;)Ljava/util/Map;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((modZip == null) ? IntPtr.Zero : ((global::Java.Lang.Object) modZip).Handle);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Android.Runtime.JavaDictionary<string, string>.FromJniHandle (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				global::System.GC.KeepAlive (modZip);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='Patcher']/method[@name='getConfigurationMap' and count(parameter)=2 and parameter[1][@type='java.util.zip.ZipFile'] and parameter[2][@type='java.lang.String']]"
		[Register ("getConfigurationMap", "(Ljava/util/zip/ZipFile;Ljava/lang/String;)Ljava/util/Map;", "")]
		public static unsafe global::System.Collections.Generic.IDictionary<string, string>? GetConfigurationMap (global::Java.Util.Zip.ZipFile? modZip, string? pathConfig)
		{
			const string __id = "getConfigurationMap.(Ljava/util/zip/ZipFile;Ljava/lang/String;)Ljava/util/Map;";
			IntPtr native_pathConfig = JNIEnv.NewString ((string?)pathConfig);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((modZip == null) ? IntPtr.Zero : ((global::Java.Lang.Object) modZip).Handle);
				__args [1] = new JniArgumentValue (native_pathConfig);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Android.Runtime.JavaDictionary<string, string>.FromJniHandle (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_pathConfig);
				global::System.GC.KeepAlive (modZip);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='Patcher']/method[@name='getConfigurationPatterns' and count(parameter)=1 and parameter[1][@type='java.util.Map&lt;java.lang.String, java.lang.String&gt;']]"
		[Register ("getConfigurationPatterns", "(Ljava/util/Map;)[Ljava/util/regex/Pattern;", "")]
		public static unsafe global::Java.Util.Regex.Pattern[]? GetConfigurationPatterns (global::System.Collections.Generic.IDictionary<string, string>? cfgMap)
		{
			const string __id = "getConfigurationPatterns.(Ljava/util/Map;)[Ljava/util/regex/Pattern;";
			IntPtr native_cfgMap = global::Android.Runtime.JavaDictionary<string, string>.ToLocalJniHandle (cfgMap);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_cfgMap);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (global::Java.Util.Regex.Pattern[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (global::Java.Util.Regex.Pattern));
			} finally {
				JNIEnv.DeleteLocalRef (native_cfgMap);
				global::System.GC.KeepAlive (cfgMap);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='Patcher']/method[@name='getPatchBase' and count(parameter)=3 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.util.regex.Pattern[]'] and parameter[3][@type='java.util.Map&lt;java.lang.String, java.lang.String&gt;']]"
		[Register ("getPatchBase", "(Ljava/lang/String;[Ljava/util/regex/Pattern;Ljava/util/Map;)Ljava/lang/String;", "")]
		public static unsafe string? GetPatchBase (string? name, global::Java.Util.Regex.Pattern[]? patterns, global::System.Collections.Generic.IDictionary<string, string>? cfgMap)
		{
			const string __id = "getPatchBase.(Ljava/lang/String;[Ljava/util/regex/Pattern;Ljava/util/Map;)Ljava/lang/String;";
			IntPtr native_name = JNIEnv.NewString ((string?)name);
			IntPtr native_patterns = JNIEnv.NewArray (patterns);
			IntPtr native_cfgMap = global::Android.Runtime.JavaDictionary<string, string>.ToLocalJniHandle (cfgMap);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_name);
				__args [1] = new JniArgumentValue (native_patterns);
				__args [2] = new JniArgumentValue (native_cfgMap);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_name);
				if (patterns != null) {
					JNIEnv.CopyArray (native_patterns, patterns);
					JNIEnv.DeleteLocalRef (native_patterns);
				}
				JNIEnv.DeleteLocalRef (native_cfgMap);
				global::System.GC.KeepAlive (patterns);
				global::System.GC.KeepAlive (cfgMap);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='Patcher']/method[@name='main' and count(parameter)=1 and parameter[1][@type='java.lang.String[]']]"
		[Register ("main", "([Ljava/lang/String;)V", "")]
		public static unsafe void Main (string[]? args)
		{
			const string __id = "main.([Ljava/lang/String;)V";
			IntPtr native_args = JNIEnv.NewArray (args);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_args);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (args != null) {
					JNIEnv.CopyArray (native_args, args);
					JNIEnv.DeleteLocalRef (native_args);
				}
				global::System.GC.KeepAlive (args);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='Patcher']/method[@name='process' and count(parameter)=3 and parameter[1][@type='java.io.File'] and parameter[2][@type='java.io.File'] and parameter[3][@type='java.io.File']]"
		[Register ("process", "(Ljava/io/File;Ljava/io/File;Ljava/io/File;)V", "")]
		public static unsafe void Process (global::Java.IO.File? baseFile, global::Java.IO.File? diffFile, global::Java.IO.File? modFile)
		{
			const string __id = "process.(Ljava/io/File;Ljava/io/File;Ljava/io/File;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue ((baseFile == null) ? IntPtr.Zero : ((global::Java.Lang.Object) baseFile).Handle);
				__args [1] = new JniArgumentValue ((diffFile == null) ? IntPtr.Zero : ((global::Java.Lang.Object) diffFile).Handle);
				__args [2] = new JniArgumentValue ((modFile == null) ? IntPtr.Zero : ((global::Java.Lang.Object) modFile).Handle);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				global::System.GC.KeepAlive (baseFile);
				global::System.GC.KeepAlive (diffFile);
				global::System.GC.KeepAlive (modFile);
			}
		}

	}
}
