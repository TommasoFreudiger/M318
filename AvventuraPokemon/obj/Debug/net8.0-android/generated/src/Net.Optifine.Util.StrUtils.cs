//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Net.Optifine.Util {

	// Metadata.xml XPath class reference: path="/api/package[@name='net.optifine.util']/class[@name='StrUtils']"
	[global::Android.Runtime.Register ("net/optifine/util/StrUtils", DoNotGenerateAcw=true)]
	public partial class StrUtils : global::Java.Lang.Object {
		static readonly JniPeerMembers _members = new XAPeerMembers ("net/optifine/util/StrUtils", typeof (StrUtils));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected StrUtils (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='net.optifine.util']/class[@name='StrUtils']/constructor[@name='StrUtils' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe StrUtils () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='StrUtils']/method[@name='addIfNotContains' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String']]"
		[Register ("addIfNotContains", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? AddIfNotContains (string? target, string? source)
		{
			const string __id = "addIfNotContains.(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native_target = JNIEnv.NewString ((string?)target);
			IntPtr native_source = JNIEnv.NewString ((string?)source);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_target);
				__args [1] = new JniArgumentValue (native_source);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_target);
				JNIEnv.DeleteLocalRef (native_source);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='StrUtils']/method[@name='addPrefixCheck' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String']]"
		[Register ("addPrefixCheck", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? AddPrefixCheck (string? str, string? prefix)
		{
			const string __id = "addPrefixCheck.(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			IntPtr native_prefix = JNIEnv.NewString ((string?)prefix);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_str);
				__args [1] = new JniArgumentValue (native_prefix);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
				JNIEnv.DeleteLocalRef (native_prefix);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='StrUtils']/method[@name='addSuffixCheck' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String']]"
		[Register ("addSuffixCheck", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? AddSuffixCheck (string? str, string? suffix)
		{
			const string __id = "addSuffixCheck.(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			IntPtr native_suffix = JNIEnv.NewString ((string?)suffix);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_str);
				__args [1] = new JniArgumentValue (native_suffix);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
				JNIEnv.DeleteLocalRef (native_suffix);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='StrUtils']/method[@name='endsWith' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String[]']]"
		[Register ("endsWith", "(Ljava/lang/String;[Ljava/lang/String;)Z", "")]
		public static unsafe bool EndsWith (string? str, string[]? suffixes)
		{
			const string __id = "endsWith.(Ljava/lang/String;[Ljava/lang/String;)Z";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			IntPtr native_suffixes = JNIEnv.NewArray (suffixes);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_str);
				__args [1] = new JniArgumentValue (native_suffixes);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
				if (suffixes != null) {
					JNIEnv.CopyArray (native_suffixes, suffixes);
					JNIEnv.DeleteLocalRef (native_suffixes);
				}
				global::System.GC.KeepAlive (suffixes);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='StrUtils']/method[@name='endsWithDigit' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("endsWithDigit", "(Ljava/lang/String;)Z", "")]
		public static unsafe bool EndsWithDigit (string? str)
		{
			const string __id = "endsWithDigit.(Ljava/lang/String;)Z";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_str);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='StrUtils']/method[@name='equals' and count(parameter)=2 and parameter[1][@type='java.lang.Object'] and parameter[2][@type='java.lang.Object']]"
		[Register ("equals", "(Ljava/lang/Object;Ljava/lang/Object;)Z", "")]
		public static unsafe bool Equals (global::Java.Lang.Object? a, global::Java.Lang.Object? b)
		{
			const string __id = "equals.(Ljava/lang/Object;Ljava/lang/Object;)Z";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((a == null) ? IntPtr.Zero : ((global::Java.Lang.Object) a).Handle);
				__args [1] = new JniArgumentValue ((b == null) ? IntPtr.Zero : ((global::Java.Lang.Object) b).Handle);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (a);
				global::System.GC.KeepAlive (b);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='StrUtils']/method[@name='equalsMask' and count(parameter)=3 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='char']]"
		[Register ("equalsMask", "(Ljava/lang/String;Ljava/lang/String;C)Z", "")]
		public static unsafe bool EqualsMask (string? str, string? mask, char wildChar)
		{
			const string __id = "equalsMask.(Ljava/lang/String;Ljava/lang/String;C)Z";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			IntPtr native_mask = JNIEnv.NewString ((string?)mask);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_str);
				__args [1] = new JniArgumentValue (native_mask);
				__args [2] = new JniArgumentValue (wildChar);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
				JNIEnv.DeleteLocalRef (native_mask);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='StrUtils']/method[@name='equalsMask' and count(parameter)=4 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='char'] and parameter[4][@type='char']]"
		[Register ("equalsMask", "(Ljava/lang/String;Ljava/lang/String;CC)Z", "")]
		public static unsafe bool EqualsMask (string? str, string? mask, char wildChar, char wildCharSingle)
		{
			const string __id = "equalsMask.(Ljava/lang/String;Ljava/lang/String;CC)Z";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			IntPtr native_mask = JNIEnv.NewString ((string?)mask);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (native_str);
				__args [1] = new JniArgumentValue (native_mask);
				__args [2] = new JniArgumentValue (wildChar);
				__args [3] = new JniArgumentValue (wildCharSingle);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
				JNIEnv.DeleteLocalRef (native_mask);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='StrUtils']/method[@name='equalsMask' and count(parameter)=3 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String[]'] and parameter[3][@type='char']]"
		[Register ("equalsMask", "(Ljava/lang/String;[Ljava/lang/String;C)Z", "")]
		public static unsafe bool EqualsMask (string? str, string[]? masks, char wildChar)
		{
			const string __id = "equalsMask.(Ljava/lang/String;[Ljava/lang/String;C)Z";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			IntPtr native_masks = JNIEnv.NewArray (masks);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_str);
				__args [1] = new JniArgumentValue (native_masks);
				__args [2] = new JniArgumentValue (wildChar);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
				if (masks != null) {
					JNIEnv.CopyArray (native_masks, masks);
					JNIEnv.DeleteLocalRef (native_masks);
				}
				global::System.GC.KeepAlive (masks);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='StrUtils']/method[@name='equalsTrim' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String']]"
		[Register ("equalsTrim", "(Ljava/lang/String;Ljava/lang/String;)Z", "")]
		public static unsafe bool EqualsTrim (string? a, string? b)
		{
			const string __id = "equalsTrim.(Ljava/lang/String;Ljava/lang/String;)Z";
			IntPtr native_a = JNIEnv.NewString ((string?)a);
			IntPtr native_b = JNIEnv.NewString ((string?)b);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_a);
				__args [1] = new JniArgumentValue (native_b);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_a);
				JNIEnv.DeleteLocalRef (native_b);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='StrUtils']/method[@name='fillLeft' and count(parameter)=3 and parameter[1][@type='java.lang.String'] and parameter[2][@type='int'] and parameter[3][@type='char']]"
		[Register ("fillLeft", "(Ljava/lang/String;IC)Ljava/lang/String;", "")]
		public static unsafe string? FillLeft (string? s, int len, char fillChar)
		{
			const string __id = "fillLeft.(Ljava/lang/String;IC)Ljava/lang/String;";
			IntPtr native_s = JNIEnv.NewString ((string?)s);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_s);
				__args [1] = new JniArgumentValue (len);
				__args [2] = new JniArgumentValue (fillChar);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_s);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='StrUtils']/method[@name='fillRight' and count(parameter)=3 and parameter[1][@type='java.lang.String'] and parameter[2][@type='int'] and parameter[3][@type='char']]"
		[Register ("fillRight", "(Ljava/lang/String;IC)Ljava/lang/String;", "")]
		public static unsafe string? FillRight (string? s, int len, char fillChar)
		{
			const string __id = "fillRight.(Ljava/lang/String;IC)Ljava/lang/String;";
			IntPtr native_s = JNIEnv.NewString ((string?)s);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_s);
				__args [1] = new JniArgumentValue (len);
				__args [2] = new JniArgumentValue (fillChar);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_s);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='StrUtils']/method[@name='findPrefix' and count(parameter)=2 and parameter[1][@type='java.lang.String[]'] and parameter[2][@type='java.lang.String']]"
		[Register ("findPrefix", "([Ljava/lang/String;Ljava/lang/String;)I", "")]
		public static unsafe int FindPrefix (string[]? strs, string? prefix)
		{
			const string __id = "findPrefix.([Ljava/lang/String;Ljava/lang/String;)I";
			IntPtr native_strs = JNIEnv.NewArray (strs);
			IntPtr native_prefix = JNIEnv.NewString ((string?)prefix);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_strs);
				__args [1] = new JniArgumentValue (native_prefix);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (strs != null) {
					JNIEnv.CopyArray (native_strs, strs);
					JNIEnv.DeleteLocalRef (native_strs);
				}
				JNIEnv.DeleteLocalRef (native_prefix);
				global::System.GC.KeepAlive (strs);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='StrUtils']/method[@name='findSuffix' and count(parameter)=2 and parameter[1][@type='java.lang.String[]'] and parameter[2][@type='java.lang.String']]"
		[Register ("findSuffix", "([Ljava/lang/String;Ljava/lang/String;)I", "")]
		public static unsafe int FindSuffix (string[]? strs, string? suffix)
		{
			const string __id = "findSuffix.([Ljava/lang/String;Ljava/lang/String;)I";
			IntPtr native_strs = JNIEnv.NewArray (strs);
			IntPtr native_suffix = JNIEnv.NewString ((string?)suffix);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_strs);
				__args [1] = new JniArgumentValue (native_suffix);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (strs != null) {
					JNIEnv.CopyArray (native_strs, strs);
					JNIEnv.DeleteLocalRef (native_strs);
				}
				JNIEnv.DeleteLocalRef (native_suffix);
				global::System.GC.KeepAlive (strs);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='StrUtils']/method[@name='getSegment' and count(parameter)=3 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='java.lang.String']]"
		[Register ("getSegment", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? GetSegment (string? str, string? start, string? end)
		{
			const string __id = "getSegment.(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			IntPtr native_start = JNIEnv.NewString ((string?)start);
			IntPtr native_end = JNIEnv.NewString ((string?)end);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_str);
				__args [1] = new JniArgumentValue (native_start);
				__args [2] = new JniArgumentValue (native_end);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
				JNIEnv.DeleteLocalRef (native_start);
				JNIEnv.DeleteLocalRef (native_end);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='StrUtils']/method[@name='isEmpty' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("isEmpty", "(Ljava/lang/String;)Z", "")]
		public static unsafe bool IsEmpty (string? @string)
		{
			const string __id = "isEmpty.(Ljava/lang/String;)Z";
			IntPtr native__string = JNIEnv.NewString ((string?)@string);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native__string);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native__string);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='StrUtils']/method[@name='isFilled' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("isFilled", "(Ljava/lang/String;)Z", "")]
		public static unsafe bool IsFilled (string? @string)
		{
			const string __id = "isFilled.(Ljava/lang/String;)Z";
			IntPtr native__string = JNIEnv.NewString ((string?)@string);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native__string);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native__string);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='StrUtils']/method[@name='parseInt' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='int']]"
		[Register ("parseInt", "(Ljava/lang/String;I)I", "")]
		public static unsafe int ParseInt (string? s, int defVal)
		{
			const string __id = "parseInt.(Ljava/lang/String;I)I";
			IntPtr native_s = JNIEnv.NewString ((string?)s);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_s);
				__args [1] = new JniArgumentValue (defVal);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_s);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='StrUtils']/method[@name='remove' and count(parameter)=3 and parameter[1][@type='java.lang.String[]'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		[Register ("remove", "([Ljava/lang/String;II)[Ljava/lang/String;", "")]
		public static unsafe string[]? Remove (string[]? strs, int start, int end)
		{
			const string __id = "remove.([Ljava/lang/String;II)[Ljava/lang/String;";
			IntPtr native_strs = JNIEnv.NewArray (strs);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_strs);
				__args [1] = new JniArgumentValue (start);
				__args [2] = new JniArgumentValue (end);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (string[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (string));
			} finally {
				if (strs != null) {
					JNIEnv.CopyArray (native_strs, strs);
					JNIEnv.DeleteLocalRef (native_strs);
				}
				global::System.GC.KeepAlive (strs);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='StrUtils']/method[@name='removePrefix' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String']]"
		[Register ("removePrefix", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? RemovePrefix (string? str, string? prefix)
		{
			const string __id = "removePrefix.(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			IntPtr native_prefix = JNIEnv.NewString ((string?)prefix);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_str);
				__args [1] = new JniArgumentValue (native_prefix);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
				JNIEnv.DeleteLocalRef (native_prefix);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='StrUtils']/method[@name='removePrefix' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String[]']]"
		[Register ("removePrefix", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? RemovePrefix (string? str, string[]? prefixes)
		{
			const string __id = "removePrefix.(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			IntPtr native_prefixes = JNIEnv.NewArray (prefixes);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_str);
				__args [1] = new JniArgumentValue (native_prefixes);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
				if (prefixes != null) {
					JNIEnv.CopyArray (native_prefixes, prefixes);
					JNIEnv.DeleteLocalRef (native_prefixes);
				}
				global::System.GC.KeepAlive (prefixes);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='StrUtils']/method[@name='removePrefixSuffix' and count(parameter)=3 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='java.lang.String']]"
		[Register ("removePrefixSuffix", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? RemovePrefixSuffix (string? str, string? prefix, string? suffix)
		{
			const string __id = "removePrefixSuffix.(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			IntPtr native_prefix = JNIEnv.NewString ((string?)prefix);
			IntPtr native_suffix = JNIEnv.NewString ((string?)suffix);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_str);
				__args [1] = new JniArgumentValue (native_prefix);
				__args [2] = new JniArgumentValue (native_suffix);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
				JNIEnv.DeleteLocalRef (native_prefix);
				JNIEnv.DeleteLocalRef (native_suffix);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='StrUtils']/method[@name='removePrefixSuffix' and count(parameter)=3 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String[]'] and parameter[3][@type='java.lang.String[]']]"
		[Register ("removePrefixSuffix", "(Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? RemovePrefixSuffix (string? str, string[]? prefixes, string[]? suffixes)
		{
			const string __id = "removePrefixSuffix.(Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			IntPtr native_prefixes = JNIEnv.NewArray (prefixes);
			IntPtr native_suffixes = JNIEnv.NewArray (suffixes);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_str);
				__args [1] = new JniArgumentValue (native_prefixes);
				__args [2] = new JniArgumentValue (native_suffixes);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
				if (prefixes != null) {
					JNIEnv.CopyArray (native_prefixes, prefixes);
					JNIEnv.DeleteLocalRef (native_prefixes);
				}
				if (suffixes != null) {
					JNIEnv.CopyArray (native_suffixes, suffixes);
					JNIEnv.DeleteLocalRef (native_suffixes);
				}
				global::System.GC.KeepAlive (prefixes);
				global::System.GC.KeepAlive (suffixes);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='StrUtils']/method[@name='removeSuffix' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String']]"
		[Register ("removeSuffix", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? RemoveSuffix (string? str, string? suffix)
		{
			const string __id = "removeSuffix.(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			IntPtr native_suffix = JNIEnv.NewString ((string?)suffix);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_str);
				__args [1] = new JniArgumentValue (native_suffix);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
				JNIEnv.DeleteLocalRef (native_suffix);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='StrUtils']/method[@name='removeSuffix' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String[]']]"
		[Register ("removeSuffix", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? RemoveSuffix (string? str, string[]? suffixes)
		{
			const string __id = "removeSuffix.(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			IntPtr native_suffixes = JNIEnv.NewArray (suffixes);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_str);
				__args [1] = new JniArgumentValue (native_suffixes);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
				if (suffixes != null) {
					JNIEnv.CopyArray (native_suffixes, suffixes);
					JNIEnv.DeleteLocalRef (native_suffixes);
				}
				global::System.GC.KeepAlive (suffixes);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='StrUtils']/method[@name='replaceChar' and count(parameter)=3 and parameter[1][@type='java.lang.String'] and parameter[2][@type='char'] and parameter[3][@type='char']]"
		[Register ("replaceChar", "(Ljava/lang/String;CC)Ljava/lang/String;", "")]
		public static unsafe string? ReplaceChar (string? s, char findChar, char substChar)
		{
			const string __id = "replaceChar.(Ljava/lang/String;CC)Ljava/lang/String;";
			IntPtr native_s = JNIEnv.NewString ((string?)s);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_s);
				__args [1] = new JniArgumentValue (findChar);
				__args [2] = new JniArgumentValue (substChar);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_s);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='StrUtils']/method[@name='replacePrefix' and count(parameter)=3 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='java.lang.String']]"
		[Register ("replacePrefix", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? ReplacePrefix (string? str, string? prefix, string? prefixNew)
		{
			const string __id = "replacePrefix.(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			IntPtr native_prefix = JNIEnv.NewString ((string?)prefix);
			IntPtr native_prefixNew = JNIEnv.NewString ((string?)prefixNew);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_str);
				__args [1] = new JniArgumentValue (native_prefix);
				__args [2] = new JniArgumentValue (native_prefixNew);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
				JNIEnv.DeleteLocalRef (native_prefix);
				JNIEnv.DeleteLocalRef (native_prefixNew);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='StrUtils']/method[@name='replaceString' and count(parameter)=3 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='java.lang.String']]"
		[Register ("replaceString", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? ReplaceString (string? str, string? findStr, string? substStr)
		{
			const string __id = "replaceString.(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			IntPtr native_findStr = JNIEnv.NewString ((string?)findStr);
			IntPtr native_substStr = JNIEnv.NewString ((string?)substStr);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_str);
				__args [1] = new JniArgumentValue (native_findStr);
				__args [2] = new JniArgumentValue (native_substStr);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
				JNIEnv.DeleteLocalRef (native_findStr);
				JNIEnv.DeleteLocalRef (native_substStr);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='StrUtils']/method[@name='replaceStrings' and count(parameter)=3 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String[]'] and parameter[3][@type='java.lang.String[]']]"
		[Register ("replaceStrings", "(Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? ReplaceStrings (string? str, string[]? findStrs, string[]? substStrs)
		{
			const string __id = "replaceStrings.(Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			IntPtr native_findStrs = JNIEnv.NewArray (findStrs);
			IntPtr native_substStrs = JNIEnv.NewArray (substStrs);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_str);
				__args [1] = new JniArgumentValue (native_findStrs);
				__args [2] = new JniArgumentValue (native_substStrs);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
				if (findStrs != null) {
					JNIEnv.CopyArray (native_findStrs, findStrs);
					JNIEnv.DeleteLocalRef (native_findStrs);
				}
				if (substStrs != null) {
					JNIEnv.CopyArray (native_substStrs, substStrs);
					JNIEnv.DeleteLocalRef (native_substStrs);
				}
				global::System.GC.KeepAlive (findStrs);
				global::System.GC.KeepAlive (substStrs);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='StrUtils']/method[@name='replaceSuffix' and count(parameter)=3 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='java.lang.String']]"
		[Register ("replaceSuffix", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? ReplaceSuffix (string? str, string? suffix, string? suffixNew)
		{
			const string __id = "replaceSuffix.(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			IntPtr native_suffix = JNIEnv.NewString ((string?)suffix);
			IntPtr native_suffixNew = JNIEnv.NewString ((string?)suffixNew);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_str);
				__args [1] = new JniArgumentValue (native_suffix);
				__args [2] = new JniArgumentValue (native_suffixNew);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
				JNIEnv.DeleteLocalRef (native_suffix);
				JNIEnv.DeleteLocalRef (native_suffixNew);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='StrUtils']/method[@name='split' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String']]"
		[Register ("split", "(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;", "")]
		public static unsafe string[]? Split (string? str, string? separators)
		{
			const string __id = "split.(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			IntPtr native_separators = JNIEnv.NewString ((string?)separators);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_str);
				__args [1] = new JniArgumentValue (native_separators);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (string[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (string));
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
				JNIEnv.DeleteLocalRef (native_separators);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='StrUtils']/method[@name='startsWith' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String[]']]"
		[Register ("startsWith", "(Ljava/lang/String;[Ljava/lang/String;)Z", "")]
		public static unsafe bool StartsWith (string? str, string[]? prefixes)
		{
			const string __id = "startsWith.(Ljava/lang/String;[Ljava/lang/String;)Z";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			IntPtr native_prefixes = JNIEnv.NewArray (prefixes);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_str);
				__args [1] = new JniArgumentValue (native_prefixes);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
				if (prefixes != null) {
					JNIEnv.CopyArray (native_prefixes, prefixes);
					JNIEnv.DeleteLocalRef (native_prefixes);
				}
				global::System.GC.KeepAlive (prefixes);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='StrUtils']/method[@name='stringInc' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("stringInc", "(Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? StringInc (string? str)
		{
			const string __id = "stringInc.(Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_str);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='StrUtils']/method[@name='trim' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String']]"
		[Register ("trim", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? Trim (string? str, string? chars)
		{
			const string __id = "trim.(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			IntPtr native_chars = JNIEnv.NewString ((string?)chars);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_str);
				__args [1] = new JniArgumentValue (native_chars);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
				JNIEnv.DeleteLocalRef (native_chars);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='StrUtils']/method[@name='trimLeading' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String']]"
		[Register ("trimLeading", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? TrimLeading (string? str, string? chars)
		{
			const string __id = "trimLeading.(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			IntPtr native_chars = JNIEnv.NewString ((string?)chars);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_str);
				__args [1] = new JniArgumentValue (native_chars);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
				JNIEnv.DeleteLocalRef (native_chars);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='StrUtils']/method[@name='trimTrailing' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String']]"
		[Register ("trimTrailing", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? TrimTrailing (string? str, string? chars)
		{
			const string __id = "trimTrailing.(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			IntPtr native_chars = JNIEnv.NewString ((string?)chars);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_str);
				__args [1] = new JniArgumentValue (native_chars);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
				JNIEnv.DeleteLocalRef (native_chars);
			}
		}

	}
}
