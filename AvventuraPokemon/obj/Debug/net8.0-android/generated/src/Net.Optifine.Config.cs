//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Net.Optifine {

	// Metadata.xml XPath class reference: path="/api/package[@name='net.optifine']/class[@name='Config']"
	[global::Android.Runtime.Register ("net/optifine/Config", DoNotGenerateAcw=true)]
	public partial class Config : global::Java.Lang.Object {

		// Metadata.xml XPath field reference: path="/api/package[@name='net.optifine']/class[@name='Config']/field[@name='DEF_ALPHA_FUNC_LEVEL']"
		[Register ("DEF_ALPHA_FUNC_LEVEL")]
		public static global::Java.Lang.Float? DefAlphaFuncLevel {
			get {
				const string __id = "DEF_ALPHA_FUNC_LEVEL.Ljava/lang/Float;";

				var __v = _members.StaticFields.GetObjectValue (__id);
				return global::Java.Lang.Object.GetObject<global::Java.Lang.Float> (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='net.optifine']/class[@name='Config']/field[@name='logDetail']"
		[Register ("logDetail")]
		public static bool LogDetail {
			get {
				const string __id = "logDetail.Z";

				var __v = _members.StaticFields.GetBooleanValue (__id);
				return __v;
			}
		}

		// Metadata.xml XPath field reference: path="/api/package[@name='net.optifine']/class[@name='Config']/field[@name='MC_VERSION']"
		[Register ("MC_VERSION")]
		public const string McVersion = (string) "1.21.1";

		// Metadata.xml XPath field reference: path="/api/package[@name='net.optifine']/class[@name='Config']/field[@name='OF_EDITION']"
		[Register ("OF_EDITION")]
		public const string OfEdition = (string) "HD_U";

		// Metadata.xml XPath field reference: path="/api/package[@name='net.optifine']/class[@name='Config']/field[@name='OF_NAME']"
		[Register ("OF_NAME")]
		public const string OfName = (string) "OptiFine";

		// Metadata.xml XPath field reference: path="/api/package[@name='net.optifine']/class[@name='Config']/field[@name='OF_RELEASE']"
		[Register ("OF_RELEASE")]
		public const string OfRelease = (string) "J1";


		// Metadata.xml XPath field reference: path="/api/package[@name='net.optifine']/class[@name='Config']/field[@name='openGlExtensions']"
		[Register ("openGlExtensions")]
		public static IList<string>? OpenGlExtensions {
			get {
				const string __id = "openGlExtensions.[Ljava/lang/String;";

				var __v = _members.StaticFields.GetObjectValue (__id);
				return global::Android.Runtime.JavaArray<string>.FromJniHandle (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "openGlExtensions.[Ljava/lang/String;";

				IntPtr native_value = global::Android.Runtime.JavaArray<string>.ToLocalJniHandle (value);
				try {
					_members.StaticFields.SetValue (__id, new JniObjectReference (native_value));
				} finally {
					global::Android.Runtime.JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='net.optifine']/class[@name='Config']/field[@name='openGlRenderer']"
		[Register ("openGlRenderer")]
		public static string? OpenGlRenderer {
			get {
				const string __id = "openGlRenderer.Ljava/lang/String;";

				var __v = _members.StaticFields.GetObjectValue (__id);
				return JNIEnv.GetString (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "openGlRenderer.Ljava/lang/String;";

				IntPtr native_value = JNIEnv.NewString ((string?)value);
				try {
					_members.StaticFields.SetValue (__id, new JniObjectReference (native_value));
				} finally {
					JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='net.optifine']/class[@name='Config']/field[@name='openGlVendor']"
		[Register ("openGlVendor")]
		public static string? OpenGlVendor {
			get {
				const string __id = "openGlVendor.Ljava/lang/String;";

				var __v = _members.StaticFields.GetObjectValue (__id);
				return JNIEnv.GetString (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "openGlVendor.Ljava/lang/String;";

				IntPtr native_value = JNIEnv.NewString ((string?)value);
				try {
					_members.StaticFields.SetValue (__id, new JniObjectReference (native_value));
				} finally {
					JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='net.optifine']/class[@name='Config']/field[@name='openGlVersion']"
		[Register ("openGlVersion")]
		public static string? OpenGlVersion {
			get {
				const string __id = "openGlVersion.Ljava/lang/String;";

				var __v = _members.StaticFields.GetObjectValue (__id);
				return JNIEnv.GetString (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "openGlVersion.Ljava/lang/String;";

				IntPtr native_value = JNIEnv.NewString ((string?)value);
				try {
					_members.StaticFields.SetValue (__id, new JniObjectReference (native_value));
				} finally {
					JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='net.optifine']/class[@name='Config']/field[@name='zoomMode']"
		[Register ("zoomMode")]
		public static bool ZoomMode {
			get {
				const string __id = "zoomMode.Z";

				var __v = _members.StaticFields.GetBooleanValue (__id);
				return __v;
			}
			set {
				const string __id = "zoomMode.Z";

				try {
					_members.StaticFields.SetValue (__id, value);
				} finally {
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='net.optifine']/class[@name='Config']/field[@name='zoomSmoothCamera']"
		[Register ("zoomSmoothCamera")]
		public static bool ZoomSmoothCamera {
			get {
				const string __id = "zoomSmoothCamera.Z";

				var __v = _members.StaticFields.GetBooleanValue (__id);
				return __v;
			}
			set {
				const string __id = "zoomSmoothCamera.Z";

				try {
					_members.StaticFields.SetValue (__id, value);
				} finally {
				}
			}
		}

		static readonly JniPeerMembers _members = new XAPeerMembers ("net/optifine/Config", typeof (Config));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected Config (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		public static unsafe float AlphaFuncLevel {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='getAlphaFuncLevel' and count(parameter)=0]"
			[Register ("getAlphaFuncLevel", "()F", "")]
			get {
				const string __id = "getAlphaFuncLevel.()F";
				try {
					var __rm = _members.StaticMethods.InvokeSingleMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe float AmbientOcclusionLevel {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='getAmbientOcclusionLevel' and count(parameter)=0]"
			[Register ("getAmbientOcclusionLevel", "()F", "")]
			get {
				const string __id = "getAmbientOcclusionLevel.()F";
				try {
					var __rm = _members.StaticMethods.InvokeSingleMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe int AnisotropicFilterLevel {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='getAnisotropicFilterLevel' and count(parameter)=0]"
			[Register ("getAnisotropicFilterLevel", "()I", "")]
			get {
				const string __id = "getAnisotropicFilterLevel.()I";
				try {
					var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe int AntialiasingLevel {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='getAntialiasingLevel' and count(parameter)=0]"
			[Register ("getAntialiasingLevel", "()I", "")]
			get {
				const string __id = "getAntialiasingLevel.()I";
				try {
					var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe int AvailableProcessors {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='getAvailableProcessors' and count(parameter)=0]"
			[Register ("getAvailableProcessors", "()I", "")]
			get {
				const string __id = "getAvailableProcessors.()I";
				try {
					var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe long AverageFrameFps {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='getAverageFrameFps' and count(parameter)=0]"
			[Register ("getAverageFrameFps", "()J", "")]
			get {
				const string __id = "getAverageFrameFps.()J";
				try {
					var __rm = _members.StaticMethods.InvokeInt64Method (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe long AverageFrameTimeMs {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='getAverageFrameTimeMs' and count(parameter)=0]"
			[Register ("getAverageFrameTimeMs", "()J", "")]
			get {
				const string __id = "getAverageFrameTimeMs.()J";
				try {
					var __rm = _members.StaticMethods.InvokeInt64Method (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe float AverageFrameTimeSec {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='getAverageFrameTimeSec' and count(parameter)=0]"
			[Register ("getAverageFrameTimeSec", "()F", "")]
			get {
				const string __id = "getAverageFrameTimeSec.()F";
				try {
					var __rm = _members.StaticMethods.InvokeSingleMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe int BiomeBlendRadius {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='getBiomeBlendRadius' and count(parameter)=0]"
			[Register ("getBiomeBlendRadius", "()I", "")]
			get {
				const string __id = "getBiomeBlendRadius.()I";
				try {
					var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe int BitsJre {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='getBitsJre' and count(parameter)=0]"
			[Register ("getBitsJre", "()I", "")]
			get {
				const string __id = "getBitsJre.()I";
				try {
					var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe int BitsOs {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='getBitsOs' and count(parameter)=0]"
			[Register ("getBitsOs", "()I", "")]
			get {
				const string __id = "getBitsOs.()I";
				try {
					var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe string? Build {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='getBuild' and count(parameter)=0]"
			[Register ("getBuild", "()Ljava/lang/String;", "")]
			get {
				const string __id = "getBuild.()Ljava/lang/String;";
				try {
					var __rm = _members.StaticMethods.InvokeObjectMethod (__id, null);
					return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
		}

		public static unsafe int ChunkUpdates {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='getChunkUpdates' and count(parameter)=0]"
			[Register ("getChunkUpdates", "()I", "")]
			get {
				const string __id = "getChunkUpdates.()I";
				try {
					var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe int ChunkViewDistance {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='getChunkViewDistance' and count(parameter)=0]"
			[Register ("getChunkViewDistance", "()I", "")]
			get {
				const string __id = "getChunkViewDistance.()I";
				try {
					var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe float FogStart {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='getFogStart' and count(parameter)=0]"
			[Register ("getFogStart", "()F", "")]
			get {
				const string __id = "getFogStart.()F";
				try {
					var __rm = _members.StaticMethods.InvokeSingleMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe int FpsAverage {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='getFpsAverage' and count(parameter)=0]"
			[Register ("getFpsAverage", "()I", "")]
			get {
				const string __id = "getFpsAverage.()I";
				try {
					var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe int FpsMin {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='getFpsMin' and count(parameter)=0]"
			[Register ("getFpsMin", "()I", "")]
			get {
				const string __id = "getFpsMin.()I";
				try {
					var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe string? FpsString {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='getFpsString' and count(parameter)=0]"
			[Register ("getFpsString", "()Ljava/lang/String;", "")]
			get {
				const string __id = "getFpsString.()Ljava/lang/String;";
				try {
					var __rm = _members.StaticMethods.InvokeObjectMethod (__id, null);
					return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
		}

		public static unsafe global::Net.Optifine.Config.GlVersion? GlVersion {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='getGlVersion' and count(parameter)=0]"
			[Register ("getGlVersion", "()Lnet/optifine/config/GlVersion;", "")]
			get {
				const string __id = "getGlVersion.()Lnet/optifine/config/GlVersion;";
				try {
					var __rm = _members.StaticMethods.InvokeObjectMethod (__id, null);
					return global::Java.Lang.Object.GetObject<global::Net.Optifine.Config.GlVersion> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
		}

		public static unsafe global::Net.Optifine.Config.GlVersion? GlslVersion {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='getGlslVersion' and count(parameter)=0]"
			[Register ("getGlslVersion", "()Lnet/optifine/config/GlVersion;", "")]
			get {
				const string __id = "getGlslVersion.()Lnet/optifine/config/GlVersion;";
				try {
					var __rm = _members.StaticMethods.InvokeObjectMethod (__id, null);
					return global::Java.Lang.Object.GetObject<global::Net.Optifine.Config.GlVersion> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
		}

		public static unsafe bool IsAlternateBlocks {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isAlternateBlocks' and count(parameter)=0]"
			[Register ("isAlternateBlocks", "()Z", "")]
			get {
				const string __id = "isAlternateBlocks.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsAnimatedExplosion {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isAnimatedExplosion' and count(parameter)=0]"
			[Register ("isAnimatedExplosion", "()Z", "")]
			get {
				const string __id = "isAnimatedExplosion.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsAnimatedFire {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isAnimatedFire' and count(parameter)=0]"
			[Register ("isAnimatedFire", "()Z", "")]
			get {
				const string __id = "isAnimatedFire.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsAnimatedFlame {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isAnimatedFlame' and count(parameter)=0]"
			[Register ("isAnimatedFlame", "()Z", "")]
			get {
				const string __id = "isAnimatedFlame.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsAnimatedLava {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isAnimatedLava' and count(parameter)=0]"
			[Register ("isAnimatedLava", "()Z", "")]
			get {
				const string __id = "isAnimatedLava.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsAnimatedPortal {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isAnimatedPortal' and count(parameter)=0]"
			[Register ("isAnimatedPortal", "()Z", "")]
			get {
				const string __id = "isAnimatedPortal.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsAnimatedRedstone {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isAnimatedRedstone' and count(parameter)=0]"
			[Register ("isAnimatedRedstone", "()Z", "")]
			get {
				const string __id = "isAnimatedRedstone.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsAnimatedSmoke {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isAnimatedSmoke' and count(parameter)=0]"
			[Register ("isAnimatedSmoke", "()Z", "")]
			get {
				const string __id = "isAnimatedSmoke.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsAnimatedTerrain {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isAnimatedTerrain' and count(parameter)=0]"
			[Register ("isAnimatedTerrain", "()Z", "")]
			get {
				const string __id = "isAnimatedTerrain.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsAnimatedTextures {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isAnimatedTextures' and count(parameter)=0]"
			[Register ("isAnimatedTextures", "()Z", "")]
			get {
				const string __id = "isAnimatedTextures.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsAnimatedWater {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isAnimatedWater' and count(parameter)=0]"
			[Register ("isAnimatedWater", "()Z", "")]
			get {
				const string __id = "isAnimatedWater.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsAnisotropicFiltering {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isAnisotropicFiltering' and count(parameter)=0]"
			[Register ("isAnisotropicFiltering", "()Z", "")]
			get {
				const string __id = "isAnisotropicFiltering.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsAntialiasing {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isAntialiasing' and count(parameter)=0]"
			[Register ("isAntialiasing", "()Z", "")]
			get {
				const string __id = "isAntialiasing.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsAntialiasingConfigured {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isAntialiasingConfigured' and count(parameter)=0]"
			[Register ("isAntialiasingConfigured", "()Z", "")]
			get {
				const string __id = "isAntialiasingConfigured.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsBetterGrass {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isBetterGrass' and count(parameter)=0]"
			[Register ("isBetterGrass", "()Z", "")]
			get {
				const string __id = "isBetterGrass.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsBetterGrassFancy {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isBetterGrassFancy' and count(parameter)=0]"
			[Register ("isBetterGrassFancy", "()Z", "")]
			get {
				const string __id = "isBetterGrassFancy.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsBetterSnow {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isBetterSnow' and count(parameter)=0]"
			[Register ("isBetterSnow", "()Z", "")]
			get {
				const string __id = "isBetterSnow.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsCloudsFancy {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isCloudsFancy' and count(parameter)=0]"
			[Register ("isCloudsFancy", "()Z", "")]
			get {
				const string __id = "isCloudsFancy.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsCloudsOff {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isCloudsOff' and count(parameter)=0]"
			[Register ("isCloudsOff", "()Z", "")]
			get {
				const string __id = "isCloudsOff.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsConnectedModels {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isConnectedModels' and count(parameter)=0]"
			[Register ("isConnectedModels", "()Z", "")]
			get {
				const string __id = "isConnectedModels.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsConnectedTextures {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isConnectedTextures' and count(parameter)=0]"
			[Register ("isConnectedTextures", "()Z", "")]
			get {
				const string __id = "isConnectedTextures.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsConnectedTexturesFancy {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isConnectedTexturesFancy' and count(parameter)=0]"
			[Register ("isConnectedTexturesFancy", "()Z", "")]
			get {
				const string __id = "isConnectedTexturesFancy.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsCullFacesLeaves {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isCullFacesLeaves' and count(parameter)=0]"
			[Register ("isCullFacesLeaves", "()Z", "")]
			get {
				const string __id = "isCullFacesLeaves.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsCustomColors {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isCustomColors' and count(parameter)=0]"
			[Register ("isCustomColors", "()Z", "")]
			get {
				const string __id = "isCustomColors.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsCustomEntityModels {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isCustomEntityModels' and count(parameter)=0]"
			[Register ("isCustomEntityModels", "()Z", "")]
			get {
				const string __id = "isCustomEntityModels.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsCustomFonts {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isCustomFonts' and count(parameter)=0]"
			[Register ("isCustomFonts", "()Z", "")]
			get {
				const string __id = "isCustomFonts.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsCustomGuis {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isCustomGuis' and count(parameter)=0]"
			[Register ("isCustomGuis", "()Z", "")]
			get {
				const string __id = "isCustomGuis.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsCustomItems {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isCustomItems' and count(parameter)=0]"
			[Register ("isCustomItems", "()Z", "")]
			get {
				const string __id = "isCustomItems.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsCustomSky {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isCustomSky' and count(parameter)=0]"
			[Register ("isCustomSky", "()Z", "")]
			get {
				const string __id = "isCustomSky.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsDrippingWaterLava {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isDrippingWaterLava' and count(parameter)=0]"
			[Register ("isDrippingWaterLava", "()Z", "")]
			get {
				const string __id = "isDrippingWaterLava.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsDynamicFov {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isDynamicFov' and count(parameter)=0]"
			[Register ("isDynamicFov", "()Z", "")]
			get {
				const string __id = "isDynamicFov.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsDynamicHandLight {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isDynamicHandLight' and count(parameter)=0]"
			[Register ("isDynamicHandLight", "()Z", "")]
			get {
				const string __id = "isDynamicHandLight.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsDynamicLights {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isDynamicLights' and count(parameter)=0]"
			[Register ("isDynamicLights", "()Z", "")]
			get {
				const string __id = "isDynamicLights.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsDynamicLightsFast {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isDynamicLightsFast' and count(parameter)=0]"
			[Register ("isDynamicLightsFast", "()Z", "")]
			get {
				const string __id = "isDynamicLightsFast.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsDynamicUpdates {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isDynamicUpdates' and count(parameter)=0]"
			[Register ("isDynamicUpdates", "()Z", "")]
			get {
				const string __id = "isDynamicUpdates.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsEmissiveTextures {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isEmissiveTextures' and count(parameter)=0]"
			[Register ("isEmissiveTextures", "()Z", "")]
			get {
				const string __id = "isEmissiveTextures.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsFastRender {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isFastRender' and count(parameter)=0]"
			[Register ("isFastRender", "()Z", "")]
			get {
				const string __id = "isFastRender.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsFireworkParticles {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isFireworkParticles' and count(parameter)=0]"
			[Register ("isFireworkParticles", "()Z", "")]
			get {
				const string __id = "isFireworkParticles.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsFogOff {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isFogOff' and count(parameter)=0]"
			[Register ("isFogOff", "()Z", "")]
			get {
				const string __id = "isFogOff.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsFogOn {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isFogOn' and count(parameter)=0]"
			[Register ("isFogOn", "()Z", "")]
			get {
				const string __id = "isFogOn.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsGeneratedLava {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isGeneratedLava' and count(parameter)=0]"
			[Register ("isGeneratedLava", "()Z", "")]
			get {
				const string __id = "isGeneratedLava.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsGeneratedWater {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isGeneratedWater' and count(parameter)=0]"
			[Register ("isGeneratedWater", "()Z", "")]
			get {
				const string __id = "isGeneratedWater.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsGraphicsFabulous {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isGraphicsFabulous' and count(parameter)=0]"
			[Register ("isGraphicsFabulous", "()Z", "")]
			get {
				const string __id = "isGraphicsFabulous.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsGraphicsFancy {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isGraphicsFancy' and count(parameter)=0]"
			[Register ("isGraphicsFancy", "()Z", "")]
			get {
				const string __id = "isGraphicsFancy.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsIntegratedServerRunning {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isIntegratedServerRunning' and count(parameter)=0]"
			[Register ("isIntegratedServerRunning", "()Z", "")]
			get {
				const string __id = "isIntegratedServerRunning.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsLazyChunkLoading {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isLazyChunkLoading' and count(parameter)=0]"
			[Register ("isLazyChunkLoading", "()Z", "")]
			get {
				const string __id = "isLazyChunkLoading.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsMinecraftThread {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isMinecraftThread' and count(parameter)=0]"
			[Register ("isMinecraftThread", "()Z", "")]
			get {
				const string __id = "isMinecraftThread.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsMipmaps {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isMipmaps' and count(parameter)=0]"
			[Register ("isMipmaps", "()Z", "")]
			get {
				const string __id = "isMipmaps.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsMoonTexture {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isMoonTexture' and count(parameter)=0]"
			[Register ("isMoonTexture", "()Z", "")]
			get {
				const string __id = "isMoonTexture.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsMultiTexture {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isMultiTexture' and count(parameter)=0]"
			[Register ("isMultiTexture", "()Z", "")]
			get {
				const string __id = "isMultiTexture.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsNaturalTextures {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isNaturalTextures' and count(parameter)=0]"
			[Register ("isNaturalTextures", "()Z", "")]
			get {
				const string __id = "isNaturalTextures.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsPortalParticles {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isPortalParticles' and count(parameter)=0]"
			[Register ("isPortalParticles", "()Z", "")]
			get {
				const string __id = "isPortalParticles.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsPotionParticles {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isPotionParticles' and count(parameter)=0]"
			[Register ("isPotionParticles", "()Z", "")]
			get {
				const string __id = "isPotionParticles.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsQuadsToTriangles {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isQuadsToTriangles' and count(parameter)=0]"
			[Register ("isQuadsToTriangles", "()Z", "")]
			get {
				const string __id = "isQuadsToTriangles.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsRainFancy {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isRainFancy' and count(parameter)=0]"
			[Register ("isRainFancy", "()Z", "")]
			get {
				const string __id = "isRainFancy.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsRainOff {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isRainOff' and count(parameter)=0]"
			[Register ("isRainOff", "()Z", "")]
			get {
				const string __id = "isRainOff.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsRainSplash {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isRainSplash' and count(parameter)=0]"
			[Register ("isRainSplash", "()Z", "")]
			get {
				const string __id = "isRainSplash.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsRandomEntities {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isRandomEntities' and count(parameter)=0]"
			[Register ("isRandomEntities", "()Z", "")]
			get {
				const string __id = "isRandomEntities.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsReloadingResources {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isReloadingResources' and count(parameter)=0]"
			[Register ("isReloadingResources", "()Z", "")]
			get {
				const string __id = "isReloadingResources.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsRenderRegions {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isRenderRegions' and count(parameter)=0]"
			[Register ("isRenderRegions", "()Z", "")]
			get {
				const string __id = "isRenderRegions.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsShaders {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isShaders' and count(parameter)=0]"
			[Register ("isShaders", "()Z", "")]
			get {
				const string __id = "isShaders.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsShadersShadows {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isShadersShadows' and count(parameter)=0]"
			[Register ("isShadersShadows", "()Z", "")]
			get {
				const string __id = "isShadersShadows.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsShowCapes {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isShowCapes' and count(parameter)=0]"
			[Register ("isShowCapes", "()Z", "")]
			get {
				const string __id = "isShowCapes.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsShowFrameTime {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isShowFrameTime' and count(parameter)=0]"
			[Register ("isShowFrameTime", "()Z", "")]
			get {
				const string __id = "isShowFrameTime.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsShowGlErrors {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isShowGlErrors' and count(parameter)=0]"
			[Register ("isShowGlErrors", "()Z", "")]
			get {
				const string __id = "isShowGlErrors.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsSingleProcessor {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isSingleProcessor' and count(parameter)=0]"
			[Register ("isSingleProcessor", "()Z", "")]
			get {
				const string __id = "isSingleProcessor.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsSkyEnabled {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isSkyEnabled' and count(parameter)=0]"
			[Register ("isSkyEnabled", "()Z", "")]
			get {
				const string __id = "isSkyEnabled.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsSmoothBiomes {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isSmoothBiomes' and count(parameter)=0]"
			[Register ("isSmoothBiomes", "()Z", "")]
			get {
				const string __id = "isSmoothBiomes.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsSmoothFps {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isSmoothFps' and count(parameter)=0]"
			[Register ("isSmoothFps", "()Z", "")]
			get {
				const string __id = "isSmoothFps.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsSmoothWorld {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isSmoothWorld' and count(parameter)=0]"
			[Register ("isSmoothWorld", "()Z", "")]
			get {
				const string __id = "isSmoothWorld.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsStarsEnabled {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isStarsEnabled' and count(parameter)=0]"
			[Register ("isStarsEnabled", "()Z", "")]
			get {
				const string __id = "isStarsEnabled.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsSunMoonEnabled {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isSunMoonEnabled' and count(parameter)=0]"
			[Register ("isSunMoonEnabled", "()Z", "")]
			get {
				const string __id = "isSunMoonEnabled.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsSunTexture {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isSunTexture' and count(parameter)=0]"
			[Register ("isSunTexture", "()Z", "")]
			get {
				const string __id = "isSunTexture.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsSwampColors {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isSwampColors' and count(parameter)=0]"
			[Register ("isSwampColors", "()Z", "")]
			get {
				const string __id = "isSwampColors.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsTelemetryAnonymous {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isTelemetryAnonymous' and count(parameter)=0]"
			[Register ("isTelemetryAnonymous", "()Z", "")]
			get {
				const string __id = "isTelemetryAnonymous.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsTelemetryOn {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isTelemetryOn' and count(parameter)=0]"
			[Register ("isTelemetryOn", "()Z", "")]
			get {
				const string __id = "isTelemetryOn.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsTimeDayOnly {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isTimeDayOnly' and count(parameter)=0]"
			[Register ("isTimeDayOnly", "()Z", "")]
			get {
				const string __id = "isTimeDayOnly.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsTimeDefault {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isTimeDefault' and count(parameter)=0]"
			[Register ("isTimeDefault", "()Z", "")]
			get {
				const string __id = "isTimeDefault.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsTimeNightOnly {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isTimeNightOnly' and count(parameter)=0]"
			[Register ("isTimeNightOnly", "()Z", "")]
			get {
				const string __id = "isTimeNightOnly.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsTreesFancy {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isTreesFancy' and count(parameter)=0]"
			[Register ("isTreesFancy", "()Z", "")]
			get {
				const string __id = "isTreesFancy.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsTreesSmart {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isTreesSmart' and count(parameter)=0]"
			[Register ("isTreesSmart", "()Z", "")]
			get {
				const string __id = "isTreesSmart.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsUseAlphaFunc {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isUseAlphaFunc' and count(parameter)=0]"
			[Register ("isUseAlphaFunc", "()Z", "")]
			get {
				const string __id = "isUseAlphaFunc.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsVbo {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isVbo' and count(parameter)=0]"
			[Register ("isVbo", "()Z", "")]
			get {
				const string __id = "isVbo.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsVignetteEnabled {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isVignetteEnabled' and count(parameter)=0]"
			[Register ("isVignetteEnabled", "()Z", "")]
			get {
				const string __id = "isVignetteEnabled.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsVoidParticles {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isVoidParticles' and count(parameter)=0]"
			[Register ("isVoidParticles", "()Z", "")]
			get {
				const string __id = "isVoidParticles.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsWaterParticles {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isWaterParticles' and count(parameter)=0]"
			[Register ("isWaterParticles", "()Z", "")]
			get {
				const string __id = "isWaterParticles.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsWeatherEnabled {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isWeatherEnabled' and count(parameter)=0]"
			[Register ("isWeatherEnabled", "()Z", "")]
			get {
				const string __id = "isWeatherEnabled.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe long LastFrameTimeMs {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='getLastFrameTimeMs' and count(parameter)=0]"
			[Register ("getLastFrameTimeMs", "()J", "")]
			get {
				const string __id = "getLastFrameTimeMs.()J";
				try {
					var __rm = _members.StaticMethods.InvokeInt64Method (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe int MinecraftVersionInt {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='getMinecraftVersionInt' and count(parameter)=0]"
			[Register ("getMinecraftVersionInt", "()I", "")]
			get {
				const string __id = "getMinecraftVersionInt.()I";
				try {
					var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe int MipmapLevels {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='getMipmapLevels' and count(parameter)=0]"
			[Register ("getMipmapLevels", "()I", "")]
			get {
				const string __id = "getMipmapLevels.()I";
				try {
					var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe int MipmapType {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='getMipmapType' and count(parameter)=0]"
			[Register ("getMipmapType", "()I", "")]
			get {
				const string __id = "getMipmapType.()I";
				try {
					var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe string? NewRelease {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='getNewRelease' and count(parameter)=0]"
			[Register ("getNewRelease", "()Ljava/lang/String;", "")]
			get {
				const string __id = "getNewRelease.()Ljava/lang/String;";
				try {
					var __rm = _members.StaticMethods.InvokeObjectMethod (__id, null);
					return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='setNewRelease' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
			[Register ("setNewRelease", "(Ljava/lang/String;)V", "")]
			set {
				const string __id = "setNewRelease.(Ljava/lang/String;)V";
				IntPtr native_value = JNIEnv.NewString ((string?)value);
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue (native_value);
					_members.StaticMethods.InvokeVoidMethod (__id, __args);
				} finally {
					JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}

		public static unsafe bool Notify64BitJava {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isNotify64BitJava' and count(parameter)=0]"
			[Register ("isNotify64BitJava", "()Z", "")]
			get {
				const string __id = "isNotify64BitJava.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='setNotify64BitJava' and count(parameter)=1 and parameter[1][@type='boolean']]"
			[Register ("setNotify64BitJava", "(Z)V", "")]
			set {
				const string __id = "setNotify64BitJava.(Z)V";
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue (value);
					_members.StaticMethods.InvokeVoidMethod (__id, __args);
				} finally {
				}
			}
		}

		public static unsafe string? OpenGlVersionString {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='getOpenGlVersionString' and count(parameter)=0]"
			[Register ("getOpenGlVersionString", "()Ljava/lang/String;", "")]
			get {
				const string __id = "getOpenGlVersionString.()Ljava/lang/String;";
				try {
					var __rm = _members.StaticMethods.InvokeObjectMethod (__id, null);
					return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
		}

		public static unsafe string? ResourcePackNames {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='getResourcePackNames' and count(parameter)=0]"
			[Register ("getResourcePackNames", "()Ljava/lang/String;", "")]
			get {
				const string __id = "getResourcePackNames.()Ljava/lang/String;";
				try {
					var __rm = _members.StaticMethods.InvokeObjectMethod (__id, null);
					return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
		}

		public static unsafe int ScreenshotSize {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='getScreenshotSize' and count(parameter)=0]"
			[Register ("getScreenshotSize", "()I", "")]
			get {
				const string __id = "getScreenshotSize.()I";
				try {
					var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe int UpdatesPerFrame {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='getUpdatesPerFrame' and count(parameter)=0]"
			[Register ("getUpdatesPerFrame", "()I", "")]
			get {
				const string __id = "getUpdatesPerFrame.()I";
				try {
					var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe string? Version {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='getVersion' and count(parameter)=0]"
			[Register ("getVersion", "()Ljava/lang/String;", "")]
			get {
				const string __id = "getVersion.()Ljava/lang/String;";
				try {
					var __rm = _members.StaticMethods.InvokeObjectMethod (__id, null);
					return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
		}

		public static unsafe string? VersionDebug {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='getVersionDebug' and count(parameter)=0]"
			[Register ("getVersionDebug", "()Ljava/lang/String;", "")]
			get {
				const string __id = "getVersionDebug.()Ljava/lang/String;";
				try {
					var __rm = _members.StaticMethods.InvokeObjectMethod (__id, null);
					return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='addIntToArray' and count(parameter)=2 and parameter[1][@type='int[]'] and parameter[2][@type='int']]"
		[Register ("addIntToArray", "([II)[I", "")]
		public static unsafe int[]? AddIntToArray (int[]? intArray, int intValue)
		{
			const string __id = "addIntToArray.([II)[I";
			IntPtr native_intArray = JNIEnv.NewArray (intArray);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_intArray);
				__args [1] = new JniArgumentValue (intValue);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (int[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (int));
			} finally {
				if (intArray != null) {
					JNIEnv.CopyArray (native_intArray, intArray);
					JNIEnv.DeleteLocalRef (native_intArray);
				}
				global::System.GC.KeepAlive (intArray);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='addIntsToArray' and count(parameter)=2 and parameter[1][@type='int[]'] and parameter[2][@type='int[]']]"
		[Register ("addIntsToArray", "([I[I)[I", "")]
		public static unsafe int[]? AddIntsToArray (int[]? intArray, int[]? copyFrom)
		{
			const string __id = "addIntsToArray.([I[I)[I";
			IntPtr native_intArray = JNIEnv.NewArray (intArray);
			IntPtr native_copyFrom = JNIEnv.NewArray (copyFrom);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_intArray);
				__args [1] = new JniArgumentValue (native_copyFrom);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (int[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (int));
			} finally {
				if (intArray != null) {
					JNIEnv.CopyArray (native_intArray, intArray);
					JNIEnv.DeleteLocalRef (native_intArray);
				}
				if (copyFrom != null) {
					JNIEnv.CopyArray (native_copyFrom, copyFrom);
					JNIEnv.DeleteLocalRef (native_copyFrom);
				}
				global::System.GC.KeepAlive (intArray);
				global::System.GC.KeepAlive (copyFrom);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='addObjectToArray' and count(parameter)=2 and parameter[1][@type='java.lang.Object[]'] and parameter[2][@type='java.lang.Object']]"
		[Register ("addObjectToArray", "([Ljava/lang/Object;Ljava/lang/Object;)[Ljava/lang/Object;", "")]
		public static unsafe global::Java.Lang.Object[]? AddObjectToArray (global::Java.Lang.Object[]? arr, global::Java.Lang.Object? obj)
		{
			const string __id = "addObjectToArray.([Ljava/lang/Object;Ljava/lang/Object;)[Ljava/lang/Object;";
			IntPtr native_arr = JNIEnv.NewArray (arr);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_arr);
				__args [1] = new JniArgumentValue ((obj == null) ? IntPtr.Zero : ((global::Java.Lang.Object) obj).Handle);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (global::Java.Lang.Object[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (global::Java.Lang.Object));
			} finally {
				if (arr != null) {
					JNIEnv.CopyArray (native_arr, arr);
					JNIEnv.DeleteLocalRef (native_arr);
				}
				global::System.GC.KeepAlive (arr);
				global::System.GC.KeepAlive (obj);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='addObjectToArray' and count(parameter)=3 and parameter[1][@type='java.lang.Object[]'] and parameter[2][@type='java.lang.Object'] and parameter[3][@type='int']]"
		[Register ("addObjectToArray", "([Ljava/lang/Object;Ljava/lang/Object;I)[Ljava/lang/Object;", "")]
		public static unsafe global::Java.Lang.Object[]? AddObjectToArray (global::Java.Lang.Object[]? arr, global::Java.Lang.Object? obj, int index)
		{
			const string __id = "addObjectToArray.([Ljava/lang/Object;Ljava/lang/Object;I)[Ljava/lang/Object;";
			IntPtr native_arr = JNIEnv.NewArray (arr);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_arr);
				__args [1] = new JniArgumentValue ((obj == null) ? IntPtr.Zero : ((global::Java.Lang.Object) obj).Handle);
				__args [2] = new JniArgumentValue (index);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (global::Java.Lang.Object[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (global::Java.Lang.Object));
			} finally {
				if (arr != null) {
					JNIEnv.CopyArray (native_arr, arr);
					JNIEnv.DeleteLocalRef (native_arr);
				}
				global::System.GC.KeepAlive (arr);
				global::System.GC.KeepAlive (obj);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='addObjectsToArray' and count(parameter)=2 and parameter[1][@type='java.lang.Object[]'] and parameter[2][@type='java.lang.Object[]']]"
		[Register ("addObjectsToArray", "([Ljava/lang/Object;[Ljava/lang/Object;)[Ljava/lang/Object;", "")]
		public static unsafe global::Java.Lang.Object[]? AddObjectsToArray (global::Java.Lang.Object[]? arr, global::Java.Lang.Object[]? objs)
		{
			const string __id = "addObjectsToArray.([Ljava/lang/Object;[Ljava/lang/Object;)[Ljava/lang/Object;";
			IntPtr native_arr = JNIEnv.NewArray (arr);
			IntPtr native_objs = JNIEnv.NewArray (objs);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_arr);
				__args [1] = new JniArgumentValue (native_objs);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (global::Java.Lang.Object[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (global::Java.Lang.Object));
			} finally {
				if (arr != null) {
					JNIEnv.CopyArray (native_arr, arr);
					JNIEnv.DeleteLocalRef (native_arr);
				}
				if (objs != null) {
					JNIEnv.CopyArray (native_objs, objs);
					JNIEnv.DeleteLocalRef (native_objs);
				}
				global::System.GC.KeepAlive (arr);
				global::System.GC.KeepAlive (objs);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='arrayToString' and count(parameter)=2 and parameter[1][@type='boolean[]'] and parameter[2][@type='java.lang.String']]"
		[Register ("arrayToString", "([ZLjava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? ArrayToString (bool[]? arr, string? separator)
		{
			const string __id = "arrayToString.([ZLjava/lang/String;)Ljava/lang/String;";
			IntPtr native_arr = JNIEnv.NewArray (arr);
			IntPtr native_separator = JNIEnv.NewString ((string?)separator);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_arr);
				__args [1] = new JniArgumentValue (native_separator);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (arr != null) {
					JNIEnv.CopyArray (native_arr, arr);
					JNIEnv.DeleteLocalRef (native_arr);
				}
				JNIEnv.DeleteLocalRef (native_separator);
				global::System.GC.KeepAlive (arr);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='arrayToString' and count(parameter)=1 and parameter[1][@type='float[]']]"
		[Register ("arrayToString", "([F)Ljava/lang/String;", "")]
		public static unsafe string? ArrayToString (float[]? arr)
		{
			const string __id = "arrayToString.([F)Ljava/lang/String;";
			IntPtr native_arr = JNIEnv.NewArray (arr);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_arr);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (arr != null) {
					JNIEnv.CopyArray (native_arr, arr);
					JNIEnv.DeleteLocalRef (native_arr);
				}
				global::System.GC.KeepAlive (arr);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='arrayToString' and count(parameter)=2 and parameter[1][@type='float[]'] and parameter[2][@type='java.lang.String']]"
		[Register ("arrayToString", "([FLjava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? ArrayToString (float[]? arr, string? separator)
		{
			const string __id = "arrayToString.([FLjava/lang/String;)Ljava/lang/String;";
			IntPtr native_arr = JNIEnv.NewArray (arr);
			IntPtr native_separator = JNIEnv.NewString ((string?)separator);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_arr);
				__args [1] = new JniArgumentValue (native_separator);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (arr != null) {
					JNIEnv.CopyArray (native_arr, arr);
					JNIEnv.DeleteLocalRef (native_arr);
				}
				JNIEnv.DeleteLocalRef (native_separator);
				global::System.GC.KeepAlive (arr);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='arrayToString' and count(parameter)=1 and parameter[1][@type='int[]']]"
		[Register ("arrayToString", "([I)Ljava/lang/String;", "")]
		public static unsafe string? ArrayToString (int[]? arr)
		{
			const string __id = "arrayToString.([I)Ljava/lang/String;";
			IntPtr native_arr = JNIEnv.NewArray (arr);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_arr);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (arr != null) {
					JNIEnv.CopyArray (native_arr, arr);
					JNIEnv.DeleteLocalRef (native_arr);
				}
				global::System.GC.KeepAlive (arr);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='arrayToString' and count(parameter)=2 and parameter[1][@type='int[]'] and parameter[2][@type='java.lang.String']]"
		[Register ("arrayToString", "([ILjava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? ArrayToString (int[]? arr, string? separator)
		{
			const string __id = "arrayToString.([ILjava/lang/String;)Ljava/lang/String;";
			IntPtr native_arr = JNIEnv.NewArray (arr);
			IntPtr native_separator = JNIEnv.NewString ((string?)separator);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_arr);
				__args [1] = new JniArgumentValue (native_separator);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (arr != null) {
					JNIEnv.CopyArray (native_arr, arr);
					JNIEnv.DeleteLocalRef (native_arr);
				}
				JNIEnv.DeleteLocalRef (native_separator);
				global::System.GC.KeepAlive (arr);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='arrayToString' and count(parameter)=1 and parameter[1][@type='java.lang.Object[]']]"
		[Register ("arrayToString", "([Ljava/lang/Object;)Ljava/lang/String;", "")]
		public static unsafe string? ArrayToString (global::Java.Lang.Object[]? arr)
		{
			const string __id = "arrayToString.([Ljava/lang/Object;)Ljava/lang/String;";
			IntPtr native_arr = JNIEnv.NewArray (arr);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_arr);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (arr != null) {
					JNIEnv.CopyArray (native_arr, arr);
					JNIEnv.DeleteLocalRef (native_arr);
				}
				global::System.GC.KeepAlive (arr);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='arrayToString' and count(parameter)=2 and parameter[1][@type='java.lang.Object[]'] and parameter[2][@type='java.lang.String']]"
		[Register ("arrayToString", "([Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? ArrayToString (global::Java.Lang.Object[]? arr, string? separator)
		{
			const string __id = "arrayToString.([Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native_arr = JNIEnv.NewArray (arr);
			IntPtr native_separator = JNIEnv.NewString ((string?)separator);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_arr);
				__args [1] = new JniArgumentValue (native_separator);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (arr != null) {
					JNIEnv.CopyArray (native_arr, arr);
					JNIEnv.DeleteLocalRef (native_arr);
				}
				JNIEnv.DeleteLocalRef (native_separator);
				global::System.GC.KeepAlive (arr);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='between' and count(parameter)=3 and parameter[1][@type='double'] and parameter[2][@type='double'] and parameter[3][@type='double']]"
		[Register ("between", "(DDD)Z", "")]
		public static unsafe bool Between (double val, double min, double max)
		{
			const string __id = "between.(DDD)Z";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (val);
				__args [1] = new JniArgumentValue (min);
				__args [2] = new JniArgumentValue (max);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='between' and count(parameter)=3 and parameter[1][@type='float'] and parameter[2][@type='float'] and parameter[3][@type='float']]"
		[Register ("between", "(FFF)Z", "")]
		public static unsafe bool Between (float val, float min, float max)
		{
			const string __id = "between.(FFF)Z";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (val);
				__args [1] = new JniArgumentValue (min);
				__args [2] = new JniArgumentValue (max);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='between' and count(parameter)=3 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		[Register ("between", "(III)Z", "")]
		public static unsafe bool Between (int val, int min, int max)
		{
			const string __id = "between.(III)Z";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (val);
				__args [1] = new JniArgumentValue (min);
				__args [2] = new JniArgumentValue (max);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='checkGlError' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("checkGlError", "(Ljava/lang/String;)V", "")]
		public static unsafe void CheckGlError (string? loc)
		{
			const string __id = "checkGlError.(Ljava/lang/String;)V";
			IntPtr native_loc = JNIEnv.NewString ((string?)loc);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_loc);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_loc);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='checkInitialized' and count(parameter)=0]"
		[Register ("checkInitialized", "()V", "")]
		public static unsafe void CheckInitialized ()
		{
			const string __id = "checkInitialized.()V";
			try {
				_members.StaticMethods.InvokeVoidMethod (__id, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='checkNull' and count(parameter)=2 and parameter[1][@type='java.lang.Object'] and parameter[2][@type='java.lang.String']]"
		[Register ("checkNull", "(Ljava/lang/Object;Ljava/lang/String;)V", "")]
		public static unsafe void CheckNull (global::Java.Lang.Object? obj, string? msg)
		{
			const string __id = "checkNull.(Ljava/lang/Object;Ljava/lang/String;)V";
			IntPtr native_msg = JNIEnv.NewString ((string?)msg);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((obj == null) ? IntPtr.Zero : ((global::Java.Lang.Object) obj).Handle);
				__args [1] = new JniArgumentValue (native_msg);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_msg);
				global::System.GC.KeepAlive (obj);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='collectionToArray' and count(parameter)=2 and parameter[1][@type='java.util.Collection'] and parameter[2][@type='java.lang.Class']]"
		[Register ("collectionToArray", "(Ljava/util/Collection;Ljava/lang/Class;)[Ljava/lang/Object;", "")]
		public static unsafe global::Java.Lang.Object[]? CollectionToArray (global::System.Collections.ICollection? coll, global::Java.Lang.Class? elementClass)
		{
			const string __id = "collectionToArray.(Ljava/util/Collection;Ljava/lang/Class;)[Ljava/lang/Object;";
			IntPtr native_coll = global::Android.Runtime.JavaCollection.ToLocalJniHandle (coll);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_coll);
				__args [1] = new JniArgumentValue ((elementClass == null) ? IntPtr.Zero : ((global::Java.Lang.Object) elementClass).Handle);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (global::Java.Lang.Object[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (global::Java.Lang.Object));
			} finally {
				JNIEnv.DeleteLocalRef (native_coll);
				global::System.GC.KeepAlive (coll);
				global::System.GC.KeepAlive (elementClass);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='compareRelease' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String']]"
		[Register ("compareRelease", "(Ljava/lang/String;Ljava/lang/String;)I", "")]
		public static unsafe int CompareRelease (string? rel1, string? rel2)
		{
			const string __id = "compareRelease.(Ljava/lang/String;Ljava/lang/String;)I";
			IntPtr native_rel1 = JNIEnv.NewString ((string?)rel1);
			IntPtr native_rel2 = JNIEnv.NewString ((string?)rel2);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_rel1);
				__args [1] = new JniArgumentValue (native_rel2);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_rel1);
				JNIEnv.DeleteLocalRef (native_rel2);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='createDirectIntBuffer' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("createDirectIntBuffer", "(I)Ljava/nio/IntBuffer;", "")]
		public static unsafe global::Java.Nio.IntBuffer? CreateDirectIntBuffer (int capacity)
		{
			const string __id = "createDirectIntBuffer.(I)Ljava/nio/IntBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (capacity);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Lang.Object.GetObject<global::Java.Nio.IntBuffer> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='dbg' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("dbg", "(Ljava/lang/String;)V", "")]
		public static unsafe void Dbg (string? s)
		{
			const string __id = "dbg.(Ljava/lang/String;)V";
			IntPtr native_s = JNIEnv.NewString ((string?)s);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_s);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_s);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='detail' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("detail", "(Ljava/lang/String;)V", "")]
		public static unsafe void Detail (string? s)
		{
			const string __id = "detail.(Ljava/lang/String;)V";
			IntPtr native_s = JNIEnv.NewString ((string?)s);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_s);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_s);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='equals' and count(parameter)=2 and parameter[1][@type='java.lang.Object'] and parameter[2][@type='java.lang.Object']]"
		[Register ("equals", "(Ljava/lang/Object;Ljava/lang/Object;)Z", "")]
		public static unsafe bool Equals (global::Java.Lang.Object? o1, global::Java.Lang.Object? o2)
		{
			const string __id = "equals.(Ljava/lang/Object;Ljava/lang/Object;)Z";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((o1 == null) ? IntPtr.Zero : ((global::Java.Lang.Object) o1).Handle);
				__args [1] = new JniArgumentValue ((o2 == null) ? IntPtr.Zero : ((global::Java.Lang.Object) o2).Handle);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (o1);
				global::System.GC.KeepAlive (o2);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='equalsOne' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='int[]']]"
		[Register ("equalsOne", "(I[I)Z", "")]
		public static unsafe bool EqualsOne (int val, int[]? vals)
		{
			const string __id = "equalsOne.(I[I)Z";
			IntPtr native_vals = JNIEnv.NewArray (vals);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (val);
				__args [1] = new JniArgumentValue (native_vals);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				if (vals != null) {
					JNIEnv.CopyArray (native_vals, vals);
					JNIEnv.DeleteLocalRef (native_vals);
				}
				global::System.GC.KeepAlive (vals);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='equalsOne' and count(parameter)=2 and parameter[1][@type='java.lang.Object'] and parameter[2][@type='java.lang.Object[]']]"
		[Register ("equalsOne", "(Ljava/lang/Object;[Ljava/lang/Object;)Z", "")]
		public static unsafe bool EqualsOne (global::Java.Lang.Object? a, global::Java.Lang.Object[]? bs)
		{
			const string __id = "equalsOne.(Ljava/lang/Object;[Ljava/lang/Object;)Z";
			IntPtr native_bs = JNIEnv.NewArray (bs);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((a == null) ? IntPtr.Zero : ((global::Java.Lang.Object) a).Handle);
				__args [1] = new JniArgumentValue (native_bs);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				if (bs != null) {
					JNIEnv.CopyArray (native_bs, bs);
					JNIEnv.DeleteLocalRef (native_bs);
				}
				global::System.GC.KeepAlive (a);
				global::System.GC.KeepAlive (bs);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='error' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("error", "(Ljava/lang/String;)V", "")]
		public static unsafe void Error (string? s)
		{
			const string __id = "error.(Ljava/lang/String;)V";
			IntPtr native_s = JNIEnv.NewString ((string?)s);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_s);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_s);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='error' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.Throwable']]"
		[Register ("error", "(Ljava/lang/String;Ljava/lang/Throwable;)V", "")]
		public static unsafe void Error (string? s, global::Java.Lang.Throwable? t)
		{
			const string __id = "error.(Ljava/lang/String;Ljava/lang/Throwable;)V";
			IntPtr native_s = JNIEnv.NewString ((string?)s);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_s);
				__args [1] = new JniArgumentValue ((t == null) ? IntPtr.Zero : ((global::Java.Lang.Throwable) t).Handle);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_s);
				global::System.GC.KeepAlive (t);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='frameStart' and count(parameter)=0]"
		[Register ("frameStart", "()V", "")]
		public static unsafe void FrameStart ()
		{
			const string __id = "frameStart.()V";
			try {
				_members.StaticMethods.InvokeVoidMethod (__id, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='getGlErrorString' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("getGlErrorString", "(I)Ljava/lang/String;", "")]
		public static unsafe string? GetGlErrorString (int err)
		{
			const string __id = "getGlErrorString.(I)Ljava/lang/String;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (err);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='getOpenGlExtensions' and count(parameter)=0]"
		[Register ("getOpenGlExtensions", "()[Ljava/lang/String;", "")]
		public static unsafe string[]? GetOpenGlExtensions ()
		{
			const string __id = "getOpenGlExtensions.()[Ljava/lang/String;";
			try {
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, null);
				return (string[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (string));
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='getOptiFineResourceStream' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("getOptiFineResourceStream", "(Ljava/lang/String;)Ljava/io/InputStream;", "")]
		public static unsafe global::System.IO.Stream? GetOptiFineResourceStream (string? name)
		{
			const string __id = "getOptiFineResourceStream.(Ljava/lang/String;)Ljava/io/InputStream;";
			IntPtr native_name = JNIEnv.NewString ((string?)name);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_name);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Android.Runtime.InputStreamInvoker.FromJniHandle (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_name);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='initDisplay' and count(parameter)=0]"
		[Register ("initDisplay", "()V", "")]
		public static unsafe void InitDisplay ()
		{
			const string __id = "initDisplay.()V";
			try {
				_members.StaticMethods.InvokeVoidMethod (__id, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='intHash' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("intHash", "(I)I", "")]
		public static unsafe int IntHash (int x)
		{
			const string __id = "intHash.(I)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (x);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isFalse' and count(parameter)=1 and parameter[1][@type='java.lang.Boolean']]"
		[Register ("isFalse", "(Ljava/lang/Boolean;)Z", "")]
		public static unsafe bool IsFalse (global::Java.Lang.Boolean? val)
		{
			const string __id = "isFalse.(Ljava/lang/Boolean;)Z";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((val == null) ? IntPtr.Zero : ((global::Java.Lang.Object) val).Handle);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (val);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isKeyDown' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("isKeyDown", "(I)Z", "")]
		public static unsafe bool IsKeyDown (int key)
		{
			const string __id = "isKeyDown.(I)Z";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (key);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isSameOne' and count(parameter)=2 and parameter[1][@type='java.lang.Object'] and parameter[2][@type='java.lang.Object[]']]"
		[Register ("isSameOne", "(Ljava/lang/Object;[Ljava/lang/Object;)Z", "")]
		public static unsafe bool IsSameOne (global::Java.Lang.Object? a, global::Java.Lang.Object[]? bs)
		{
			const string __id = "isSameOne.(Ljava/lang/Object;[Ljava/lang/Object;)Z";
			IntPtr native_bs = JNIEnv.NewArray (bs);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((a == null) ? IntPtr.Zero : ((global::Java.Lang.Object) a).Handle);
				__args [1] = new JniArgumentValue (native_bs);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				if (bs != null) {
					JNIEnv.CopyArray (native_bs, bs);
					JNIEnv.DeleteLocalRef (native_bs);
				}
				global::System.GC.KeepAlive (a);
				global::System.GC.KeepAlive (bs);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='isTrue' and count(parameter)=1 and parameter[1][@type='java.lang.Boolean']]"
		[Register ("isTrue", "(Ljava/lang/Boolean;)Z", "")]
		public static unsafe bool IsTrue (global::Java.Lang.Boolean? val)
		{
			const string __id = "isTrue.(Ljava/lang/Boolean;)Z";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((val == null) ? IntPtr.Zero : ((global::Java.Lang.Object) val).Handle);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (val);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='limit' and count(parameter)=3 and parameter[1][@type='double'] and parameter[2][@type='double'] and parameter[3][@type='double']]"
		[Register ("limit", "(DDD)D", "")]
		public static unsafe double Limit (double val, double min, double max)
		{
			const string __id = "limit.(DDD)D";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (val);
				__args [1] = new JniArgumentValue (min);
				__args [2] = new JniArgumentValue (max);
				var __rm = _members.StaticMethods.InvokeDoubleMethod (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='limit' and count(parameter)=3 and parameter[1][@type='float'] and parameter[2][@type='float'] and parameter[3][@type='float']]"
		[Register ("limit", "(FFF)F", "")]
		public static unsafe float Limit (float val, float min, float max)
		{
			const string __id = "limit.(FFF)F";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (val);
				__args [1] = new JniArgumentValue (min);
				__args [2] = new JniArgumentValue (max);
				var __rm = _members.StaticMethods.InvokeSingleMethod (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='limit' and count(parameter)=3 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		[Register ("limit", "(III)I", "")]
		public static unsafe int Limit (int val, int min, int max)
		{
			const string __id = "limit.(III)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (val);
				__args [1] = new JniArgumentValue (min);
				__args [2] = new JniArgumentValue (max);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='limit' and count(parameter)=3 and parameter[1][@type='long'] and parameter[2][@type='long'] and parameter[3][@type='long']]"
		[Register ("limit", "(JJJ)J", "")]
		public static unsafe long Limit (long val, long min, long max)
		{
			const string __id = "limit.(JJJ)J";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (val);
				__args [1] = new JniArgumentValue (min);
				__args [2] = new JniArgumentValue (max);
				var __rm = _members.StaticMethods.InvokeInt64Method (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='limitTo1' and count(parameter)=1 and parameter[1][@type='float']]"
		[Register ("limitTo1", "(F)F", "")]
		public static unsafe float LimitTo1 (float val)
		{
			const string __id = "limitTo1.(F)F";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (val);
				var __rm = _members.StaticMethods.InvokeSingleMethod (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='listToString' and count(parameter)=1 and parameter[1][@type='java.util.List']]"
		[Register ("listToString", "(Ljava/util/List;)Ljava/lang/String;", "")]
		public static unsafe string? ListToString (global::System.Collections.IList? list)
		{
			const string __id = "listToString.(Ljava/util/List;)Ljava/lang/String;";
			IntPtr native_list = global::Android.Runtime.JavaList.ToLocalJniHandle (list);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_list);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_list);
				global::System.GC.KeepAlive (list);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='listToString' and count(parameter)=2 and parameter[1][@type='java.util.List'] and parameter[2][@type='java.lang.String']]"
		[Register ("listToString", "(Ljava/util/List;Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? ListToString (global::System.Collections.IList? list, string? separator)
		{
			const string __id = "listToString.(Ljava/util/List;Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native_list = global::Android.Runtime.JavaList.ToLocalJniHandle (list);
			IntPtr native_separator = JNIEnv.NewString ((string?)separator);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_list);
				__args [1] = new JniArgumentValue (native_separator);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_list);
				JNIEnv.DeleteLocalRef (native_separator);
				global::System.GC.KeepAlive (list);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='log' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("log", "(Ljava/lang/String;)V", "")]
		public static unsafe void Log (string? s)
		{
			const string __id = "log.(Ljava/lang/String;)V";
			IntPtr native_s = JNIEnv.NewString ((string?)s);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_s);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_s);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='normalize' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("normalize", "(Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? Normalize (string? s)
		{
			const string __id = "normalize.(Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native_s = JNIEnv.NewString ((string?)s);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_s);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_s);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='openWebLink' and count(parameter)=1 and parameter[1][@type='java.net.URI']]"
		[Register ("openWebLink", "(Ljava/net/URI;)Z", "")]
		public static unsafe bool OpenWebLink (global::Java.Net.URI? uri)
		{
			const string __id = "openWebLink.(Ljava/net/URI;)Z";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((uri == null) ? IntPtr.Zero : ((global::Java.Lang.Object) uri).Handle);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (uri);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='parseBoolean' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='boolean']]"
		[Register ("parseBoolean", "(Ljava/lang/String;Z)Z", "")]
		public static unsafe bool ParseBoolean (string? str, bool defVal)
		{
			const string __id = "parseBoolean.(Ljava/lang/String;Z)Z";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_str);
				__args [1] = new JniArgumentValue (defVal);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='parseBoolean' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.Boolean']]"
		[Register ("parseBoolean", "(Ljava/lang/String;Ljava/lang/Boolean;)Ljava/lang/Boolean;", "")]
		public static unsafe global::Java.Lang.Boolean? ParseBoolean (string? str, global::Java.Lang.Boolean? defVal)
		{
			const string __id = "parseBoolean.(Ljava/lang/String;Ljava/lang/Boolean;)Ljava/lang/Boolean;";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_str);
				__args [1] = new JniArgumentValue ((defVal == null) ? IntPtr.Zero : ((global::Java.Lang.Object) defVal).Handle);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Lang.Object.GetObject<global::Java.Lang.Boolean> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
				global::System.GC.KeepAlive (defVal);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='parseFloat' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='float']]"
		[Register ("parseFloat", "(Ljava/lang/String;F)F", "")]
		public static unsafe float ParseFloat (string? str, float defVal)
		{
			const string __id = "parseFloat.(Ljava/lang/String;F)F";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_str);
				__args [1] = new JniArgumentValue (defVal);
				var __rm = _members.StaticMethods.InvokeSingleMethod (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='parseGlVersion' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='net.optifine.config.GlVersion']]"
		[Register ("parseGlVersion", "(Ljava/lang/String;Lnet/optifine/config/GlVersion;)Lnet/optifine/config/GlVersion;", "")]
		public static unsafe global::Net.Optifine.Config.GlVersion? ParseGlVersion (string? versionString, global::Net.Optifine.Config.GlVersion? def)
		{
			const string __id = "parseGlVersion.(Ljava/lang/String;Lnet/optifine/config/GlVersion;)Lnet/optifine/config/GlVersion;";
			IntPtr native_versionString = JNIEnv.NewString ((string?)versionString);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_versionString);
				__args [1] = new JniArgumentValue ((def == null) ? IntPtr.Zero : ((global::Java.Lang.Object) def).Handle);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Lang.Object.GetObject<global::Net.Optifine.Config.GlVersion> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_versionString);
				global::System.GC.KeepAlive (def);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='parseHexInt' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='int']]"
		[Register ("parseHexInt", "(Ljava/lang/String;I)I", "")]
		public static unsafe int ParseHexInt (string? str, int defVal)
		{
			const string __id = "parseHexInt.(Ljava/lang/String;I)I";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_str);
				__args [1] = new JniArgumentValue (defVal);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='parseInt' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='int']]"
		[Register ("parseInt", "(Ljava/lang/String;I)I", "")]
		public static unsafe int ParseInt (string? str, int defVal)
		{
			const string __id = "parseInt.(Ljava/lang/String;I)I";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_str);
				__args [1] = new JniArgumentValue (defVal);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='readAll' and count(parameter)=1 and parameter[1][@type='java.io.InputStream']]"
		[Register ("readAll", "(Ljava/io/InputStream;)[B", "")]
		public static unsafe byte[]? ReadAll (global::System.IO.Stream? @is)
		{
			const string __id = "readAll.(Ljava/io/InputStream;)[B";
			IntPtr native__is = global::Android.Runtime.InputStreamAdapter.ToLocalJniHandle (@is);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native__is);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
				JNIEnv.DeleteLocalRef (native__is);
				global::System.GC.KeepAlive (@is);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='readFile' and count(parameter)=1 and parameter[1][@type='java.io.File']]"
		[Register ("readFile", "(Ljava/io/File;)Ljava/lang/String;", "")]
		public static unsafe string? ReadFile (global::Java.IO.File? file)
		{
			const string __id = "readFile.(Ljava/io/File;)Ljava/lang/String;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((file == null) ? IntPtr.Zero : ((global::Java.Lang.Object) file).Handle);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				global::System.GC.KeepAlive (file);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='readInputStream' and count(parameter)=1 and parameter[1][@type='java.io.InputStream']]"
		[Register ("readInputStream", "(Ljava/io/InputStream;)Ljava/lang/String;", "")]
		public static unsafe string? ReadInputStream (global::System.IO.Stream? @in)
		{
			const string __id = "readInputStream.(Ljava/io/InputStream;)Ljava/lang/String;";
			IntPtr native__in = global::Android.Runtime.InputStreamAdapter.ToLocalJniHandle (@in);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native__in);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native__in);
				global::System.GC.KeepAlive (@in);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='readInputStream' and count(parameter)=2 and parameter[1][@type='java.io.InputStream'] and parameter[2][@type='java.lang.String']]"
		[Register ("readInputStream", "(Ljava/io/InputStream;Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? ReadInputStream (global::System.IO.Stream? @in, string? encoding)
		{
			const string __id = "readInputStream.(Ljava/io/InputStream;Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native__in = global::Android.Runtime.InputStreamAdapter.ToLocalJniHandle (@in);
			IntPtr native_encoding = JNIEnv.NewString ((string?)encoding);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native__in);
				__args [1] = new JniArgumentValue (native_encoding);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native__in);
				JNIEnv.DeleteLocalRef (native_encoding);
				global::System.GC.KeepAlive (@in);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='readLines' and count(parameter)=1 and parameter[1][@type='java.io.File']]"
		[Register ("readLines", "(Ljava/io/File;)[Ljava/lang/String;", "")]
		public static unsafe string[]? ReadLines (global::Java.IO.File? file)
		{
			const string __id = "readLines.(Ljava/io/File;)[Ljava/lang/String;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((file == null) ? IntPtr.Zero : ((global::Java.Lang.Object) file).Handle);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (string[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (string));
			} finally {
				global::System.GC.KeepAlive (file);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='readLines' and count(parameter)=1 and parameter[1][@type='java.io.InputStream']]"
		[Register ("readLines", "(Ljava/io/InputStream;)[Ljava/lang/String;", "")]
		public static unsafe string[]? ReadLines (global::System.IO.Stream? @is)
		{
			const string __id = "readLines.(Ljava/io/InputStream;)[Ljava/lang/String;";
			IntPtr native__is = global::Android.Runtime.InputStreamAdapter.ToLocalJniHandle (@is);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native__is);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (string[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (string));
			} finally {
				JNIEnv.DeleteLocalRef (native__is);
				global::System.GC.KeepAlive (@is);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='removeObjectFromArray' and count(parameter)=2 and parameter[1][@type='java.lang.Object[]'] and parameter[2][@type='java.lang.Object']]"
		[Register ("removeObjectFromArray", "([Ljava/lang/Object;Ljava/lang/Object;)[Ljava/lang/Object;", "")]
		public static unsafe global::Java.Lang.Object[]? RemoveObjectFromArray (global::Java.Lang.Object[]? arr, global::Java.Lang.Object? obj)
		{
			const string __id = "removeObjectFromArray.([Ljava/lang/Object;Ljava/lang/Object;)[Ljava/lang/Object;";
			IntPtr native_arr = JNIEnv.NewArray (arr);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_arr);
				__args [1] = new JniArgumentValue ((obj == null) ? IntPtr.Zero : ((global::Java.Lang.Object) obj).Handle);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (global::Java.Lang.Object[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (global::Java.Lang.Object));
			} finally {
				if (arr != null) {
					JNIEnv.CopyArray (native_arr, arr);
					JNIEnv.DeleteLocalRef (native_arr);
				}
				global::System.GC.KeepAlive (arr);
				global::System.GC.KeepAlive (obj);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='showGuiMessage' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String']]"
		[Register ("showGuiMessage", "(Ljava/lang/String;Ljava/lang/String;)V", "")]
		public static unsafe void ShowGuiMessage (string? line1, string? line2)
		{
			const string __id = "showGuiMessage.(Ljava/lang/String;Ljava/lang/String;)V";
			IntPtr native_line1 = JNIEnv.NewString ((string?)line1);
			IntPtr native_line2 = JNIEnv.NewString ((string?)line2);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_line1);
				__args [1] = new JniArgumentValue (native_line2);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_line1);
				JNIEnv.DeleteLocalRef (native_line2);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='sleep' and count(parameter)=1 and parameter[1][@type='long']]"
		[Register ("sleep", "(J)V", "")]
		public static unsafe void Sleep (long ms)
		{
			const string __id = "sleep.(J)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (ms);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='toPrimitive' and count(parameter)=1 and parameter[1][@type='java.lang.Integer[]']]"
		[Register ("toPrimitive", "([Ljava/lang/Integer;)[I", "")]
		public static unsafe int[]? ToPrimitive (global::Java.Lang.Integer[]? arr)
		{
			const string __id = "toPrimitive.([Ljava/lang/Integer;)[I";
			IntPtr native_arr = JNIEnv.NewArray (arr);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_arr);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (int[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (int));
			} finally {
				if (arr != null) {
					JNIEnv.CopyArray (native_arr, arr);
					JNIEnv.DeleteLocalRef (native_arr);
				}
				global::System.GC.KeepAlive (arr);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='tokenize' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String']]"
		[Register ("tokenize", "(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;", "")]
		public static unsafe string[]? Tokenize (string? str, string? delim)
		{
			const string __id = "tokenize.(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			IntPtr native_delim = JNIEnv.NewString ((string?)delim);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_str);
				__args [1] = new JniArgumentValue (native_delim);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (string[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (string));
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
				JNIEnv.DeleteLocalRef (native_delim);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='updateAvailableProcessors' and count(parameter)=0]"
		[Register ("updateAvailableProcessors", "()V", "")]
		public static unsafe void UpdateAvailableProcessors ()
		{
			const string __id = "updateAvailableProcessors.()V";
			try {
				_members.StaticMethods.InvokeVoidMethod (__id, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='updateFpsMin' and count(parameter)=0]"
		[Register ("updateFpsMin", "()V", "")]
		public static unsafe void UpdateFpsMin ()
		{
			const string __id = "updateFpsMin.()V";
			try {
				_members.StaticMethods.InvokeVoidMethod (__id, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='updateTexturePackClouds' and count(parameter)=0]"
		[Register ("updateTexturePackClouds", "()V", "")]
		public static unsafe void UpdateTexturePackClouds ()
		{
			const string __id = "updateTexturePackClouds.()V";
			try {
				_members.StaticMethods.InvokeVoidMethod (__id, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='updateThreadPriorities' and count(parameter)=0]"
		[Register ("updateThreadPriorities", "()V", "")]
		public static unsafe void UpdateThreadPriorities ()
		{
			const string __id = "updateThreadPriorities.()V";
			try {
				_members.StaticMethods.InvokeVoidMethod (__id, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='warn' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("warn", "(Ljava/lang/String;)V", "")]
		public static unsafe void Warn (string? s)
		{
			const string __id = "warn.(Ljava/lang/String;)V";
			IntPtr native_s = JNIEnv.NewString ((string?)s);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_s);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_s);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='warn' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.Throwable']]"
		[Register ("warn", "(Ljava/lang/String;Ljava/lang/Throwable;)V", "")]
		public static unsafe void Warn (string? s, global::Java.Lang.Throwable? t)
		{
			const string __id = "warn.(Ljava/lang/String;Ljava/lang/Throwable;)V";
			IntPtr native_s = JNIEnv.NewString ((string?)s);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_s);
				__args [1] = new JniArgumentValue ((t == null) ? IntPtr.Zero : ((global::Java.Lang.Throwable) t).Handle);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_s);
				global::System.GC.KeepAlive (t);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine']/class[@name='Config']/method[@name='writeFile' and count(parameter)=2 and parameter[1][@type='java.io.File'] and parameter[2][@type='java.lang.String']]"
		[Register ("writeFile", "(Ljava/io/File;Ljava/lang/String;)V", "")]
		public static unsafe void WriteFile (global::Java.IO.File? file, string? str)
		{
			const string __id = "writeFile.(Ljava/io/File;Ljava/lang/String;)V";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((file == null) ? IntPtr.Zero : ((global::Java.Lang.Object) file).Handle);
				__args [1] = new JniArgumentValue (native_str);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
				global::System.GC.KeepAlive (file);
			}
		}

	}
}
