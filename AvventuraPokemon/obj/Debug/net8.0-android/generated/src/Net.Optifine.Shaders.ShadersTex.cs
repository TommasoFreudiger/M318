//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Net.Optifine.Shaders {

	// Metadata.xml XPath class reference: path="/api/package[@name='net.optifine.shaders']/class[@name='ShadersTex']"
	[global::Android.Runtime.Register ("net/optifine/shaders/ShadersTex", DoNotGenerateAcw=true)]
	public partial class ShadersTex : global::Java.Lang.Object {

		// Metadata.xml XPath field reference: path="/api/package[@name='net.optifine.shaders']/class[@name='ShadersTex']/field[@name='byteBuffer']"
		[Register ("byteBuffer")]
		public static global::Java.Nio.ByteBuffer? ByteBuffer {
			get {
				const string __id = "byteBuffer.Ljava/nio/ByteBuffer;";

				var __v = _members.StaticFields.GetObjectValue (__id);
				return global::Java.Lang.Object.GetObject<global::Java.Nio.ByteBuffer> (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "byteBuffer.Ljava/nio/ByteBuffer;";

				IntPtr native_value = global::Android.Runtime.JNIEnv.ToLocalJniHandle (value);
				try {
					_members.StaticFields.SetValue (__id, new JniObjectReference (native_value));
				} finally {
					global::Android.Runtime.JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}

		// Metadata.xml XPath field reference: path="/api/package[@name='net.optifine.shaders']/class[@name='ShadersTex']/field[@name='defBaseTexColor']"
		[Register ("defBaseTexColor")]
		public const int DefBaseTexColor = (int) 0;

		// Metadata.xml XPath field reference: path="/api/package[@name='net.optifine.shaders']/class[@name='ShadersTex']/field[@name='defNormTexColor']"
		[Register ("defNormTexColor")]
		public const int DefNormTexColor = (int) -8421377;

		// Metadata.xml XPath field reference: path="/api/package[@name='net.optifine.shaders']/class[@name='ShadersTex']/field[@name='defSpecTexColor']"
		[Register ("defSpecTexColor")]
		public const int DefSpecTexColor = (int) 0;

		// Metadata.xml XPath field reference: path="/api/package[@name='net.optifine.shaders']/class[@name='ShadersTex']/field[@name='initialBufferSize']"
		[Register ("initialBufferSize")]
		public const int InitialBufferSize = (int) 1048576;


		// Metadata.xml XPath field reference: path="/api/package[@name='net.optifine.shaders']/class[@name='ShadersTex']/field[@name='intArray']"
		[Register ("intArray")]
		public static IList<int>? IntArray {
			get {
				const string __id = "intArray.[I";

				var __v = _members.StaticFields.GetObjectValue (__id);
				return global::Android.Runtime.JavaArray<int>.FromJniHandle (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "intArray.[I";

				IntPtr native_value = global::Android.Runtime.JavaArray<int>.ToLocalJniHandle (value);
				try {
					_members.StaticFields.SetValue (__id, new JniObjectReference (native_value));
				} finally {
					global::Android.Runtime.JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='net.optifine.shaders']/class[@name='ShadersTex']/field[@name='intBuffer']"
		[Register ("intBuffer")]
		public static global::Java.Nio.IntBuffer? IntBuffer {
			get {
				const string __id = "intBuffer.Ljava/nio/IntBuffer;";

				var __v = _members.StaticFields.GetObjectValue (__id);
				return global::Java.Lang.Object.GetObject<global::Java.Nio.IntBuffer> (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "intBuffer.Ljava/nio/IntBuffer;";

				IntPtr native_value = global::Android.Runtime.JNIEnv.ToLocalJniHandle (value);
				try {
					_members.StaticFields.SetValue (__id, new JniObjectReference (native_value));
				} finally {
					global::Android.Runtime.JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='net.optifine.shaders']/class[@name='ShadersTex']/field[@name='multiTexMap']"
		[Register ("multiTexMap")]
		public static global::System.Collections.IDictionary? MultiTexMap {
			get {
				const string __id = "multiTexMap.Ljava/util/Map;";

				var __v = _members.StaticFields.GetObjectValue (__id);
				return global::Android.Runtime.JavaDictionary.FromJniHandle (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "multiTexMap.Ljava/util/Map;";

				IntPtr native_value = global::Android.Runtime.JavaDictionary.ToLocalJniHandle (value);
				try {
					_members.StaticFields.SetValue (__id, new JniObjectReference (native_value));
				} finally {
					JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}

		static readonly JniPeerMembers _members = new XAPeerMembers ("net/optifine/shaders/ShadersTex", typeof (ShadersTex));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected ShadersTex (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='net.optifine.shaders']/class[@name='ShadersTex']/constructor[@name='ShadersTex' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe ShadersTex () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.shaders']/class[@name='ShadersTex']/method[@name='bindNSTextures' and count(parameter)=5 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='boolean'] and parameter[4][@type='boolean'] and parameter[5][@type='boolean']]"
		[Register ("bindNSTextures", "(IIZZZ)V", "")]
		public static unsafe void BindNSTextures (int normTex, int specTex, bool normalBlend, bool specularBlend, bool mipmaps)
		{
			const string __id = "bindNSTextures.(IIZZZ)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [5];
				__args [0] = new JniArgumentValue (normTex);
				__args [1] = new JniArgumentValue (specTex);
				__args [2] = new JniArgumentValue (normalBlend);
				__args [3] = new JniArgumentValue (specularBlend);
				__args [4] = new JniArgumentValue (mipmaps);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.shaders']/class[@name='ShadersTex']/method[@name='bindNSTextures' and count(parameter)=1 and parameter[1][@type='net.optifine.shaders.MultiTexID']]"
		[Register ("bindNSTextures", "(Lnet/optifine/shaders/MultiTexID;)V", "")]
		public static unsafe void BindNSTextures (global::Net.Optifine.Shaders.MultiTexID? multiTex)
		{
			const string __id = "bindNSTextures.(Lnet/optifine/shaders/MultiTexID;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((multiTex == null) ? IntPtr.Zero : ((global::Java.Lang.Object) multiTex).Handle);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				global::System.GC.KeepAlive (multiTex);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.shaders']/class[@name='ShadersTex']/method[@name='bindTexture' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("bindTexture", "(I)V", "")]
		public static unsafe void BindTexture (int id)
		{
			const string __id = "bindTexture.(I)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (id);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.shaders']/class[@name='ShadersTex']/method[@name='bindTextures' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("bindTextures", "(I)V", "")]
		public static unsafe void BindTextures (int baseTex)
		{
			const string __id = "bindTextures.(I)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (baseTex);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.shaders']/class[@name='ShadersTex']/method[@name='bindTextures' and count(parameter)=3 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		[Register ("bindTextures", "(III)V", "")]
		public static unsafe void BindTextures (int baseTex, int normTex, int specTex)
		{
			const string __id = "bindTextures.(III)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (baseTex);
				__args [1] = new JniArgumentValue (normTex);
				__args [2] = new JniArgumentValue (specTex);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.shaders']/class[@name='ShadersTex']/method[@name='bindTextures' and count(parameter)=4 and parameter[1][@type='net.optifine.shaders.MultiTexID'] and parameter[2][@type='boolean'] and parameter[3][@type='boolean'] and parameter[4][@type='boolean']]"
		[Register ("bindTextures", "(Lnet/optifine/shaders/MultiTexID;ZZZ)V", "")]
		public static unsafe void BindTextures (global::Net.Optifine.Shaders.MultiTexID? multiTex, bool normalBlend, bool specularBlend, bool mipmaps)
		{
			const string __id = "bindTextures.(Lnet/optifine/shaders/MultiTexID;ZZZ)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue ((multiTex == null) ? IntPtr.Zero : ((global::Java.Lang.Object) multiTex).Handle);
				__args [1] = new JniArgumentValue (normalBlend);
				__args [2] = new JniArgumentValue (specularBlend);
				__args [3] = new JniArgumentValue (mipmaps);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				global::System.GC.KeepAlive (multiTex);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.shaders']/class[@name='ShadersTex']/method[@name='blend4Alpha' and count(parameter)=4 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='int']]"
		[Register ("blend4Alpha", "(IIII)I", "")]
		public static unsafe int Blend4Alpha (int c0, int c1, int c2, int c3)
		{
			const string __id = "blend4Alpha.(IIII)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (c0);
				__args [1] = new JniArgumentValue (c1);
				__args [2] = new JniArgumentValue (c2);
				__args [3] = new JniArgumentValue (c3);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.shaders']/class[@name='ShadersTex']/method[@name='blend4Simple' and count(parameter)=4 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='int']]"
		[Register ("blend4Simple", "(IIII)I", "")]
		public static unsafe int Blend4Simple (int c0, int c1, int c2, int c3)
		{
			const string __id = "blend4Simple.(IIII)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (c0);
				__args [1] = new JniArgumentValue (c1);
				__args [2] = new JniArgumentValue (c2);
				__args [3] = new JniArgumentValue (c3);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.shaders']/class[@name='ShadersTex']/method[@name='blendColor' and count(parameter)=3 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		[Register ("blendColor", "(III)I", "")]
		public static unsafe int BlendColor (int color1, int color2, int factor1)
		{
			const string __id = "blendColor.(III)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (color1);
				__args [1] = new JniArgumentValue (color2);
				__args [2] = new JniArgumentValue (factor1);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.shaders']/class[@name='ShadersTex']/method[@name='createAIntImage' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("createAIntImage", "(I)[I", "")]
		public static unsafe int[]? CreateAIntImage (int size)
		{
			const string __id = "createAIntImage.(I)[I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (size);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (int[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (int));
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.shaders']/class[@name='ShadersTex']/method[@name='createAIntImage' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='int']]"
		[Register ("createAIntImage", "(II)[I", "")]
		public static unsafe int[]? CreateAIntImage (int size, int color)
		{
			const string __id = "createAIntImage.(II)[I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (size);
				__args [1] = new JniArgumentValue (color);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (int[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (int));
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.shaders']/class[@name='ShadersTex']/method[@name='fillIntBuffer' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='int']]"
		[Register ("fillIntBuffer", "(II)Ljava/nio/IntBuffer;", "")]
		public static unsafe global::Java.Nio.IntBuffer? FillIntBuffer (int size, int value)
		{
			const string __id = "fillIntBuffer.(II)Ljava/nio/IntBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (size);
				__args [1] = new JniArgumentValue (value);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Lang.Object.GetObject<global::Java.Nio.IntBuffer> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.shaders']/class[@name='ShadersTex']/method[@name='genMipmapAlpha' and count(parameter)=4 and parameter[1][@type='int[]'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='int']]"
		[Register ("genMipmapAlpha", "([IIII)V", "")]
		public static unsafe void GenMipmapAlpha (int[]? aint, int offset, int width, int height)
		{
			const string __id = "genMipmapAlpha.([IIII)V";
			IntPtr native_aint = JNIEnv.NewArray (aint);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (native_aint);
				__args [1] = new JniArgumentValue (offset);
				__args [2] = new JniArgumentValue (width);
				__args [3] = new JniArgumentValue (height);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (aint != null) {
					JNIEnv.CopyArray (native_aint, aint);
					JNIEnv.DeleteLocalRef (native_aint);
				}
				global::System.GC.KeepAlive (aint);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.shaders']/class[@name='ShadersTex']/method[@name='genMipmapSimple' and count(parameter)=4 and parameter[1][@type='int[]'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='int']]"
		[Register ("genMipmapSimple", "([IIII)V", "")]
		public static unsafe void GenMipmapSimple (int[]? aint, int offset, int width, int height)
		{
			const string __id = "genMipmapSimple.([IIII)V";
			IntPtr native_aint = JNIEnv.NewArray (aint);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (native_aint);
				__args [1] = new JniArgumentValue (offset);
				__args [2] = new JniArgumentValue (width);
				__args [3] = new JniArgumentValue (height);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (aint != null) {
					JNIEnv.CopyArray (native_aint, aint);
					JNIEnv.DeleteLocalRef (native_aint);
				}
				global::System.GC.KeepAlive (aint);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.shaders']/class[@name='ShadersTex']/method[@name='genMipmapsSimple' and count(parameter)=3 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='int[][]']]"
		[Register ("genMipmapsSimple", "(II[[I)[[I", "")]
		public static unsafe int[][]? GenMipmapsSimple (int maxLevel, int width, int[][]? data)
		{
			const string __id = "genMipmapsSimple.(II[[I)[[I";
			IntPtr native_data = JNIEnv.NewArray (data);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (maxLevel);
				__args [1] = new JniArgumentValue (width);
				__args [2] = new JniArgumentValue (native_data);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (int[][]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (int[]));
			} finally {
				if (data != null) {
					JNIEnv.CopyArray (native_data, data);
					JNIEnv.DeleteLocalRef (native_data);
				}
				global::System.GC.KeepAlive (data);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.shaders']/class[@name='ShadersTex']/method[@name='getFrameTexData' and count(parameter)=4 and parameter[1][@type='int[][]'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='int']]"
		[Register ("getFrameTexData", "([[IIII)[[I", "")]
		public static unsafe int[][]? GetFrameTexData (int[][]? src, int width, int height, int frameIndex)
		{
			const string __id = "getFrameTexData.([[IIII)[[I";
			IntPtr native_src = JNIEnv.NewArray (src);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (native_src);
				__args [1] = new JniArgumentValue (width);
				__args [2] = new JniArgumentValue (height);
				__args [3] = new JniArgumentValue (frameIndex);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (int[][]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (int[]));
			} finally {
				if (src != null) {
					JNIEnv.CopyArray (native_src, src);
					JNIEnv.DeleteLocalRef (native_src);
				}
				global::System.GC.KeepAlive (src);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.shaders']/class[@name='ShadersTex']/method[@name='getIntArray' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("getIntArray", "(I)[I", "")]
		public static unsafe int[]? GetIntArray (int size)
		{
			const string __id = "getIntArray.(I)[I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (size);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (int[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (int));
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.shaders']/class[@name='ShadersTex']/method[@name='getIntBuffer' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("getIntBuffer", "(I)Ljava/nio/IntBuffer;", "")]
		public static unsafe global::Java.Nio.IntBuffer? GetIntBuffer (int size)
		{
			const string __id = "getIntBuffer.(I)Ljava/nio/IntBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (size);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Lang.Object.GetObject<global::Java.Nio.IntBuffer> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.shaders']/class[@name='ShadersTex']/method[@name='isSemiTransparent' and count(parameter)=3 and parameter[1][@type='int[]'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		[Register ("isSemiTransparent", "([III)Z", "")]
		public static unsafe bool IsSemiTransparent (int[]? aint, int width, int height)
		{
			const string __id = "isSemiTransparent.([III)Z";
			IntPtr native_aint = JNIEnv.NewArray (aint);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_aint);
				__args [1] = new JniArgumentValue (width);
				__args [2] = new JniArgumentValue (height);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				if (aint != null) {
					JNIEnv.CopyArray (native_aint, aint);
					JNIEnv.DeleteLocalRef (native_aint);
				}
				global::System.GC.KeepAlive (aint);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.shaders']/class[@name='ShadersTex']/method[@name='log2' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("log2", "(I)I", "")]
		public static unsafe int Log2 (int x)
		{
			const string __id = "log2.(I)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (x);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.shaders']/class[@name='ShadersTex']/method[@name='mergeImage' and count(parameter)=4 and parameter[1][@type='int[]'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='int']]"
		[Register ("mergeImage", "([IIII)V", "")]
		public static unsafe void MergeImage (int[]? aint, int dstoff, int srcoff, int size)
		{
			const string __id = "mergeImage.([IIII)V";
			IntPtr native_aint = JNIEnv.NewArray (aint);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (native_aint);
				__args [1] = new JniArgumentValue (dstoff);
				__args [2] = new JniArgumentValue (srcoff);
				__args [3] = new JniArgumentValue (size);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (aint != null) {
					JNIEnv.CopyArray (native_aint, aint);
					JNIEnv.DeleteLocalRef (native_aint);
				}
				global::System.GC.KeepAlive (aint);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.shaders']/class[@name='ShadersTex']/method[@name='roundUpPOT' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("roundUpPOT", "(I)I", "")]
		public static unsafe int RoundUpPOT (int x)
		{
			const string __id = "roundUpPOT.(I)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (x);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.shaders']/class[@name='ShadersTex']/method[@name='updateDynTexSubImage1' and count(parameter)=6 and parameter[1][@type='int[]'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='int'] and parameter[5][@type='int'] and parameter[6][@type='int']]"
		[Register ("updateDynTexSubImage1", "([IIIIII)V", "")]
		public static unsafe void UpdateDynTexSubImage1 (int[]? src, int width, int height, int posX, int posY, int page)
		{
			const string __id = "updateDynTexSubImage1.([IIIIII)V";
			IntPtr native_src = JNIEnv.NewArray (src);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [6];
				__args [0] = new JniArgumentValue (native_src);
				__args [1] = new JniArgumentValue (width);
				__args [2] = new JniArgumentValue (height);
				__args [3] = new JniArgumentValue (posX);
				__args [4] = new JniArgumentValue (posY);
				__args [5] = new JniArgumentValue (page);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (src != null) {
					JNIEnv.CopyArray (native_src, src);
					JNIEnv.DeleteLocalRef (native_src);
				}
				global::System.GC.KeepAlive (src);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.shaders']/class[@name='ShadersTex']/method[@name='updateSubImage' and count(parameter)=8 and parameter[1][@type='net.optifine.shaders.MultiTexID'] and parameter[2][@type='int[]'] and parameter[3][@type='int'] and parameter[4][@type='int'] and parameter[5][@type='int'] and parameter[6][@type='int'] and parameter[7][@type='boolean'] and parameter[8][@type='boolean']]"
		[Register ("updateSubImage", "(Lnet/optifine/shaders/MultiTexID;[IIIIIZZ)V", "")]
		public static unsafe void UpdateSubImage (global::Net.Optifine.Shaders.MultiTexID? multiTex, int[]? src, int width, int height, int posX, int posY, bool linear, bool clamp)
		{
			const string __id = "updateSubImage.(Lnet/optifine/shaders/MultiTexID;[IIIIIZZ)V";
			IntPtr native_src = JNIEnv.NewArray (src);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [8];
				__args [0] = new JniArgumentValue ((multiTex == null) ? IntPtr.Zero : ((global::Java.Lang.Object) multiTex).Handle);
				__args [1] = new JniArgumentValue (native_src);
				__args [2] = new JniArgumentValue (width);
				__args [3] = new JniArgumentValue (height);
				__args [4] = new JniArgumentValue (posX);
				__args [5] = new JniArgumentValue (posY);
				__args [6] = new JniArgumentValue (linear);
				__args [7] = new JniArgumentValue (clamp);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (src != null) {
					JNIEnv.CopyArray (native_src, src);
					JNIEnv.DeleteLocalRef (native_src);
				}
				global::System.GC.KeepAlive (multiTex);
				global::System.GC.KeepAlive (src);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.shaders']/class[@name='ShadersTex']/method[@name='updateSubTex1' and count(parameter)=5 and parameter[1][@type='int[]'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='int'] and parameter[5][@type='int']]"
		[Register ("updateSubTex1", "([IIIII)V", "")]
		public static unsafe void UpdateSubTex1 (int[]? src, int width, int height, int posX, int posY)
		{
			const string __id = "updateSubTex1.([IIIII)V";
			IntPtr native_src = JNIEnv.NewArray (src);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [5];
				__args [0] = new JniArgumentValue (native_src);
				__args [1] = new JniArgumentValue (width);
				__args [2] = new JniArgumentValue (height);
				__args [3] = new JniArgumentValue (posX);
				__args [4] = new JniArgumentValue (posY);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (src != null) {
					JNIEnv.CopyArray (native_src, src);
					JNIEnv.DeleteLocalRef (native_src);
				}
				global::System.GC.KeepAlive (src);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.shaders']/class[@name='ShadersTex']/method[@name='updateTextureMinMagFilter' and count(parameter)=0]"
		[Register ("updateTextureMinMagFilter", "()V", "")]
		public static unsafe void UpdateTextureMinMagFilter ()
		{
			const string __id = "updateTextureMinMagFilter.()V";
			try {
				_members.StaticMethods.InvokeVoidMethod (__id, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.shaders']/class[@name='ShadersTex']/method[@name='uploadTexSub1' and count(parameter)=6 and parameter[1][@type='int[][]'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='int'] and parameter[5][@type='int'] and parameter[6][@type='int']]"
		[Register ("uploadTexSub1", "([[IIIIII)V", "")]
		public static unsafe void UploadTexSub1 (int[][]? src, int width, int height, int posX, int posY, int page)
		{
			const string __id = "uploadTexSub1.([[IIIIII)V";
			IntPtr native_src = JNIEnv.NewArray (src);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [6];
				__args [0] = new JniArgumentValue (native_src);
				__args [1] = new JniArgumentValue (width);
				__args [2] = new JniArgumentValue (height);
				__args [3] = new JniArgumentValue (posX);
				__args [4] = new JniArgumentValue (posY);
				__args [5] = new JniArgumentValue (page);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (src != null) {
					JNIEnv.CopyArray (native_src, src);
					JNIEnv.DeleteLocalRef (native_src);
				}
				global::System.GC.KeepAlive (src);
			}
		}

	}
}
