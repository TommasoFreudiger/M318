//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Net.Optifine.Shaders.Config {

	// Metadata.xml XPath class reference: path="/api/package[@name='net.optifine.shaders.config']/class[@name='ShaderPackParser']"
	[global::Android.Runtime.Register ("net/optifine/shaders/config/ShaderPackParser", DoNotGenerateAcw=true)]
	public partial class ShaderPackParser : global::Java.Lang.Object {

		// Metadata.xml XPath field reference: path="/api/package[@name='net.optifine.shaders.config']/class[@name='ShaderPackParser']/field[@name='PATTERN_INCLUDE']"
		[Register ("PATTERN_INCLUDE")]
		public static global::Java.Util.Regex.Pattern? PatternInclude {
			get {
				const string __id = "PATTERN_INCLUDE.Ljava/util/regex/Pattern;";

				var __v = _members.StaticFields.GetObjectValue (__id);
				return global::Java.Lang.Object.GetObject<global::Java.Util.Regex.Pattern> (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='net.optifine.shaders.config']/class[@name='ShaderPackParser']/field[@name='PATTERN_VERSION']"
		[Register ("PATTERN_VERSION")]
		public static global::Java.Util.Regex.Pattern? PatternVersion {
			get {
				const string __id = "PATTERN_VERSION.Ljava/util/regex/Pattern;";

				var __v = _members.StaticFields.GetObjectValue (__id);
				return global::Java.Lang.Object.GetObject<global::Java.Util.Regex.Pattern> (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
		}

		static readonly JniPeerMembers _members = new XAPeerMembers ("net/optifine/shaders/config/ShaderPackParser", typeof (ShaderPackParser));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected ShaderPackParser (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='net.optifine.shaders.config']/class[@name='ShaderPackParser']/constructor[@name='ShaderPackParser' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe ShaderPackParser () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.shaders.config']/class[@name='ShaderPackParser']/method[@name='addMacros' and count(parameter)=2 and parameter[1][@type='net.optifine.util.LineBuffer'] and parameter[2][@type='int']]"
		[Register ("addMacros", "(Lnet/optifine/util/LineBuffer;I)Lnet/optifine/util/LineBuffer;", "")]
		public static unsafe global::Net.Optifine.Util.LineBuffer? AddMacros (global::Net.Optifine.Util.LineBuffer? reader, int fileIndex)
		{
			const string __id = "addMacros.(Lnet/optifine/util/LineBuffer;I)Lnet/optifine/util/LineBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((reader == null) ? IntPtr.Zero : ((global::Java.Lang.Object) reader).Handle);
				__args [1] = new JniArgumentValue (fileIndex);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LineBuffer> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				global::System.GC.KeepAlive (reader);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.shaders.config']/class[@name='ShaderPackParser']/method[@name='loadShader' and count(parameter)=7 and parameter[1][@type='net.optifine.shaders.Program'] and parameter[2][@type='net.optifine.shaders.config.ShaderType'] and parameter[3][@type='java.io.InputStream'] and parameter[4][@type='java.lang.String'] and parameter[5][@type='net.optifine.shaders.IShaderPack'] and parameter[6][@type='java.util.List&lt;java.lang.String&gt;'] and parameter[7][@type='net.optifine.shaders.config.ShaderOption[]']]"
		[Register ("loadShader", "(Lnet/optifine/shaders/Program;Lnet/optifine/shaders/config/ShaderType;Ljava/io/InputStream;Ljava/lang/String;Lnet/optifine/shaders/IShaderPack;Ljava/util/List;[Lnet/optifine/shaders/config/ShaderOption;)Lnet/optifine/util/LineBuffer;", "")]
		public static unsafe global::Net.Optifine.Util.LineBuffer? LoadShader (global::Net.Optifine.Shaders.Program? program, global::Net.Optifine.Shaders.Config.ShaderType? shaderType, global::System.IO.Stream? @is, string? filePath, global::Net.Optifine.Shaders.IShaderPack? shaderPack, global::System.Collections.Generic.IList<string>? listFiles, global::Net.Optifine.Shaders.Config.ShaderOption[]? activeOptions)
		{
			const string __id = "loadShader.(Lnet/optifine/shaders/Program;Lnet/optifine/shaders/config/ShaderType;Ljava/io/InputStream;Ljava/lang/String;Lnet/optifine/shaders/IShaderPack;Ljava/util/List;[Lnet/optifine/shaders/config/ShaderOption;)Lnet/optifine/util/LineBuffer;";
			IntPtr native__is = global::Android.Runtime.InputStreamAdapter.ToLocalJniHandle (@is);
			IntPtr native_filePath = JNIEnv.NewString ((string?)filePath);
			IntPtr native_listFiles = global::Android.Runtime.JavaList<string>.ToLocalJniHandle (listFiles);
			IntPtr native_activeOptions = JNIEnv.NewArray (activeOptions);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [7];
				__args [0] = new JniArgumentValue ((program == null) ? IntPtr.Zero : ((global::Java.Lang.Object) program).Handle);
				__args [1] = new JniArgumentValue ((shaderType == null) ? IntPtr.Zero : ((global::Java.Lang.Object) shaderType).Handle);
				__args [2] = new JniArgumentValue (native__is);
				__args [3] = new JniArgumentValue (native_filePath);
				__args [4] = new JniArgumentValue ((shaderPack == null) ? IntPtr.Zero : ((global::Java.Lang.Object) shaderPack).Handle);
				__args [5] = new JniArgumentValue (native_listFiles);
				__args [6] = new JniArgumentValue (native_activeOptions);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LineBuffer> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native__is);
				JNIEnv.DeleteLocalRef (native_filePath);
				JNIEnv.DeleteLocalRef (native_listFiles);
				if (activeOptions != null) {
					JNIEnv.CopyArray (native_activeOptions, activeOptions);
					JNIEnv.DeleteLocalRef (native_activeOptions);
				}
				global::System.GC.KeepAlive (program);
				global::System.GC.KeepAlive (shaderType);
				global::System.GC.KeepAlive (@is);
				global::System.GC.KeepAlive (shaderPack);
				global::System.GC.KeepAlive (listFiles);
				global::System.GC.KeepAlive (activeOptions);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.shaders.config']/class[@name='ShaderPackParser']/method[@name='parseAlphaState' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("parseAlphaState", "(Ljava/lang/String;)Lnet/optifine/render/GlAlphaState;", "")]
		public static unsafe global::Net.Optifine.Render.GlAlphaState? ParseAlphaState (string? str)
		{
			const string __id = "parseAlphaState.(Ljava/lang/String;)Lnet/optifine/render/GlAlphaState;";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_str);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Lang.Object.GetObject<global::Net.Optifine.Render.GlAlphaState> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.shaders.config']/class[@name='ShaderPackParser']/method[@name='parseAlphaStates' and count(parameter)=1 and parameter[1][@type='java.util.Properties']]"
		[Register ("parseAlphaStates", "(Ljava/util/Properties;)V", "")]
		public static unsafe void ParseAlphaStates (global::Java.Util.Properties? props)
		{
			const string __id = "parseAlphaStates.(Ljava/util/Properties;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((props == null) ? IntPtr.Zero : ((global::Java.Lang.Object) props).Handle);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				global::System.GC.KeepAlive (props);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.shaders.config']/class[@name='ShaderPackParser']/method[@name='parseBlendState' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("parseBlendState", "(Ljava/lang/String;)Lnet/optifine/render/GlBlendState;", "")]
		public static unsafe global::Net.Optifine.Render.GlBlendState? ParseBlendState (string? str)
		{
			const string __id = "parseBlendState.(Ljava/lang/String;)Lnet/optifine/render/GlBlendState;";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_str);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Lang.Object.GetObject<global::Net.Optifine.Render.GlBlendState> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.shaders.config']/class[@name='ShaderPackParser']/method[@name='parseBlendStates' and count(parameter)=1 and parameter[1][@type='java.util.Properties']]"
		[Register ("parseBlendStates", "(Ljava/util/Properties;)V", "")]
		public static unsafe void ParseBlendStates (global::Java.Util.Properties? props)
		{
			const string __id = "parseBlendStates.(Ljava/util/Properties;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((props == null) ? IntPtr.Zero : ((global::Java.Lang.Object) props).Handle);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				global::System.GC.KeepAlive (props);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.shaders.config']/class[@name='ShaderPackParser']/method[@name='parseBufferSizes' and count(parameter)=2 and parameter[1][@type='java.util.Properties'] and parameter[2][@type='int']]"
		[Register ("parseBufferSizes", "(Ljava/util/Properties;I)[Lnet/optifine/util/DynamicDimension;", "")]
		public static unsafe global::Net.Optifine.Util.DynamicDimension[]? ParseBufferSizes (global::Java.Util.Properties? props, int countBuffers)
		{
			const string __id = "parseBufferSizes.(Ljava/util/Properties;I)[Lnet/optifine/util/DynamicDimension;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((props == null) ? IntPtr.Zero : ((global::Java.Lang.Object) props).Handle);
				__args [1] = new JniArgumentValue (countBuffers);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (global::Net.Optifine.Util.DynamicDimension[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (global::Net.Optifine.Util.DynamicDimension));
			} finally {
				global::System.GC.KeepAlive (props);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.shaders.config']/class[@name='ShaderPackParser']/method[@name='parseBuffersFlip' and count(parameter)=1 and parameter[1][@type='java.util.Properties']]"
		[Register ("parseBuffersFlip", "(Ljava/util/Properties;)V", "")]
		public static unsafe void ParseBuffersFlip (global::Java.Util.Properties? props)
		{
			const string __id = "parseBuffersFlip.(Ljava/util/Properties;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((props == null) ? IntPtr.Zero : ((global::Java.Lang.Object) props).Handle);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				global::System.GC.KeepAlive (props);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.shaders.config']/class[@name='ShaderPackParser']/method[@name='parseCustomUniforms' and count(parameter)=1 and parameter[1][@type='java.util.Properties']]"
		[Register ("parseCustomUniforms", "(Ljava/util/Properties;)Lnet/optifine/shaders/uniform/CustomUniforms;", "")]
		public static unsafe global::Net.Optifine.Shaders.Uniform.CustomUniforms? ParseCustomUniforms (global::Java.Util.Properties? props)
		{
			const string __id = "parseCustomUniforms.(Ljava/util/Properties;)Lnet/optifine/shaders/uniform/CustomUniforms;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((props == null) ? IntPtr.Zero : ((global::Java.Lang.Object) props).Handle);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Lang.Object.GetObject<global::Net.Optifine.Shaders.Uniform.CustomUniforms> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				global::System.GC.KeepAlive (props);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.shaders.config']/class[@name='ShaderPackParser']/method[@name='parseGuiScreens' and count(parameter)=3 and parameter[1][@type='java.util.Properties'] and parameter[2][@type='net.optifine.shaders.config.ShaderProfile[]'] and parameter[3][@type='net.optifine.shaders.config.ShaderOption[]']]"
		[Register ("parseGuiScreens", "(Ljava/util/Properties;[Lnet/optifine/shaders/config/ShaderProfile;[Lnet/optifine/shaders/config/ShaderOption;)Ljava/util/Map;", "")]
		public static unsafe global::System.Collections.Generic.IDictionary<string, global::Net.Optifine.Shaders.Config.ScreenShaderOptions>? ParseGuiScreens (global::Java.Util.Properties? props, global::Net.Optifine.Shaders.Config.ShaderProfile[]? shaderProfiles, global::Net.Optifine.Shaders.Config.ShaderOption[]? shaderOptions)
		{
			const string __id = "parseGuiScreens.(Ljava/util/Properties;[Lnet/optifine/shaders/config/ShaderProfile;[Lnet/optifine/shaders/config/ShaderOption;)Ljava/util/Map;";
			IntPtr native_shaderProfiles = JNIEnv.NewArray (shaderProfiles);
			IntPtr native_shaderOptions = JNIEnv.NewArray (shaderOptions);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue ((props == null) ? IntPtr.Zero : ((global::Java.Lang.Object) props).Handle);
				__args [1] = new JniArgumentValue (native_shaderProfiles);
				__args [2] = new JniArgumentValue (native_shaderOptions);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Android.Runtime.JavaDictionary<string, global::Net.Optifine.Shaders.Config.ScreenShaderOptions>.FromJniHandle (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (shaderProfiles != null) {
					JNIEnv.CopyArray (native_shaderProfiles, shaderProfiles);
					JNIEnv.DeleteLocalRef (native_shaderProfiles);
				}
				if (shaderOptions != null) {
					JNIEnv.CopyArray (native_shaderOptions, shaderOptions);
					JNIEnv.DeleteLocalRef (native_shaderOptions);
				}
				global::System.GC.KeepAlive (props);
				global::System.GC.KeepAlive (shaderProfiles);
				global::System.GC.KeepAlive (shaderOptions);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.shaders.config']/class[@name='ShaderPackParser']/method[@name='parseOptionSliders' and count(parameter)=2 and parameter[1][@type='java.util.Properties'] and parameter[2][@type='net.optifine.shaders.config.ShaderOption[]']]"
		[Register ("parseOptionSliders", "(Ljava/util/Properties;[Lnet/optifine/shaders/config/ShaderOption;)Ljava/util/Set;", "")]
		public static unsafe global::System.Collections.Generic.ICollection<string>? ParseOptionSliders (global::Java.Util.Properties? props, global::Net.Optifine.Shaders.Config.ShaderOption[]? shaderOptions)
		{
			const string __id = "parseOptionSliders.(Ljava/util/Properties;[Lnet/optifine/shaders/config/ShaderOption;)Ljava/util/Set;";
			IntPtr native_shaderOptions = JNIEnv.NewArray (shaderOptions);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((props == null) ? IntPtr.Zero : ((global::Java.Lang.Object) props).Handle);
				__args [1] = new JniArgumentValue (native_shaderOptions);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Android.Runtime.JavaSet<string>.FromJniHandle (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (shaderOptions != null) {
					JNIEnv.CopyArray (native_shaderOptions, shaderOptions);
					JNIEnv.DeleteLocalRef (native_shaderOptions);
				}
				global::System.GC.KeepAlive (props);
				global::System.GC.KeepAlive (shaderOptions);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.shaders.config']/class[@name='ShaderPackParser']/method[@name='parseProfiles' and count(parameter)=2 and parameter[1][@type='java.util.Properties'] and parameter[2][@type='net.optifine.shaders.config.ShaderOption[]']]"
		[Register ("parseProfiles", "(Ljava/util/Properties;[Lnet/optifine/shaders/config/ShaderOption;)[Lnet/optifine/shaders/config/ShaderProfile;", "")]
		public static unsafe global::Net.Optifine.Shaders.Config.ShaderProfile[]? ParseProfiles (global::Java.Util.Properties? props, global::Net.Optifine.Shaders.Config.ShaderOption[]? shaderOptions)
		{
			const string __id = "parseProfiles.(Ljava/util/Properties;[Lnet/optifine/shaders/config/ShaderOption;)[Lnet/optifine/shaders/config/ShaderProfile;";
			IntPtr native_shaderOptions = JNIEnv.NewArray (shaderOptions);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((props == null) ? IntPtr.Zero : ((global::Java.Lang.Object) props).Handle);
				__args [1] = new JniArgumentValue (native_shaderOptions);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (global::Net.Optifine.Shaders.Config.ShaderProfile[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (global::Net.Optifine.Shaders.Config.ShaderProfile));
			} finally {
				if (shaderOptions != null) {
					JNIEnv.CopyArray (native_shaderOptions, shaderOptions);
					JNIEnv.DeleteLocalRef (native_shaderOptions);
				}
				global::System.GC.KeepAlive (props);
				global::System.GC.KeepAlive (shaderOptions);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.shaders.config']/class[@name='ShaderPackParser']/method[@name='parseProgramConditions' and count(parameter)=2 and parameter[1][@type='java.util.Properties'] and parameter[2][@type='net.optifine.shaders.config.ShaderOption[]']]"
		[Register ("parseProgramConditions", "(Ljava/util/Properties;[Lnet/optifine/shaders/config/ShaderOption;)Ljava/util/Map;", "")]
		public static unsafe global::System.Collections.Generic.IDictionary<string, global::Net.Optifine.Expr.IExpressionBool>? ParseProgramConditions (global::Java.Util.Properties? props, global::Net.Optifine.Shaders.Config.ShaderOption[]? shaderOptions)
		{
			const string __id = "parseProgramConditions.(Ljava/util/Properties;[Lnet/optifine/shaders/config/ShaderOption;)Ljava/util/Map;";
			IntPtr native_shaderOptions = JNIEnv.NewArray (shaderOptions);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((props == null) ? IntPtr.Zero : ((global::Java.Lang.Object) props).Handle);
				__args [1] = new JniArgumentValue (native_shaderOptions);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Android.Runtime.JavaDictionary<string, global::Net.Optifine.Expr.IExpressionBool>.FromJniHandle (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (shaderOptions != null) {
					JNIEnv.CopyArray (native_shaderOptions, shaderOptions);
					JNIEnv.DeleteLocalRef (native_shaderOptions);
				}
				global::System.GC.KeepAlive (props);
				global::System.GC.KeepAlive (shaderOptions);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.shaders.config']/class[@name='ShaderPackParser']/method[@name='parseRenderScales' and count(parameter)=1 and parameter[1][@type='java.util.Properties']]"
		[Register ("parseRenderScales", "(Ljava/util/Properties;)V", "")]
		public static unsafe void ParseRenderScales (global::Java.Util.Properties? props)
		{
			const string __id = "parseRenderScales.(Ljava/util/Properties;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((props == null) ? IntPtr.Zero : ((global::Java.Lang.Object) props).Handle);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				global::System.GC.KeepAlive (props);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.shaders.config']/class[@name='ShaderPackParser']/method[@name='parseShaderPackOptions' and count(parameter)=3 and parameter[1][@type='net.optifine.shaders.IShaderPack'] and parameter[2][@type='java.lang.String[]'] and parameter[3][@type='java.util.List&lt;java.lang.Integer&gt;']]"
		[Register ("parseShaderPackOptions", "(Lnet/optifine/shaders/IShaderPack;[Ljava/lang/String;Ljava/util/List;)[Lnet/optifine/shaders/config/ShaderOption;", "")]
		public static unsafe global::Net.Optifine.Shaders.Config.ShaderOption[]? ParseShaderPackOptions (global::Net.Optifine.Shaders.IShaderPack? shaderPack, string[]? programNames, global::System.Collections.Generic.IList<global::Java.Lang.Integer>? listDimensions)
		{
			const string __id = "parseShaderPackOptions.(Lnet/optifine/shaders/IShaderPack;[Ljava/lang/String;Ljava/util/List;)[Lnet/optifine/shaders/config/ShaderOption;";
			IntPtr native_programNames = JNIEnv.NewArray (programNames);
			IntPtr native_listDimensions = global::Android.Runtime.JavaList<global::Java.Lang.Integer>.ToLocalJniHandle (listDimensions);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue ((shaderPack == null) ? IntPtr.Zero : ((global::Java.Lang.Object) shaderPack).Handle);
				__args [1] = new JniArgumentValue (native_programNames);
				__args [2] = new JniArgumentValue (native_listDimensions);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (global::Net.Optifine.Shaders.Config.ShaderOption[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (global::Net.Optifine.Shaders.Config.ShaderOption));
			} finally {
				if (programNames != null) {
					JNIEnv.CopyArray (native_programNames, programNames);
					JNIEnv.DeleteLocalRef (native_programNames);
				}
				JNIEnv.DeleteLocalRef (native_listDimensions);
				global::System.GC.KeepAlive (shaderPack);
				global::System.GC.KeepAlive (programNames);
				global::System.GC.KeepAlive (listDimensions);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.shaders.config']/class[@name='ShaderPackParser']/method[@name='remapTextureUnits' and count(parameter)=1 and parameter[1][@type='net.optifine.util.LineBuffer']]"
		[Register ("remapTextureUnits", "(Lnet/optifine/util/LineBuffer;)Lnet/optifine/util/LineBuffer;", "")]
		public static unsafe global::Net.Optifine.Util.LineBuffer? RemapTextureUnits (global::Net.Optifine.Util.LineBuffer? reader)
		{
			const string __id = "remapTextureUnits.(Lnet/optifine/util/LineBuffer;)Lnet/optifine/util/LineBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((reader == null) ? IntPtr.Zero : ((global::Java.Lang.Object) reader).Handle);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LineBuffer> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				global::System.GC.KeepAlive (reader);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.shaders.config']/class[@name='ShaderPackParser']/method[@name='resolveIncludes' and count(parameter)=6 and parameter[1][@type='net.optifine.util.LineBuffer'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='net.optifine.shaders.IShaderPack'] and parameter[4][@type='int'] and parameter[5][@type='java.util.List&lt;java.lang.String&gt;'] and parameter[6][@type='int']]"
		[Register ("resolveIncludes", "(Lnet/optifine/util/LineBuffer;Ljava/lang/String;Lnet/optifine/shaders/IShaderPack;ILjava/util/List;I)Lnet/optifine/util/LineBuffer;", "")]
		public static unsafe global::Net.Optifine.Util.LineBuffer? ResolveIncludes (global::Net.Optifine.Util.LineBuffer? reader, string? filePath, global::Net.Optifine.Shaders.IShaderPack? shaderPack, int fileIndex, global::System.Collections.Generic.IList<string>? listFiles, int includeLevel)
		{
			const string __id = "resolveIncludes.(Lnet/optifine/util/LineBuffer;Ljava/lang/String;Lnet/optifine/shaders/IShaderPack;ILjava/util/List;I)Lnet/optifine/util/LineBuffer;";
			IntPtr native_filePath = JNIEnv.NewString ((string?)filePath);
			IntPtr native_listFiles = global::Android.Runtime.JavaList<string>.ToLocalJniHandle (listFiles);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [6];
				__args [0] = new JniArgumentValue ((reader == null) ? IntPtr.Zero : ((global::Java.Lang.Object) reader).Handle);
				__args [1] = new JniArgumentValue (native_filePath);
				__args [2] = new JniArgumentValue ((shaderPack == null) ? IntPtr.Zero : ((global::Java.Lang.Object) shaderPack).Handle);
				__args [3] = new JniArgumentValue (fileIndex);
				__args [4] = new JniArgumentValue (native_listFiles);
				__args [5] = new JniArgumentValue (includeLevel);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LineBuffer> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_filePath);
				JNIEnv.DeleteLocalRef (native_listFiles);
				global::System.GC.KeepAlive (reader);
				global::System.GC.KeepAlive (shaderPack);
				global::System.GC.KeepAlive (listFiles);
			}
		}

	}
}
