//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Net.Optifine.Util {

	// Metadata.xml XPath class reference: path="/api/package[@name='net.optifine.util']/class[@name='LineBuffer']"
	[global::Android.Runtime.Register ("net/optifine/util/LineBuffer", DoNotGenerateAcw=true)]
	public partial class LineBuffer : global::Java.Lang.Object, global::Java.Lang.IIterable {
		// Metadata.xml XPath class reference: path="/api/package[@name='net.optifine.util']/class[@name='LineBuffer.Itr']"
		[global::Android.Runtime.Register ("net/optifine/util/LineBuffer$Itr", DoNotGenerateAcw=true)]
		public partial class Itr : global::Java.Lang.Object, global::Java.Util.IIterator {
			static readonly JniPeerMembers _members = new XAPeerMembers ("net/optifine/util/LineBuffer$Itr", typeof (Itr));

			internal static IntPtr class_ref {
				get { return _members.JniPeerType.PeerReference.Handle; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			public override global::Java.Interop.JniPeerMembers JniPeerMembers {
				get { return _members; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			protected override IntPtr ThresholdClass {
				get { return _members.JniPeerType.PeerReference.Handle; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			protected override global::System.Type ThresholdType {
				get { return _members.ManagedPeerType; }
			}

			protected Itr (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
			{
			}

			// Metadata.xml XPath constructor reference: path="/api/package[@name='net.optifine.util']/class[@name='LineBuffer.Itr']/constructor[@name='LineBuffer.Itr' and count(parameter)=1 and parameter[1][@type='net.optifine.util.LineBuffer']]"
			[Register (".ctor", "(Lnet/optifine/util/LineBuffer;)V", "")]
			public unsafe Itr (global::Net.Optifine.Util.LineBuffer? __self) : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
			{
				string __id = "(L" + global::Android.Runtime.JNIEnv.GetJniName (GetType ().DeclaringType!) + ";)V";

				if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
					return;

				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue ((__self == null) ? IntPtr.Zero : ((global::Java.Lang.Object) __self).Handle);
					var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
					SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
					_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
				} finally {
					global::System.GC.KeepAlive (__self);
				}
			}

			static Delegate? cb_hasNext;
#pragma warning disable 0169
			static Delegate GetHasNextHandler ()
			{
				if (cb_hasNext == null)
					cb_hasNext = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_Z (n_HasNext));
				return cb_hasNext;
			}

			static bool n_HasNext (IntPtr jnienv, IntPtr native__this)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LineBuffer.Itr> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
				return __this.HasNext;
			}
#pragma warning restore 0169

			public virtual unsafe bool HasNext {
				// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='LineBuffer.Itr']/method[@name='hasNext' and count(parameter)=0]"
				[Register ("hasNext", "()Z", "GetHasNextHandler")]
				get {
					const string __id = "hasNext.()Z";
					try {
						var __rm = _members.InstanceMethods.InvokeVirtualBooleanMethod (__id, this, null);
						return __rm;
					} finally {
					}
				}
			}

			static Delegate? cb_next;
#pragma warning disable 0169
			static Delegate GetNextHandler ()
			{
				if (cb_next == null)
					cb_next = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_L (n_Next));
				return cb_next;
			}

			static IntPtr n_Next (IntPtr jnienv, IntPtr native__this)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LineBuffer.Itr> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
				return JNIEnv.NewString (__this.Next ());
			}
#pragma warning restore 0169

			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='LineBuffer.Itr']/method[@name='next' and count(parameter)=0]"
			[Register ("next", "()Ljava/lang/String;", "GetNextHandler")]
			public virtual unsafe string? Next ()
			{
				const string __id = "next.()Ljava/lang/String;";
				try {
					var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
					return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}

		}

		static readonly JniPeerMembers _members = new XAPeerMembers ("net/optifine/util/LineBuffer", typeof (LineBuffer));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected LineBuffer (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='net.optifine.util']/class[@name='LineBuffer']/constructor[@name='LineBuffer' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe LineBuffer () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='net.optifine.util']/class[@name='LineBuffer']/constructor[@name='LineBuffer' and count(parameter)=1 and parameter[1][@type='java.lang.String[]']]"
		[Register (".ctor", "([Ljava/lang/String;)V", "")]
		public unsafe LineBuffer (string[]? linesArr) : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "([Ljava/lang/String;)V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			IntPtr native_linesArr = JNIEnv.NewArray (linesArr);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_linesArr);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
				if (linesArr != null) {
					JNIEnv.CopyArray (native_linesArr, linesArr);
					JNIEnv.DeleteLocalRef (native_linesArr);
				}
				global::System.GC.KeepAlive (linesArr);
			}
		}

		static Delegate? cb_add_Ljava_lang_String_;
#pragma warning disable 0169
		static Delegate GetAdd_Ljava_lang_String_Handler ()
		{
			if (cb_add_Ljava_lang_String_ == null)
				cb_add_Ljava_lang_String_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_Add_Ljava_lang_String_));
			return cb_add_Ljava_lang_String_;
		}

		static void n_Add_Ljava_lang_String_ (IntPtr jnienv, IntPtr native__this, IntPtr native_line)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LineBuffer> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var line = JNIEnv.GetString (native_line, JniHandleOwnership.DoNotTransfer);
			__this.Add (line);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='LineBuffer']/method[@name='add' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("add", "(Ljava/lang/String;)V", "GetAdd_Ljava_lang_String_Handler")]
		public virtual unsafe void Add (string? line)
		{
			const string __id = "add.(Ljava/lang/String;)V";
			IntPtr native_line = JNIEnv.NewString ((string?)line);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_line);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_line);
			}
		}

		static Delegate? cb_add_arrayLjava_lang_String_;
#pragma warning disable 0169
		static Delegate GetAdd_arrayLjava_lang_String_Handler ()
		{
			if (cb_add_arrayLjava_lang_String_ == null)
				cb_add_arrayLjava_lang_String_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_Add_arrayLjava_lang_String_));
			return cb_add_arrayLjava_lang_String_;
		}

		static void n_Add_arrayLjava_lang_String_ (IntPtr jnienv, IntPtr native__this, IntPtr native_ls)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LineBuffer> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var ls = (string[]?) JNIEnv.GetArray (native_ls, JniHandleOwnership.DoNotTransfer, typeof (string));
			__this.Add (ls);
			if (ls != null)
				JNIEnv.CopyArray (ls, native_ls);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='LineBuffer']/method[@name='add' and count(parameter)=1 and parameter[1][@type='java.lang.String[]']]"
		[Register ("add", "([Ljava/lang/String;)V", "GetAdd_arrayLjava_lang_String_Handler")]
		public virtual unsafe void Add (string[]? ls)
		{
			const string __id = "add.([Ljava/lang/String;)V";
			IntPtr native_ls = JNIEnv.NewArray (ls);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_ls);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				if (ls != null) {
					JNIEnv.CopyArray (native_ls, ls);
					JNIEnv.DeleteLocalRef (native_ls);
				}
				global::System.GC.KeepAlive (ls);
			}
		}

		static Delegate? cb_contains_Ljava_lang_String_;
#pragma warning disable 0169
		static Delegate GetContains_Ljava_lang_String_Handler ()
		{
			if (cb_contains_Ljava_lang_String_ == null)
				cb_contains_Ljava_lang_String_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_Z (n_Contains_Ljava_lang_String_));
			return cb_contains_Ljava_lang_String_;
		}

		static bool n_Contains_Ljava_lang_String_ (IntPtr jnienv, IntPtr native__this, IntPtr native_line)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LineBuffer> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var line = JNIEnv.GetString (native_line, JniHandleOwnership.DoNotTransfer);
			bool __ret = __this.Contains (line);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='LineBuffer']/method[@name='contains' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("contains", "(Ljava/lang/String;)Z", "GetContains_Ljava_lang_String_Handler")]
		public virtual unsafe bool Contains (string? line)
		{
			const string __id = "contains.(Ljava/lang/String;)Z";
			IntPtr native_line = JNIEnv.NewString ((string?)line);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_line);
				var __rm = _members.InstanceMethods.InvokeVirtualBooleanMethod (__id, this, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_line);
			}
		}

		static Delegate? cb_get_I;
#pragma warning disable 0169
		static Delegate GetGet_IHandler ()
		{
			if (cb_get_I == null)
				cb_get_I = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPI_L (n_Get_I));
			return cb_get_I;
		}

		static IntPtr n_Get_I (IntPtr jnienv, IntPtr native__this, int index)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LineBuffer> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			return JNIEnv.NewString (__this.Get (index));
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='LineBuffer']/method[@name='get' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("get", "(I)Ljava/lang/String;", "GetGet_IHandler")]
		public virtual unsafe string? Get (int index)
		{
			const string __id = "get.(I)Ljava/lang/String;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (index);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
			}
		}

		static Delegate? cb_getLines;
#pragma warning disable 0169
		static Delegate GetGetLinesHandler ()
		{
			if (cb_getLines == null)
				cb_getLines = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_L (n_GetLines));
			return cb_getLines;
		}

		static IntPtr n_GetLines (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LineBuffer> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			return JNIEnv.NewArray (__this.GetLines ());
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='LineBuffer']/method[@name='getLines' and count(parameter)=0]"
		[Register ("getLines", "()[Ljava/lang/String;", "GetGetLinesHandler")]
		public virtual unsafe string[]? GetLines ()
		{
			const string __id = "getLines.()[Ljava/lang/String;";
			try {
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
				return (string[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (string));
			} finally {
			}
		}

		static Delegate? cb_indexMatch_Ljava_util_regex_Pattern_;
#pragma warning disable 0169
		static Delegate GetIndexMatch_Ljava_util_regex_Pattern_Handler ()
		{
			if (cb_indexMatch_Ljava_util_regex_Pattern_ == null)
				cb_indexMatch_Ljava_util_regex_Pattern_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_I (n_IndexMatch_Ljava_util_regex_Pattern_));
			return cb_indexMatch_Ljava_util_regex_Pattern_;
		}

		static int n_IndexMatch_Ljava_util_regex_Pattern_ (IntPtr jnienv, IntPtr native__this, IntPtr native_regexp)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LineBuffer> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var regexp = global::Java.Lang.Object.GetObject<global::Java.Util.Regex.Pattern> (native_regexp, JniHandleOwnership.DoNotTransfer);
			int __ret = __this.IndexMatch (regexp);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='LineBuffer']/method[@name='indexMatch' and count(parameter)=1 and parameter[1][@type='java.util.regex.Pattern']]"
		[Register ("indexMatch", "(Ljava/util/regex/Pattern;)I", "GetIndexMatch_Ljava_util_regex_Pattern_Handler")]
		public virtual unsafe int IndexMatch (global::Java.Util.Regex.Pattern? regexp)
		{
			const string __id = "indexMatch.(Ljava/util/regex/Pattern;)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((regexp == null) ? IntPtr.Zero : ((global::Java.Lang.Object) regexp).Handle);
				var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (regexp);
			}
		}

		static Delegate? cb_indexMatch_Ljava_util_regex_Pattern_I;
#pragma warning disable 0169
		static Delegate GetIndexMatch_Ljava_util_regex_Pattern_IHandler ()
		{
			if (cb_indexMatch_Ljava_util_regex_Pattern_I == null)
				cb_indexMatch_Ljava_util_regex_Pattern_I = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPLI_I (n_IndexMatch_Ljava_util_regex_Pattern_I));
			return cb_indexMatch_Ljava_util_regex_Pattern_I;
		}

		static int n_IndexMatch_Ljava_util_regex_Pattern_I (IntPtr jnienv, IntPtr native__this, IntPtr native_regexp, int startIndex)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LineBuffer> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var regexp = global::Java.Lang.Object.GetObject<global::Java.Util.Regex.Pattern> (native_regexp, JniHandleOwnership.DoNotTransfer);
			int __ret = __this.IndexMatch (regexp, startIndex);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='LineBuffer']/method[@name='indexMatch' and count(parameter)=2 and parameter[1][@type='java.util.regex.Pattern'] and parameter[2][@type='int']]"
		[Register ("indexMatch", "(Ljava/util/regex/Pattern;I)I", "GetIndexMatch_Ljava_util_regex_Pattern_IHandler")]
		public virtual unsafe int IndexMatch (global::Java.Util.Regex.Pattern? regexp, int startIndex)
		{
			const string __id = "indexMatch.(Ljava/util/regex/Pattern;I)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((regexp == null) ? IntPtr.Zero : ((global::Java.Lang.Object) regexp).Handle);
				__args [1] = new JniArgumentValue (startIndex);
				var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (regexp);
			}
		}

		static Delegate? cb_indexMatch_Ljava_util_regex_Pattern_IZ;
#pragma warning disable 0169
		static Delegate GetIndexMatch_Ljava_util_regex_Pattern_IZHandler ()
		{
			if (cb_indexMatch_Ljava_util_regex_Pattern_IZ == null)
				cb_indexMatch_Ljava_util_regex_Pattern_IZ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPLIZ_I (n_IndexMatch_Ljava_util_regex_Pattern_IZ));
			return cb_indexMatch_Ljava_util_regex_Pattern_IZ;
		}

		static int n_IndexMatch_Ljava_util_regex_Pattern_IZ (IntPtr jnienv, IntPtr native__this, IntPtr native_regexp, int startIndex, bool match)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LineBuffer> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var regexp = global::Java.Lang.Object.GetObject<global::Java.Util.Regex.Pattern> (native_regexp, JniHandleOwnership.DoNotTransfer);
			int __ret = __this.IndexMatch (regexp, startIndex, match);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='LineBuffer']/method[@name='indexMatch' and count(parameter)=3 and parameter[1][@type='java.util.regex.Pattern'] and parameter[2][@type='int'] and parameter[3][@type='boolean']]"
		[Register ("indexMatch", "(Ljava/util/regex/Pattern;IZ)I", "GetIndexMatch_Ljava_util_regex_Pattern_IZHandler")]
		public virtual unsafe int IndexMatch (global::Java.Util.Regex.Pattern? regexp, int startIndex, bool match)
		{
			const string __id = "indexMatch.(Ljava/util/regex/Pattern;IZ)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue ((regexp == null) ? IntPtr.Zero : ((global::Java.Lang.Object) regexp).Handle);
				__args [1] = new JniArgumentValue (startIndex);
				__args [2] = new JniArgumentValue (match);
				var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (regexp);
			}
		}

		static Delegate? cb_indexNonMatch_Ljava_util_regex_Pattern_;
#pragma warning disable 0169
		static Delegate GetIndexNonMatch_Ljava_util_regex_Pattern_Handler ()
		{
			if (cb_indexNonMatch_Ljava_util_regex_Pattern_ == null)
				cb_indexNonMatch_Ljava_util_regex_Pattern_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_I (n_IndexNonMatch_Ljava_util_regex_Pattern_));
			return cb_indexNonMatch_Ljava_util_regex_Pattern_;
		}

		static int n_IndexNonMatch_Ljava_util_regex_Pattern_ (IntPtr jnienv, IntPtr native__this, IntPtr native_regexp)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LineBuffer> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var regexp = global::Java.Lang.Object.GetObject<global::Java.Util.Regex.Pattern> (native_regexp, JniHandleOwnership.DoNotTransfer);
			int __ret = __this.IndexNonMatch (regexp);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='LineBuffer']/method[@name='indexNonMatch' and count(parameter)=1 and parameter[1][@type='java.util.regex.Pattern']]"
		[Register ("indexNonMatch", "(Ljava/util/regex/Pattern;)I", "GetIndexNonMatch_Ljava_util_regex_Pattern_Handler")]
		public virtual unsafe int IndexNonMatch (global::Java.Util.Regex.Pattern? regexp)
		{
			const string __id = "indexNonMatch.(Ljava/util/regex/Pattern;)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((regexp == null) ? IntPtr.Zero : ((global::Java.Lang.Object) regexp).Handle);
				var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (regexp);
			}
		}

		static Delegate? cb_indexNonMatch_Ljava_util_regex_Pattern_I;
#pragma warning disable 0169
		static Delegate GetIndexNonMatch_Ljava_util_regex_Pattern_IHandler ()
		{
			if (cb_indexNonMatch_Ljava_util_regex_Pattern_I == null)
				cb_indexNonMatch_Ljava_util_regex_Pattern_I = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPLI_I (n_IndexNonMatch_Ljava_util_regex_Pattern_I));
			return cb_indexNonMatch_Ljava_util_regex_Pattern_I;
		}

		static int n_IndexNonMatch_Ljava_util_regex_Pattern_I (IntPtr jnienv, IntPtr native__this, IntPtr native_regexp, int startIndex)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LineBuffer> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var regexp = global::Java.Lang.Object.GetObject<global::Java.Util.Regex.Pattern> (native_regexp, JniHandleOwnership.DoNotTransfer);
			int __ret = __this.IndexNonMatch (regexp, startIndex);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='LineBuffer']/method[@name='indexNonMatch' and count(parameter)=2 and parameter[1][@type='java.util.regex.Pattern'] and parameter[2][@type='int']]"
		[Register ("indexNonMatch", "(Ljava/util/regex/Pattern;I)I", "GetIndexNonMatch_Ljava_util_regex_Pattern_IHandler")]
		public virtual unsafe int IndexNonMatch (global::Java.Util.Regex.Pattern? regexp, int startIndex)
		{
			const string __id = "indexNonMatch.(Ljava/util/regex/Pattern;I)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((regexp == null) ? IntPtr.Zero : ((global::Java.Lang.Object) regexp).Handle);
				__args [1] = new JniArgumentValue (startIndex);
				var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (regexp);
			}
		}

		static Delegate? cb_insert_ILjava_lang_String_;
#pragma warning disable 0169
		static Delegate GetInsert_ILjava_lang_String_Handler ()
		{
			if (cb_insert_ILjava_lang_String_ == null)
				cb_insert_ILjava_lang_String_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPIL_V (n_Insert_ILjava_lang_String_));
			return cb_insert_ILjava_lang_String_;
		}

		static void n_Insert_ILjava_lang_String_ (IntPtr jnienv, IntPtr native__this, int index, IntPtr native_line)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LineBuffer> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var line = JNIEnv.GetString (native_line, JniHandleOwnership.DoNotTransfer);
			__this.Insert (index, line);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='LineBuffer']/method[@name='insert' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='java.lang.String']]"
		[Register ("insert", "(ILjava/lang/String;)V", "GetInsert_ILjava_lang_String_Handler")]
		public virtual unsafe void Insert (int index, string? line)
		{
			const string __id = "insert.(ILjava/lang/String;)V";
			IntPtr native_line = JNIEnv.NewString ((string?)line);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (index);
				__args [1] = new JniArgumentValue (native_line);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_line);
			}
		}

		static Delegate? cb_insert_IarrayLjava_lang_String_;
#pragma warning disable 0169
		static Delegate GetInsert_IarrayLjava_lang_String_Handler ()
		{
			if (cb_insert_IarrayLjava_lang_String_ == null)
				cb_insert_IarrayLjava_lang_String_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPIL_V (n_Insert_IarrayLjava_lang_String_));
			return cb_insert_IarrayLjava_lang_String_;
		}

		static void n_Insert_IarrayLjava_lang_String_ (IntPtr jnienv, IntPtr native__this, int index, IntPtr native_ls)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LineBuffer> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var ls = (string[]?) JNIEnv.GetArray (native_ls, JniHandleOwnership.DoNotTransfer, typeof (string));
			__this.Insert (index, ls);
			if (ls != null)
				JNIEnv.CopyArray (ls, native_ls);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='LineBuffer']/method[@name='insert' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='java.lang.String[]']]"
		[Register ("insert", "(I[Ljava/lang/String;)V", "GetInsert_IarrayLjava_lang_String_Handler")]
		public virtual unsafe void Insert (int index, string[]? ls)
		{
			const string __id = "insert.(I[Ljava/lang/String;)V";
			IntPtr native_ls = JNIEnv.NewArray (ls);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (index);
				__args [1] = new JniArgumentValue (native_ls);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				if (ls != null) {
					JNIEnv.CopyArray (native_ls, ls);
					JNIEnv.DeleteLocalRef (native_ls);
				}
				global::System.GC.KeepAlive (ls);
			}
		}

		static Delegate? cb_iterator;
#pragma warning disable 0169
		static Delegate GetIteratorHandler ()
		{
			if (cb_iterator == null)
				cb_iterator = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_L (n_Iterator));
			return cb_iterator;
		}

		static IntPtr n_Iterator (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LineBuffer> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			return JNIEnv.ToLocalJniHandle (__this.Iterator ());
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='LineBuffer']/method[@name='iterator' and count(parameter)=0]"
		[Register ("iterator", "()Ljava/util/Iterator;", "GetIteratorHandler")]
		public virtual unsafe global::Java.Util.IIterator? Iterator ()
		{
			const string __id = "iterator.()Ljava/util/Iterator;";
			try {
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
				return global::Java.Lang.Object.GetObject<global::Java.Util.IIterator> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
			}
		}

		static Delegate? cb_lastIndexMatch_Ljava_util_regex_Pattern_;
#pragma warning disable 0169
		static Delegate GetLastIndexMatch_Ljava_util_regex_Pattern_Handler ()
		{
			if (cb_lastIndexMatch_Ljava_util_regex_Pattern_ == null)
				cb_lastIndexMatch_Ljava_util_regex_Pattern_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_I (n_LastIndexMatch_Ljava_util_regex_Pattern_));
			return cb_lastIndexMatch_Ljava_util_regex_Pattern_;
		}

		static int n_LastIndexMatch_Ljava_util_regex_Pattern_ (IntPtr jnienv, IntPtr native__this, IntPtr native_regexp)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LineBuffer> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var regexp = global::Java.Lang.Object.GetObject<global::Java.Util.Regex.Pattern> (native_regexp, JniHandleOwnership.DoNotTransfer);
			int __ret = __this.LastIndexMatch (regexp);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='LineBuffer']/method[@name='lastIndexMatch' and count(parameter)=1 and parameter[1][@type='java.util.regex.Pattern']]"
		[Register ("lastIndexMatch", "(Ljava/util/regex/Pattern;)I", "GetLastIndexMatch_Ljava_util_regex_Pattern_Handler")]
		public virtual unsafe int LastIndexMatch (global::Java.Util.Regex.Pattern? regexp)
		{
			const string __id = "lastIndexMatch.(Ljava/util/regex/Pattern;)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((regexp == null) ? IntPtr.Zero : ((global::Java.Lang.Object) regexp).Handle);
				var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (regexp);
			}
		}

		static Delegate? cb_lastIndexMatch_Ljava_util_regex_Pattern_I;
#pragma warning disable 0169
		static Delegate GetLastIndexMatch_Ljava_util_regex_Pattern_IHandler ()
		{
			if (cb_lastIndexMatch_Ljava_util_regex_Pattern_I == null)
				cb_lastIndexMatch_Ljava_util_regex_Pattern_I = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPLI_I (n_LastIndexMatch_Ljava_util_regex_Pattern_I));
			return cb_lastIndexMatch_Ljava_util_regex_Pattern_I;
		}

		static int n_LastIndexMatch_Ljava_util_regex_Pattern_I (IntPtr jnienv, IntPtr native__this, IntPtr native_regexp, int startIndex)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LineBuffer> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var regexp = global::Java.Lang.Object.GetObject<global::Java.Util.Regex.Pattern> (native_regexp, JniHandleOwnership.DoNotTransfer);
			int __ret = __this.LastIndexMatch (regexp, startIndex);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='LineBuffer']/method[@name='lastIndexMatch' and count(parameter)=2 and parameter[1][@type='java.util.regex.Pattern'] and parameter[2][@type='int']]"
		[Register ("lastIndexMatch", "(Ljava/util/regex/Pattern;I)I", "GetLastIndexMatch_Ljava_util_regex_Pattern_IHandler")]
		public virtual unsafe int LastIndexMatch (global::Java.Util.Regex.Pattern? regexp, int startIndex)
		{
			const string __id = "lastIndexMatch.(Ljava/util/regex/Pattern;I)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((regexp == null) ? IntPtr.Zero : ((global::Java.Lang.Object) regexp).Handle);
				__args [1] = new JniArgumentValue (startIndex);
				var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (regexp);
			}
		}

		static Delegate? cb_lastIndexMatch_Ljava_util_regex_Pattern_IZ;
#pragma warning disable 0169
		static Delegate GetLastIndexMatch_Ljava_util_regex_Pattern_IZHandler ()
		{
			if (cb_lastIndexMatch_Ljava_util_regex_Pattern_IZ == null)
				cb_lastIndexMatch_Ljava_util_regex_Pattern_IZ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPLIZ_I (n_LastIndexMatch_Ljava_util_regex_Pattern_IZ));
			return cb_lastIndexMatch_Ljava_util_regex_Pattern_IZ;
		}

		static int n_LastIndexMatch_Ljava_util_regex_Pattern_IZ (IntPtr jnienv, IntPtr native__this, IntPtr native_regexp, int startIndex, bool match)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LineBuffer> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var regexp = global::Java.Lang.Object.GetObject<global::Java.Util.Regex.Pattern> (native_regexp, JniHandleOwnership.DoNotTransfer);
			int __ret = __this.LastIndexMatch (regexp, startIndex, match);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='LineBuffer']/method[@name='lastIndexMatch' and count(parameter)=3 and parameter[1][@type='java.util.regex.Pattern'] and parameter[2][@type='int'] and parameter[3][@type='boolean']]"
		[Register ("lastIndexMatch", "(Ljava/util/regex/Pattern;IZ)I", "GetLastIndexMatch_Ljava_util_regex_Pattern_IZHandler")]
		public virtual unsafe int LastIndexMatch (global::Java.Util.Regex.Pattern? regexp, int startIndex, bool match)
		{
			const string __id = "lastIndexMatch.(Ljava/util/regex/Pattern;IZ)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue ((regexp == null) ? IntPtr.Zero : ((global::Java.Lang.Object) regexp).Handle);
				__args [1] = new JniArgumentValue (startIndex);
				__args [2] = new JniArgumentValue (match);
				var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (regexp);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='LineBuffer']/method[@name='readAll' and count(parameter)=1 and parameter[1][@type='java.io.Reader']]"
		[Register ("readAll", "(Ljava/io/Reader;)Lnet/optifine/util/LineBuffer;", "")]
		public static unsafe global::Net.Optifine.Util.LineBuffer? ReadAll (global::Java.IO.Reader? reader)
		{
			const string __id = "readAll.(Ljava/io/Reader;)Lnet/optifine/util/LineBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((reader == null) ? IntPtr.Zero : ((global::Java.Lang.Object) reader).Handle);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LineBuffer> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				global::System.GC.KeepAlive (reader);
			}
		}

		static Delegate? cb_remove_I;
#pragma warning disable 0169
		static Delegate GetRemove_IHandler ()
		{
			if (cb_remove_I == null)
				cb_remove_I = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPI_L (n_Remove_I));
			return cb_remove_I;
		}

		static IntPtr n_Remove_I (IntPtr jnienv, IntPtr native__this, int index)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LineBuffer> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			return JNIEnv.NewString (__this.Remove (index));
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='LineBuffer']/method[@name='remove' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("remove", "(I)Ljava/lang/String;", "GetRemove_IHandler")]
		public virtual unsafe string? Remove (int index)
		{
			const string __id = "remove.(I)Ljava/lang/String;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (index);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
			}
		}

		static Delegate? cb_remove_Ljava_lang_String_;
#pragma warning disable 0169
		static Delegate GetRemove_Ljava_lang_String_Handler ()
		{
			if (cb_remove_Ljava_lang_String_ == null)
				cb_remove_Ljava_lang_String_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_Z (n_Remove_Ljava_lang_String_));
			return cb_remove_Ljava_lang_String_;
		}

		static bool n_Remove_Ljava_lang_String_ (IntPtr jnienv, IntPtr native__this, IntPtr native_lineRemove)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LineBuffer> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var lineRemove = JNIEnv.GetString (native_lineRemove, JniHandleOwnership.DoNotTransfer);
			bool __ret = __this.Remove (lineRemove);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='LineBuffer']/method[@name='remove' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("remove", "(Ljava/lang/String;)Z", "GetRemove_Ljava_lang_String_Handler")]
		public virtual unsafe bool Remove (string? lineRemove)
		{
			const string __id = "remove.(Ljava/lang/String;)Z";
			IntPtr native_lineRemove = JNIEnv.NewString ((string?)lineRemove);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_lineRemove);
				var __rm = _members.InstanceMethods.InvokeVirtualBooleanMethod (__id, this, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_lineRemove);
			}
		}

		static Delegate? cb_set_ILjava_lang_String_;
#pragma warning disable 0169
		static Delegate GetSet_ILjava_lang_String_Handler ()
		{
			if (cb_set_ILjava_lang_String_ == null)
				cb_set_ILjava_lang_String_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPIL_L (n_Set_ILjava_lang_String_));
			return cb_set_ILjava_lang_String_;
		}

		static IntPtr n_Set_ILjava_lang_String_ (IntPtr jnienv, IntPtr native__this, int index, IntPtr native_line)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LineBuffer> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var line = JNIEnv.GetString (native_line, JniHandleOwnership.DoNotTransfer);
			IntPtr __ret = JNIEnv.NewString (__this.Set (index, line));
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='LineBuffer']/method[@name='set' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='java.lang.String']]"
		[Register ("set", "(ILjava/lang/String;)Ljava/lang/String;", "GetSet_ILjava_lang_String_Handler")]
		public virtual unsafe string? Set (int index, string? line)
		{
			const string __id = "set.(ILjava/lang/String;)Ljava/lang/String;";
			IntPtr native_line = JNIEnv.NewString ((string?)line);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (index);
				__args [1] = new JniArgumentValue (native_line);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_line);
			}
		}

		static Delegate? cb_size;
#pragma warning disable 0169
		static Delegate GetSizeHandler ()
		{
			if (cb_size == null)
				cb_size = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_I (n_Size));
			return cb_size;
		}

		static int n_Size (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LineBuffer> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			return __this.Size ();
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='LineBuffer']/method[@name='size' and count(parameter)=0]"
		[Register ("size", "()I", "GetSizeHandler")]
		public virtual unsafe int Size ()
		{
			const string __id = "size.()I";
			try {
				var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, null);
				return __rm;
			} finally {
			}
		}

	}
}
