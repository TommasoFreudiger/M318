//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Net.Optifine.Reflect {

	// Metadata.xml XPath class reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorMethod']"
	[global::Android.Runtime.Register ("net/optifine/reflect/ReflectorMethod", DoNotGenerateAcw=true)]
	public partial class ReflectorMethod : global::Java.Lang.Object, global::Net.Optifine.Reflect.IResolvable {
		static readonly JniPeerMembers _members = new XAPeerMembers ("net/optifine/reflect/ReflectorMethod", typeof (ReflectorMethod));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected ReflectorMethod (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorMethod']/constructor[@name='ReflectorMethod' and count(parameter)=2 and parameter[1][@type='net.optifine.reflect.ReflectorClass'] and parameter[2][@type='java.lang.String']]"
		[Register (".ctor", "(Lnet/optifine/reflect/ReflectorClass;Ljava/lang/String;)V", "")]
		public unsafe ReflectorMethod (global::Net.Optifine.Reflect.ReflectorClass? reflectorClass, string? targetMethodName) : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "(Lnet/optifine/reflect/ReflectorClass;Ljava/lang/String;)V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			IntPtr native_targetMethodName = JNIEnv.NewString ((string?)targetMethodName);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((reflectorClass == null) ? IntPtr.Zero : ((global::Java.Lang.Object) reflectorClass).Handle);
				__args [1] = new JniArgumentValue (native_targetMethodName);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_targetMethodName);
				global::System.GC.KeepAlive (reflectorClass);
			}
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorMethod']/constructor[@name='ReflectorMethod' and count(parameter)=3 and parameter[1][@type='net.optifine.reflect.ReflectorClass'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='java.lang.Class[]']]"
		[Register (".ctor", "(Lnet/optifine/reflect/ReflectorClass;Ljava/lang/String;[Ljava/lang/Class;)V", "")]
		public unsafe ReflectorMethod (global::Net.Optifine.Reflect.ReflectorClass? reflectorClass, string? targetMethodName, global::Java.Lang.Class[]? targetMethodParameterTypes) : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "(Lnet/optifine/reflect/ReflectorClass;Ljava/lang/String;[Ljava/lang/Class;)V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			IntPtr native_targetMethodName = JNIEnv.NewString ((string?)targetMethodName);
			IntPtr native_targetMethodParameterTypes = JNIEnv.NewArray (targetMethodParameterTypes);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue ((reflectorClass == null) ? IntPtr.Zero : ((global::Java.Lang.Object) reflectorClass).Handle);
				__args [1] = new JniArgumentValue (native_targetMethodName);
				__args [2] = new JniArgumentValue (native_targetMethodParameterTypes);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_targetMethodName);
				if (targetMethodParameterTypes != null) {
					JNIEnv.CopyArray (native_targetMethodParameterTypes, targetMethodParameterTypes);
					JNIEnv.DeleteLocalRef (native_targetMethodParameterTypes);
				}
				global::System.GC.KeepAlive (reflectorClass);
				global::System.GC.KeepAlive (targetMethodParameterTypes);
			}
		}

		static Delegate? cb_getReturnType;
#pragma warning disable 0169
		static Delegate GetGetReturnTypeHandler ()
		{
			if (cb_getReturnType == null)
				cb_getReturnType = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_L (n_GetReturnType));
			return cb_getReturnType;
		}

		static IntPtr n_GetReturnType (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Reflect.ReflectorMethod> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			return JNIEnv.ToLocalJniHandle (__this.ReturnType);
		}
#pragma warning restore 0169

		public virtual unsafe global::Java.Lang.Class? ReturnType {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorMethod']/method[@name='getReturnType' and count(parameter)=0]"
			[Register ("getReturnType", "()Ljava/lang/Class;", "GetGetReturnTypeHandler")]
			get {
				const string __id = "getReturnType.()Ljava/lang/Class;";
				try {
					var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
					return global::Java.Lang.Object.GetObject<global::Java.Lang.Class> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
		}

		static Delegate? cb_getTargetMethod;
#pragma warning disable 0169
		static Delegate GetGetTargetMethodHandler ()
		{
			if (cb_getTargetMethod == null)
				cb_getTargetMethod = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_L (n_GetTargetMethod));
			return cb_getTargetMethod;
		}

		static IntPtr n_GetTargetMethod (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Reflect.ReflectorMethod> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			return JNIEnv.ToLocalJniHandle (__this.TargetMethod);
		}
#pragma warning restore 0169

		public virtual unsafe global::Java.Lang.Reflect.Method? TargetMethod {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorMethod']/method[@name='getTargetMethod' and count(parameter)=0]"
			[Register ("getTargetMethod", "()Ljava/lang/reflect/Method;", "GetGetTargetMethodHandler")]
			get {
				const string __id = "getTargetMethod.()Ljava/lang/reflect/Method;";
				try {
					var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
					return global::Java.Lang.Object.GetObject<global::Java.Lang.Reflect.Method> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
		}

		static Delegate? cb_call_Ljava_lang_Object_;
#pragma warning disable 0169
		static Delegate GetCall_Ljava_lang_Object_Handler ()
		{
			if (cb_call_Ljava_lang_Object_ == null)
				cb_call_Ljava_lang_Object_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_L (n_Call_Ljava_lang_Object_));
			return cb_call_Ljava_lang_Object_;
		}

		static IntPtr n_Call_Ljava_lang_Object_ (IntPtr jnienv, IntPtr native__this, IntPtr native_param)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Reflect.ReflectorMethod> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var param = global::Java.Lang.Object.GetObject<global::Java.Lang.Object> (native_param, JniHandleOwnership.DoNotTransfer);
			IntPtr __ret = JNIEnv.ToLocalJniHandle (__this.Call (param));
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorMethod']/method[@name='call' and count(parameter)=1 and parameter[1][@type='java.lang.Object']]"
		[Register ("call", "(Ljava/lang/Object;)Ljava/lang/Object;", "GetCall_Ljava_lang_Object_Handler")]
		public virtual unsafe global::Java.Lang.Object? Call (global::Java.Lang.Object? param)
		{
			const string __id = "call.(Ljava/lang/Object;)Ljava/lang/Object;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((param == null) ? IntPtr.Zero : ((global::Java.Lang.Object) param).Handle);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Lang.Object.GetObject<global::Java.Lang.Object> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				global::System.GC.KeepAlive (param);
			}
		}

		static Delegate? cb_call_arrayLjava_lang_Object_;
#pragma warning disable 0169
		static Delegate GetCall_arrayLjava_lang_Object_Handler ()
		{
			if (cb_call_arrayLjava_lang_Object_ == null)
				cb_call_arrayLjava_lang_Object_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_L (n_Call_arrayLjava_lang_Object_));
			return cb_call_arrayLjava_lang_Object_;
		}

		static IntPtr n_Call_arrayLjava_lang_Object_ (IntPtr jnienv, IntPtr native__this, IntPtr native__params)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Reflect.ReflectorMethod> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var @params = (global::Java.Lang.Object[]?) JNIEnv.GetArray (native__params, JniHandleOwnership.DoNotTransfer, typeof (global::Java.Lang.Object));
			IntPtr __ret = JNIEnv.ToLocalJniHandle (__this.Call (@params));
			if (@params != null)
				JNIEnv.CopyArray (@params, native__params);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorMethod']/method[@name='call' and count(parameter)=1 and parameter[1][@type='java.lang.Object...']]"
		[Register ("call", "([Ljava/lang/Object;)Ljava/lang/Object;", "GetCall_arrayLjava_lang_Object_Handler")]
		public virtual unsafe global::Java.Lang.Object? Call (params global::Java.Lang.Object[]? @params)
		{
			const string __id = "call.([Ljava/lang/Object;)Ljava/lang/Object;";
			IntPtr native__params = JNIEnv.NewArray (@params);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native__params);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Lang.Object.GetObject<global::Java.Lang.Object> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (@params != null) {
					JNIEnv.CopyArray (native__params, @params);
					JNIEnv.DeleteLocalRef (native__params);
				}
				global::System.GC.KeepAlive (@params);
			}
		}

		static Delegate? cb_callBoolean_Ljava_lang_Object_;
#pragma warning disable 0169
		static Delegate GetCallBoolean_Ljava_lang_Object_Handler ()
		{
			if (cb_callBoolean_Ljava_lang_Object_ == null)
				cb_callBoolean_Ljava_lang_Object_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_Z (n_CallBoolean_Ljava_lang_Object_));
			return cb_callBoolean_Ljava_lang_Object_;
		}

		static bool n_CallBoolean_Ljava_lang_Object_ (IntPtr jnienv, IntPtr native__this, IntPtr native_param)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Reflect.ReflectorMethod> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var param = global::Java.Lang.Object.GetObject<global::Java.Lang.Object> (native_param, JniHandleOwnership.DoNotTransfer);
			bool __ret = __this.CallBoolean (param);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorMethod']/method[@name='callBoolean' and count(parameter)=1 and parameter[1][@type='java.lang.Object']]"
		[Register ("callBoolean", "(Ljava/lang/Object;)Z", "GetCallBoolean_Ljava_lang_Object_Handler")]
		public virtual unsafe bool CallBoolean (global::Java.Lang.Object? param)
		{
			const string __id = "callBoolean.(Ljava/lang/Object;)Z";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((param == null) ? IntPtr.Zero : ((global::Java.Lang.Object) param).Handle);
				var __rm = _members.InstanceMethods.InvokeVirtualBooleanMethod (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (param);
			}
		}

		static Delegate? cb_callBoolean_arrayLjava_lang_Object_;
#pragma warning disable 0169
		static Delegate GetCallBoolean_arrayLjava_lang_Object_Handler ()
		{
			if (cb_callBoolean_arrayLjava_lang_Object_ == null)
				cb_callBoolean_arrayLjava_lang_Object_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_Z (n_CallBoolean_arrayLjava_lang_Object_));
			return cb_callBoolean_arrayLjava_lang_Object_;
		}

		static bool n_CallBoolean_arrayLjava_lang_Object_ (IntPtr jnienv, IntPtr native__this, IntPtr native__params)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Reflect.ReflectorMethod> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var @params = (global::Java.Lang.Object[]?) JNIEnv.GetArray (native__params, JniHandleOwnership.DoNotTransfer, typeof (global::Java.Lang.Object));
			bool __ret = __this.CallBoolean (@params);
			if (@params != null)
				JNIEnv.CopyArray (@params, native__params);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorMethod']/method[@name='callBoolean' and count(parameter)=1 and parameter[1][@type='java.lang.Object...']]"
		[Register ("callBoolean", "([Ljava/lang/Object;)Z", "GetCallBoolean_arrayLjava_lang_Object_Handler")]
		public virtual unsafe bool CallBoolean (params global::Java.Lang.Object[]? @params)
		{
			const string __id = "callBoolean.([Ljava/lang/Object;)Z";
			IntPtr native__params = JNIEnv.NewArray (@params);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native__params);
				var __rm = _members.InstanceMethods.InvokeVirtualBooleanMethod (__id, this, __args);
				return __rm;
			} finally {
				if (@params != null) {
					JNIEnv.CopyArray (native__params, @params);
					JNIEnv.DeleteLocalRef (native__params);
				}
				global::System.GC.KeepAlive (@params);
			}
		}

		static Delegate? cb_callDouble_Ljava_lang_Object_;
#pragma warning disable 0169
		static Delegate GetCallDouble_Ljava_lang_Object_Handler ()
		{
			if (cb_callDouble_Ljava_lang_Object_ == null)
				cb_callDouble_Ljava_lang_Object_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_D (n_CallDouble_Ljava_lang_Object_));
			return cb_callDouble_Ljava_lang_Object_;
		}

		static double n_CallDouble_Ljava_lang_Object_ (IntPtr jnienv, IntPtr native__this, IntPtr native_param)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Reflect.ReflectorMethod> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var param = global::Java.Lang.Object.GetObject<global::Java.Lang.Object> (native_param, JniHandleOwnership.DoNotTransfer);
			double __ret = __this.CallDouble (param);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorMethod']/method[@name='callDouble' and count(parameter)=1 and parameter[1][@type='java.lang.Object']]"
		[Register ("callDouble", "(Ljava/lang/Object;)D", "GetCallDouble_Ljava_lang_Object_Handler")]
		public virtual unsafe double CallDouble (global::Java.Lang.Object? param)
		{
			const string __id = "callDouble.(Ljava/lang/Object;)D";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((param == null) ? IntPtr.Zero : ((global::Java.Lang.Object) param).Handle);
				var __rm = _members.InstanceMethods.InvokeVirtualDoubleMethod (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (param);
			}
		}

		static Delegate? cb_callDouble_arrayLjava_lang_Object_;
#pragma warning disable 0169
		static Delegate GetCallDouble_arrayLjava_lang_Object_Handler ()
		{
			if (cb_callDouble_arrayLjava_lang_Object_ == null)
				cb_callDouble_arrayLjava_lang_Object_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_D (n_CallDouble_arrayLjava_lang_Object_));
			return cb_callDouble_arrayLjava_lang_Object_;
		}

		static double n_CallDouble_arrayLjava_lang_Object_ (IntPtr jnienv, IntPtr native__this, IntPtr native__params)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Reflect.ReflectorMethod> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var @params = (global::Java.Lang.Object[]?) JNIEnv.GetArray (native__params, JniHandleOwnership.DoNotTransfer, typeof (global::Java.Lang.Object));
			double __ret = __this.CallDouble (@params);
			if (@params != null)
				JNIEnv.CopyArray (@params, native__params);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorMethod']/method[@name='callDouble' and count(parameter)=1 and parameter[1][@type='java.lang.Object...']]"
		[Register ("callDouble", "([Ljava/lang/Object;)D", "GetCallDouble_arrayLjava_lang_Object_Handler")]
		public virtual unsafe double CallDouble (params global::Java.Lang.Object[]? @params)
		{
			const string __id = "callDouble.([Ljava/lang/Object;)D";
			IntPtr native__params = JNIEnv.NewArray (@params);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native__params);
				var __rm = _members.InstanceMethods.InvokeVirtualDoubleMethod (__id, this, __args);
				return __rm;
			} finally {
				if (@params != null) {
					JNIEnv.CopyArray (native__params, @params);
					JNIEnv.DeleteLocalRef (native__params);
				}
				global::System.GC.KeepAlive (@params);
			}
		}

		static Delegate? cb_callFloat_Ljava_lang_Object_;
#pragma warning disable 0169
		static Delegate GetCallFloat_Ljava_lang_Object_Handler ()
		{
			if (cb_callFloat_Ljava_lang_Object_ == null)
				cb_callFloat_Ljava_lang_Object_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_F (n_CallFloat_Ljava_lang_Object_));
			return cb_callFloat_Ljava_lang_Object_;
		}

		static float n_CallFloat_Ljava_lang_Object_ (IntPtr jnienv, IntPtr native__this, IntPtr native_param)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Reflect.ReflectorMethod> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var param = global::Java.Lang.Object.GetObject<global::Java.Lang.Object> (native_param, JniHandleOwnership.DoNotTransfer);
			float __ret = __this.CallFloat (param);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorMethod']/method[@name='callFloat' and count(parameter)=1 and parameter[1][@type='java.lang.Object']]"
		[Register ("callFloat", "(Ljava/lang/Object;)F", "GetCallFloat_Ljava_lang_Object_Handler")]
		public virtual unsafe float CallFloat (global::Java.Lang.Object? param)
		{
			const string __id = "callFloat.(Ljava/lang/Object;)F";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((param == null) ? IntPtr.Zero : ((global::Java.Lang.Object) param).Handle);
				var __rm = _members.InstanceMethods.InvokeVirtualSingleMethod (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (param);
			}
		}

		static Delegate? cb_callFloat_arrayLjava_lang_Object_;
#pragma warning disable 0169
		static Delegate GetCallFloat_arrayLjava_lang_Object_Handler ()
		{
			if (cb_callFloat_arrayLjava_lang_Object_ == null)
				cb_callFloat_arrayLjava_lang_Object_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_F (n_CallFloat_arrayLjava_lang_Object_));
			return cb_callFloat_arrayLjava_lang_Object_;
		}

		static float n_CallFloat_arrayLjava_lang_Object_ (IntPtr jnienv, IntPtr native__this, IntPtr native__params)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Reflect.ReflectorMethod> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var @params = (global::Java.Lang.Object[]?) JNIEnv.GetArray (native__params, JniHandleOwnership.DoNotTransfer, typeof (global::Java.Lang.Object));
			float __ret = __this.CallFloat (@params);
			if (@params != null)
				JNIEnv.CopyArray (@params, native__params);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorMethod']/method[@name='callFloat' and count(parameter)=1 and parameter[1][@type='java.lang.Object...']]"
		[Register ("callFloat", "([Ljava/lang/Object;)F", "GetCallFloat_arrayLjava_lang_Object_Handler")]
		public virtual unsafe float CallFloat (params global::Java.Lang.Object[]? @params)
		{
			const string __id = "callFloat.([Ljava/lang/Object;)F";
			IntPtr native__params = JNIEnv.NewArray (@params);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native__params);
				var __rm = _members.InstanceMethods.InvokeVirtualSingleMethod (__id, this, __args);
				return __rm;
			} finally {
				if (@params != null) {
					JNIEnv.CopyArray (native__params, @params);
					JNIEnv.DeleteLocalRef (native__params);
				}
				global::System.GC.KeepAlive (@params);
			}
		}

		static Delegate? cb_callInt_Ljava_lang_Object_;
#pragma warning disable 0169
		static Delegate GetCallInt_Ljava_lang_Object_Handler ()
		{
			if (cb_callInt_Ljava_lang_Object_ == null)
				cb_callInt_Ljava_lang_Object_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_I (n_CallInt_Ljava_lang_Object_));
			return cb_callInt_Ljava_lang_Object_;
		}

		static int n_CallInt_Ljava_lang_Object_ (IntPtr jnienv, IntPtr native__this, IntPtr native_param)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Reflect.ReflectorMethod> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var param = global::Java.Lang.Object.GetObject<global::Java.Lang.Object> (native_param, JniHandleOwnership.DoNotTransfer);
			int __ret = __this.CallInt (param);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorMethod']/method[@name='callInt' and count(parameter)=1 and parameter[1][@type='java.lang.Object']]"
		[Register ("callInt", "(Ljava/lang/Object;)I", "GetCallInt_Ljava_lang_Object_Handler")]
		public virtual unsafe int CallInt (global::Java.Lang.Object? param)
		{
			const string __id = "callInt.(Ljava/lang/Object;)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((param == null) ? IntPtr.Zero : ((global::Java.Lang.Object) param).Handle);
				var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (param);
			}
		}

		static Delegate? cb_callInt_arrayLjava_lang_Object_;
#pragma warning disable 0169
		static Delegate GetCallInt_arrayLjava_lang_Object_Handler ()
		{
			if (cb_callInt_arrayLjava_lang_Object_ == null)
				cb_callInt_arrayLjava_lang_Object_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_I (n_CallInt_arrayLjava_lang_Object_));
			return cb_callInt_arrayLjava_lang_Object_;
		}

		static int n_CallInt_arrayLjava_lang_Object_ (IntPtr jnienv, IntPtr native__this, IntPtr native__params)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Reflect.ReflectorMethod> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var @params = (global::Java.Lang.Object[]?) JNIEnv.GetArray (native__params, JniHandleOwnership.DoNotTransfer, typeof (global::Java.Lang.Object));
			int __ret = __this.CallInt (@params);
			if (@params != null)
				JNIEnv.CopyArray (@params, native__params);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorMethod']/method[@name='callInt' and count(parameter)=1 and parameter[1][@type='java.lang.Object...']]"
		[Register ("callInt", "([Ljava/lang/Object;)I", "GetCallInt_arrayLjava_lang_Object_Handler")]
		public virtual unsafe int CallInt (params global::Java.Lang.Object[]? @params)
		{
			const string __id = "callInt.([Ljava/lang/Object;)I";
			IntPtr native__params = JNIEnv.NewArray (@params);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native__params);
				var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, __args);
				return __rm;
			} finally {
				if (@params != null) {
					JNIEnv.CopyArray (native__params, @params);
					JNIEnv.DeleteLocalRef (native__params);
				}
				global::System.GC.KeepAlive (@params);
			}
		}

		static Delegate? cb_callLong_Ljava_lang_Object_;
#pragma warning disable 0169
		static Delegate GetCallLong_Ljava_lang_Object_Handler ()
		{
			if (cb_callLong_Ljava_lang_Object_ == null)
				cb_callLong_Ljava_lang_Object_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_J (n_CallLong_Ljava_lang_Object_));
			return cb_callLong_Ljava_lang_Object_;
		}

		static long n_CallLong_Ljava_lang_Object_ (IntPtr jnienv, IntPtr native__this, IntPtr native_param)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Reflect.ReflectorMethod> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var param = global::Java.Lang.Object.GetObject<global::Java.Lang.Object> (native_param, JniHandleOwnership.DoNotTransfer);
			long __ret = __this.CallLong (param);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorMethod']/method[@name='callLong' and count(parameter)=1 and parameter[1][@type='java.lang.Object']]"
		[Register ("callLong", "(Ljava/lang/Object;)J", "GetCallLong_Ljava_lang_Object_Handler")]
		public virtual unsafe long CallLong (global::Java.Lang.Object? param)
		{
			const string __id = "callLong.(Ljava/lang/Object;)J";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((param == null) ? IntPtr.Zero : ((global::Java.Lang.Object) param).Handle);
				var __rm = _members.InstanceMethods.InvokeVirtualInt64Method (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (param);
			}
		}

		static Delegate? cb_callLong_arrayLjava_lang_Object_;
#pragma warning disable 0169
		static Delegate GetCallLong_arrayLjava_lang_Object_Handler ()
		{
			if (cb_callLong_arrayLjava_lang_Object_ == null)
				cb_callLong_arrayLjava_lang_Object_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_J (n_CallLong_arrayLjava_lang_Object_));
			return cb_callLong_arrayLjava_lang_Object_;
		}

		static long n_CallLong_arrayLjava_lang_Object_ (IntPtr jnienv, IntPtr native__this, IntPtr native__params)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Reflect.ReflectorMethod> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var @params = (global::Java.Lang.Object[]?) JNIEnv.GetArray (native__params, JniHandleOwnership.DoNotTransfer, typeof (global::Java.Lang.Object));
			long __ret = __this.CallLong (@params);
			if (@params != null)
				JNIEnv.CopyArray (@params, native__params);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorMethod']/method[@name='callLong' and count(parameter)=1 and parameter[1][@type='java.lang.Object...']]"
		[Register ("callLong", "([Ljava/lang/Object;)J", "GetCallLong_arrayLjava_lang_Object_Handler")]
		public virtual unsafe long CallLong (params global::Java.Lang.Object[]? @params)
		{
			const string __id = "callLong.([Ljava/lang/Object;)J";
			IntPtr native__params = JNIEnv.NewArray (@params);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native__params);
				var __rm = _members.InstanceMethods.InvokeVirtualInt64Method (__id, this, __args);
				return __rm;
			} finally {
				if (@params != null) {
					JNIEnv.CopyArray (native__params, @params);
					JNIEnv.DeleteLocalRef (native__params);
				}
				global::System.GC.KeepAlive (@params);
			}
		}

		static Delegate? cb_callString_arrayLjava_lang_Object_;
#pragma warning disable 0169
		static Delegate GetCallString_arrayLjava_lang_Object_Handler ()
		{
			if (cb_callString_arrayLjava_lang_Object_ == null)
				cb_callString_arrayLjava_lang_Object_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_L (n_CallString_arrayLjava_lang_Object_));
			return cb_callString_arrayLjava_lang_Object_;
		}

		static IntPtr n_CallString_arrayLjava_lang_Object_ (IntPtr jnienv, IntPtr native__this, IntPtr native__params)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Reflect.ReflectorMethod> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var @params = (global::Java.Lang.Object[]?) JNIEnv.GetArray (native__params, JniHandleOwnership.DoNotTransfer, typeof (global::Java.Lang.Object));
			IntPtr __ret = JNIEnv.NewString (__this.CallString (@params));
			if (@params != null)
				JNIEnv.CopyArray (@params, native__params);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorMethod']/method[@name='callString' and count(parameter)=1 and parameter[1][@type='java.lang.Object...']]"
		[Register ("callString", "([Ljava/lang/Object;)Ljava/lang/String;", "GetCallString_arrayLjava_lang_Object_Handler")]
		public virtual unsafe string? CallString (params global::Java.Lang.Object[]? @params)
		{
			const string __id = "callString.([Ljava/lang/Object;)Ljava/lang/String;";
			IntPtr native__params = JNIEnv.NewArray (@params);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native__params);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (@params != null) {
					JNIEnv.CopyArray (native__params, @params);
					JNIEnv.DeleteLocalRef (native__params);
				}
				global::System.GC.KeepAlive (@params);
			}
		}

		static Delegate? cb_callString1_Ljava_lang_Object_;
#pragma warning disable 0169
		static Delegate GetCallString1_Ljava_lang_Object_Handler ()
		{
			if (cb_callString1_Ljava_lang_Object_ == null)
				cb_callString1_Ljava_lang_Object_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_L (n_CallString1_Ljava_lang_Object_));
			return cb_callString1_Ljava_lang_Object_;
		}

		static IntPtr n_CallString1_Ljava_lang_Object_ (IntPtr jnienv, IntPtr native__this, IntPtr native_param)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Reflect.ReflectorMethod> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var param = global::Java.Lang.Object.GetObject<global::Java.Lang.Object> (native_param, JniHandleOwnership.DoNotTransfer);
			IntPtr __ret = JNIEnv.NewString (__this.CallString1 (param));
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorMethod']/method[@name='callString1' and count(parameter)=1 and parameter[1][@type='java.lang.Object']]"
		[Register ("callString1", "(Ljava/lang/Object;)Ljava/lang/String;", "GetCallString1_Ljava_lang_Object_Handler")]
		public virtual unsafe string? CallString1 (global::Java.Lang.Object? param)
		{
			const string __id = "callString1.(Ljava/lang/Object;)Ljava/lang/String;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((param == null) ? IntPtr.Zero : ((global::Java.Lang.Object) param).Handle);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				global::System.GC.KeepAlive (param);
			}
		}

		static Delegate? cb_callVoid_arrayLjava_lang_Object_;
#pragma warning disable 0169
		static Delegate GetCallVoid_arrayLjava_lang_Object_Handler ()
		{
			if (cb_callVoid_arrayLjava_lang_Object_ == null)
				cb_callVoid_arrayLjava_lang_Object_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_CallVoid_arrayLjava_lang_Object_));
			return cb_callVoid_arrayLjava_lang_Object_;
		}

		static void n_CallVoid_arrayLjava_lang_Object_ (IntPtr jnienv, IntPtr native__this, IntPtr native__params)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Reflect.ReflectorMethod> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var @params = (global::Java.Lang.Object[]?) JNIEnv.GetArray (native__params, JniHandleOwnership.DoNotTransfer, typeof (global::Java.Lang.Object));
			__this.CallVoid (@params);
			if (@params != null)
				JNIEnv.CopyArray (@params, native__params);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorMethod']/method[@name='callVoid' and count(parameter)=1 and parameter[1][@type='java.lang.Object...']]"
		[Register ("callVoid", "([Ljava/lang/Object;)V", "GetCallVoid_arrayLjava_lang_Object_Handler")]
		public virtual unsafe void CallVoid (params global::Java.Lang.Object[]? @params)
		{
			const string __id = "callVoid.([Ljava/lang/Object;)V";
			IntPtr native__params = JNIEnv.NewArray (@params);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native__params);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				if (@params != null) {
					JNIEnv.CopyArray (native__params, @params);
					JNIEnv.DeleteLocalRef (native__params);
				}
				global::System.GC.KeepAlive (@params);
			}
		}

		static Delegate? cb_deactivate;
#pragma warning disable 0169
		static Delegate GetDeactivateHandler ()
		{
			if (cb_deactivate == null)
				cb_deactivate = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_V (n_Deactivate));
			return cb_deactivate;
		}

		static void n_Deactivate (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Reflect.ReflectorMethod> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			__this.Deactivate ();
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorMethod']/method[@name='deactivate' and count(parameter)=0]"
		[Register ("deactivate", "()V", "GetDeactivateHandler")]
		public virtual unsafe void Deactivate ()
		{
			const string __id = "deactivate.()V";
			try {
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, null);
			} finally {
			}
		}

		static Delegate? cb_exists;
#pragma warning disable 0169
		static Delegate GetExistsHandler ()
		{
			if (cb_exists == null)
				cb_exists = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_Z (n_Exists));
			return cb_exists;
		}

		static bool n_Exists (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Reflect.ReflectorMethod> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			return __this.Exists ();
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorMethod']/method[@name='exists' and count(parameter)=0]"
		[Register ("exists", "()Z", "GetExistsHandler")]
		public virtual unsafe bool Exists ()
		{
			const string __id = "exists.()Z";
			try {
				var __rm = _members.InstanceMethods.InvokeVirtualBooleanMethod (__id, this, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorMethod']/method[@name='getMethod' and count(parameter)=3 and parameter[1][@type='java.lang.Class'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='java.lang.Class[]']]"
		[Register ("getMethod", "(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;", "")]
		public static unsafe global::Java.Lang.Reflect.Method? GetMethod (global::Java.Lang.Class? cls, string? methodName, global::Java.Lang.Class[]? paramTypes)
		{
			const string __id = "getMethod.(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;";
			IntPtr native_methodName = JNIEnv.NewString ((string?)methodName);
			IntPtr native_paramTypes = JNIEnv.NewArray (paramTypes);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue ((cls == null) ? IntPtr.Zero : ((global::Java.Lang.Object) cls).Handle);
				__args [1] = new JniArgumentValue (native_methodName);
				__args [2] = new JniArgumentValue (native_paramTypes);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Lang.Object.GetObject<global::Java.Lang.Reflect.Method> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_methodName);
				if (paramTypes != null) {
					JNIEnv.CopyArray (native_paramTypes, paramTypes);
					JNIEnv.DeleteLocalRef (native_paramTypes);
				}
				global::System.GC.KeepAlive (cls);
				global::System.GC.KeepAlive (paramTypes);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorMethod']/method[@name='getMethods' and count(parameter)=2 and parameter[1][@type='java.lang.Class'] and parameter[2][@type='java.lang.String']]"
		[Register ("getMethods", "(Ljava/lang/Class;Ljava/lang/String;)[Ljava/lang/reflect/Method;", "")]
		public static unsafe global::Java.Lang.Reflect.Method[]? GetMethods (global::Java.Lang.Class? cls, string? methodName)
		{
			const string __id = "getMethods.(Ljava/lang/Class;Ljava/lang/String;)[Ljava/lang/reflect/Method;";
			IntPtr native_methodName = JNIEnv.NewString ((string?)methodName);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((cls == null) ? IntPtr.Zero : ((global::Java.Lang.Object) cls).Handle);
				__args [1] = new JniArgumentValue (native_methodName);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (global::Java.Lang.Reflect.Method[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (global::Java.Lang.Reflect.Method));
			} finally {
				JNIEnv.DeleteLocalRef (native_methodName);
				global::System.GC.KeepAlive (cls);
			}
		}

		static Delegate? cb_resolve;
#pragma warning disable 0169
		static Delegate GetResolveHandler ()
		{
			if (cb_resolve == null)
				cb_resolve = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_V (n_Resolve));
			return cb_resolve;
		}

		static void n_Resolve (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Reflect.ReflectorMethod> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			__this.Resolve ();
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorMethod']/method[@name='resolve' and count(parameter)=0]"
		[Register ("resolve", "()V", "GetResolveHandler")]
		public virtual unsafe void Resolve ()
		{
			const string __id = "resolve.()V";
			try {
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, null);
			} finally {
			}
		}

	}
}
