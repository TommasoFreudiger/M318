//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Net.Optifine.Model {

	// Metadata.xml XPath class reference: path="/api/package[@name='net.optifine.model']/class[@name='AttachmentPath']"
	[global::Android.Runtime.Register ("net/optifine/model/AttachmentPath", DoNotGenerateAcw=true)]
	public partial class AttachmentPath : global::Java.Lang.Object {
		static readonly JniPeerMembers _members = new XAPeerMembers ("net/optifine/model/AttachmentPath", typeof (AttachmentPath));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected AttachmentPath (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		static Delegate? cb_getAttachment;
#pragma warning disable 0169
		static Delegate GetGetAttachmentHandler ()
		{
			if (cb_getAttachment == null)
				cb_getAttachment = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_L (n_GetAttachment));
			return cb_getAttachment;
		}

		static IntPtr n_GetAttachment (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Model.AttachmentPath> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			return JNIEnv.ToLocalJniHandle (__this.Attachment);
		}
#pragma warning restore 0169

		public virtual unsafe global::Net.Optifine.Model.Attachment? Attachment {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.model']/class[@name='AttachmentPath']/method[@name='getAttachment' and count(parameter)=0]"
			[Register ("getAttachment", "()Lnet/optifine/model/Attachment;", "GetGetAttachmentHandler")]
			get {
				const string __id = "getAttachment.()Lnet/optifine/model/Attachment;";
				try {
					var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
					return global::Java.Lang.Object.GetObject<global::Net.Optifine.Model.Attachment> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
		}

		static Delegate? cb_isVisible;
#pragma warning disable 0169
		static Delegate GetIsVisibleHandler ()
		{
			if (cb_isVisible == null)
				cb_isVisible = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_Z (n_IsVisible));
			return cb_isVisible;
		}

		static bool n_IsVisible (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Model.AttachmentPath> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			return __this.IsVisible;
		}
#pragma warning restore 0169

		public virtual unsafe bool IsVisible {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.model']/class[@name='AttachmentPath']/method[@name='isVisible' and count(parameter)=0]"
			[Register ("isVisible", "()Z", "GetIsVisibleHandler")]
			get {
				const string __id = "isVisible.()Z";
				try {
					var __rm = _members.InstanceMethods.InvokeVirtualBooleanMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

	}
}
