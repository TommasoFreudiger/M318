//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Net.Minecraftforge.Resource {

	// Metadata.xml XPath class reference: path="/api/package[@name='net.minecraftforge.resource']/class[@name='ResourceCacheManager']"
	[global::Android.Runtime.Register ("net/minecraftforge/resource/ResourceCacheManager", DoNotGenerateAcw=true)]
	public partial class ResourceCacheManager : global::Java.Lang.Object {
		static readonly JniPeerMembers _members = new XAPeerMembers ("net/minecraftforge/resource/ResourceCacheManager", typeof (ResourceCacheManager));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected ResourceCacheManager (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		static Delegate? cb_index_Ljava_lang_String_;
#pragma warning disable 0169
		static Delegate GetIndex_Ljava_lang_String_Handler ()
		{
			if (cb_index_Ljava_lang_String_ == null)
				cb_index_Ljava_lang_String_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_Index_Ljava_lang_String_));
			return cb_index_Ljava_lang_String_;
		}

		static void n_Index_Ljava_lang_String_ (IntPtr jnienv, IntPtr native__this, IntPtr native_nameSpace)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Minecraftforge.Resource.ResourceCacheManager> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var nameSpace = JNIEnv.GetString (native_nameSpace, JniHandleOwnership.DoNotTransfer);
			__this.Index (nameSpace);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.minecraftforge.resource']/class[@name='ResourceCacheManager']/method[@name='index' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("index", "(Ljava/lang/String;)V", "GetIndex_Ljava_lang_String_Handler")]
		public virtual unsafe void Index (string? nameSpace)
		{
			const string __id = "index.(Ljava/lang/String;)V";
			IntPtr native_nameSpace = JNIEnv.NewString ((string?)nameSpace);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_nameSpace);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_nameSpace);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.minecraftforge.resource']/class[@name='ResourceCacheManager']/method[@name='shouldUseCache' and count(parameter)=0]"
		[Register ("shouldUseCache", "()Z", "")]
		public static unsafe bool ShouldUseCache ()
		{
			const string __id = "shouldUseCache.()Z";
			try {
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
				return __rm;
			} finally {
			}
		}

	}
}
