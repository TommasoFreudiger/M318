//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Optifine {

	// Metadata.xml XPath class reference: path="/api/package[@name='optifine']/class[@name='Utils']"
	[global::Android.Runtime.Register ("optifine/Utils", DoNotGenerateAcw=true)]
	public partial class Utils : global::Java.Lang.Object {
		// Metadata.xml XPath field reference: path="/api/package[@name='optifine']/class[@name='Utils']/field[@name='MAC_OS_HOME_PREFIX']"
		[Register ("MAC_OS_HOME_PREFIX")]
		public const string MacOsHomePrefix = (string) "Library/Application Support";

		// Metadata.xml XPath class reference: path="/api/package[@name='optifine']/class[@name='Utils.OS']"
		[global::Android.Runtime.Register ("optifine/Utils$OS", DoNotGenerateAcw=true)]
		public sealed partial class OS : global::Java.Lang.Enum {

			// Metadata.xml XPath field reference: path="/api/package[@name='optifine']/class[@name='Utils.OS']/field[@name='LINUX']"
			[Register ("LINUX")]
			public static global::Optifine.Utils.OS? Linux {
				get {
					const string __id = "LINUX.Loptifine/Utils$OS;";

					var __v = _members.StaticFields.GetObjectValue (__id);
					return global::Java.Lang.Object.GetObject<global::Optifine.Utils.OS> (__v.Handle, JniHandleOwnership.TransferLocalRef);
				}
			}


			// Metadata.xml XPath field reference: path="/api/package[@name='optifine']/class[@name='Utils.OS']/field[@name='MACOS']"
			[Register ("MACOS")]
			public static global::Optifine.Utils.OS? Macos {
				get {
					const string __id = "MACOS.Loptifine/Utils$OS;";

					var __v = _members.StaticFields.GetObjectValue (__id);
					return global::Java.Lang.Object.GetObject<global::Optifine.Utils.OS> (__v.Handle, JniHandleOwnership.TransferLocalRef);
				}
			}


			// Metadata.xml XPath field reference: path="/api/package[@name='optifine']/class[@name='Utils.OS']/field[@name='SOLARIS']"
			[Register ("SOLARIS")]
			public static global::Optifine.Utils.OS? Solaris {
				get {
					const string __id = "SOLARIS.Loptifine/Utils$OS;";

					var __v = _members.StaticFields.GetObjectValue (__id);
					return global::Java.Lang.Object.GetObject<global::Optifine.Utils.OS> (__v.Handle, JniHandleOwnership.TransferLocalRef);
				}
			}


			// Metadata.xml XPath field reference: path="/api/package[@name='optifine']/class[@name='Utils.OS']/field[@name='UNKNOWN']"
			[Register ("UNKNOWN")]
			public static global::Optifine.Utils.OS? Unknown {
				get {
					const string __id = "UNKNOWN.Loptifine/Utils$OS;";

					var __v = _members.StaticFields.GetObjectValue (__id);
					return global::Java.Lang.Object.GetObject<global::Optifine.Utils.OS> (__v.Handle, JniHandleOwnership.TransferLocalRef);
				}
			}


			// Metadata.xml XPath field reference: path="/api/package[@name='optifine']/class[@name='Utils.OS']/field[@name='WINDOWS']"
			[Register ("WINDOWS")]
			public static global::Optifine.Utils.OS? Windows {
				get {
					const string __id = "WINDOWS.Loptifine/Utils$OS;";

					var __v = _members.StaticFields.GetObjectValue (__id);
					return global::Java.Lang.Object.GetObject<global::Optifine.Utils.OS> (__v.Handle, JniHandleOwnership.TransferLocalRef);
				}
			}

			static readonly JniPeerMembers _members = new XAPeerMembers ("optifine/Utils$OS", typeof (OS));

			internal static IntPtr class_ref {
				get { return _members.JniPeerType.PeerReference.Handle; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			public override global::Java.Interop.JniPeerMembers JniPeerMembers {
				get { return _members; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			protected override IntPtr ThresholdClass {
				get { return _members.JniPeerType.PeerReference.Handle; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			protected override global::System.Type ThresholdType {
				get { return _members.ManagedPeerType; }
			}

			internal OS (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
			{
			}

			// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='Utils.OS']/method[@name='valueOf' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
			[Register ("valueOf", "(Ljava/lang/String;)Loptifine/Utils$OS;", "")]
			public static unsafe global::Optifine.Utils.OS? ValueOf (string? p0)
			{
				const string __id = "valueOf.(Ljava/lang/String;)Loptifine/Utils$OS;";
				IntPtr native_p0 = JNIEnv.NewString ((string?)p0);
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue (native_p0);
					var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
					return global::Java.Lang.Object.GetObject<global::Optifine.Utils.OS> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
					JNIEnv.DeleteLocalRef (native_p0);
				}
			}

			// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='Utils.OS']/method[@name='values' and count(parameter)=0]"
			[Register ("values", "()[Loptifine/Utils$OS;", "")]
			public static unsafe global::Optifine.Utils.OS[]? Values ()
			{
				const string __id = "values.()[Loptifine/Utils$OS;";
				try {
					var __rm = _members.StaticMethods.InvokeObjectMethod (__id, null);
					return (global::Optifine.Utils.OS[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (global::Optifine.Utils.OS));
				} finally {
				}
			}

		}

		static readonly JniPeerMembers _members = new XAPeerMembers ("optifine/Utils", typeof (Utils));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected Utils (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		public static unsafe global::Optifine.Utils.OS? Platform {
			// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='Utils']/method[@name='getPlatform' and count(parameter)=0]"
			[Register ("getPlatform", "()Loptifine/Utils$OS;", "")]
			get {
				const string __id = "getPlatform.()Loptifine/Utils$OS;";
				try {
					var __rm = _members.StaticMethods.InvokeObjectMethod (__id, null);
					return global::Java.Lang.Object.GetObject<global::Optifine.Utils.OS> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
		}

		public static unsafe global::Java.IO.File? WorkingDirectory {
			// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='Utils']/method[@name='getWorkingDirectory' and count(parameter)=0]"
			[Register ("getWorkingDirectory", "()Ljava/io/File;", "")]
			get {
				const string __id = "getWorkingDirectory.()Ljava/io/File;";
				try {
					var __rm = _members.StaticMethods.InvokeObjectMethod (__id, null);
					return global::Java.Lang.Object.GetObject<global::Java.IO.File> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='Utils']/method[@name='addObjectToArray' and count(parameter)=2 and parameter[1][@type='java.lang.Object[]'] and parameter[2][@type='java.lang.Object']]"
		[Register ("addObjectToArray", "([Ljava/lang/Object;Ljava/lang/Object;)[Ljava/lang/Object;", "")]
		public static unsafe global::Java.Lang.Object[]? AddObjectToArray (global::Java.Lang.Object[]? arr, global::Java.Lang.Object? obj)
		{
			const string __id = "addObjectToArray.([Ljava/lang/Object;Ljava/lang/Object;)[Ljava/lang/Object;";
			IntPtr native_arr = JNIEnv.NewArray (arr);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_arr);
				__args [1] = new JniArgumentValue ((obj == null) ? IntPtr.Zero : ((global::Java.Lang.Object) obj).Handle);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (global::Java.Lang.Object[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (global::Java.Lang.Object));
			} finally {
				if (arr != null) {
					JNIEnv.CopyArray (native_arr, arr);
					JNIEnv.DeleteLocalRef (native_arr);
				}
				global::System.GC.KeepAlive (arr);
				global::System.GC.KeepAlive (obj);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='Utils']/method[@name='addObjectToArray' and count(parameter)=3 and parameter[1][@type='java.lang.Object[]'] and parameter[2][@type='java.lang.Object'] and parameter[3][@type='int']]"
		[Register ("addObjectToArray", "([Ljava/lang/Object;Ljava/lang/Object;I)[Ljava/lang/Object;", "")]
		public static unsafe global::Java.Lang.Object[]? AddObjectToArray (global::Java.Lang.Object[]? arr, global::Java.Lang.Object? obj, int index)
		{
			const string __id = "addObjectToArray.([Ljava/lang/Object;Ljava/lang/Object;I)[Ljava/lang/Object;";
			IntPtr native_arr = JNIEnv.NewArray (arr);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_arr);
				__args [1] = new JniArgumentValue ((obj == null) ? IntPtr.Zero : ((global::Java.Lang.Object) obj).Handle);
				__args [2] = new JniArgumentValue (index);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (global::Java.Lang.Object[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (global::Java.Lang.Object));
			} finally {
				if (arr != null) {
					JNIEnv.CopyArray (native_arr, arr);
					JNIEnv.DeleteLocalRef (native_arr);
				}
				global::System.GC.KeepAlive (arr);
				global::System.GC.KeepAlive (obj);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='Utils']/method[@name='addObjectsToArray' and count(parameter)=2 and parameter[1][@type='java.lang.Object[]'] and parameter[2][@type='java.lang.Object[]']]"
		[Register ("addObjectsToArray", "([Ljava/lang/Object;[Ljava/lang/Object;)[Ljava/lang/Object;", "")]
		public static unsafe global::Java.Lang.Object[]? AddObjectsToArray (global::Java.Lang.Object[]? arr, global::Java.Lang.Object[]? objs)
		{
			const string __id = "addObjectsToArray.([Ljava/lang/Object;[Ljava/lang/Object;)[Ljava/lang/Object;";
			IntPtr native_arr = JNIEnv.NewArray (arr);
			IntPtr native_objs = JNIEnv.NewArray (objs);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_arr);
				__args [1] = new JniArgumentValue (native_objs);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (global::Java.Lang.Object[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (global::Java.Lang.Object));
			} finally {
				if (arr != null) {
					JNIEnv.CopyArray (native_arr, arr);
					JNIEnv.DeleteLocalRef (native_arr);
				}
				if (objs != null) {
					JNIEnv.CopyArray (native_objs, objs);
					JNIEnv.DeleteLocalRef (native_objs);
				}
				global::System.GC.KeepAlive (arr);
				global::System.GC.KeepAlive (objs);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='Utils']/method[@name='arrayToCommaSeparatedString' and count(parameter)=1 and parameter[1][@type='java.lang.Object[]']]"
		[Register ("arrayToCommaSeparatedString", "([Ljava/lang/Object;)Ljava/lang/String;", "")]
		public static unsafe string? ArrayToCommaSeparatedString (global::Java.Lang.Object[]? arr)
		{
			const string __id = "arrayToCommaSeparatedString.([Ljava/lang/Object;)Ljava/lang/String;";
			IntPtr native_arr = JNIEnv.NewArray (arr);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_arr);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (arr != null) {
					JNIEnv.CopyArray (native_arr, arr);
					JNIEnv.DeleteLocalRef (native_arr);
				}
				global::System.GC.KeepAlive (arr);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='Utils']/method[@name='byteArrayToHexString' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("byteArrayToHexString", "([B)Ljava/lang/String;", "")]
		public static unsafe string? ByteArrayToHexString (byte[]? bytes)
		{
			const string __id = "byteArrayToHexString.([B)Ljava/lang/String;";
			IntPtr native_bytes = JNIEnv.NewArray (bytes);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_bytes);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (bytes != null) {
					JNIEnv.CopyArray (native_bytes, bytes);
					JNIEnv.DeleteLocalRef (native_bytes);
				}
				global::System.GC.KeepAlive (bytes);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='Utils']/method[@name='collectionToArray' and count(parameter)=2 and parameter[1][@type='java.util.Collection'] and parameter[2][@type='java.lang.Class']]"
		[Register ("collectionToArray", "(Ljava/util/Collection;Ljava/lang/Class;)[Ljava/lang/Object;", "")]
		public static unsafe global::Java.Lang.Object[]? CollectionToArray (global::System.Collections.ICollection? coll, global::Java.Lang.Class? elementClass)
		{
			const string __id = "collectionToArray.(Ljava/util/Collection;Ljava/lang/Class;)[Ljava/lang/Object;";
			IntPtr native_coll = global::Android.Runtime.JavaCollection.ToLocalJniHandle (coll);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_coll);
				__args [1] = new JniArgumentValue ((elementClass == null) ? IntPtr.Zero : ((global::Java.Lang.Object) elementClass).Handle);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (global::Java.Lang.Object[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (global::Java.Lang.Object));
			} finally {
				JNIEnv.DeleteLocalRef (native_coll);
				global::System.GC.KeepAlive (coll);
				global::System.GC.KeepAlive (elementClass);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='Utils']/method[@name='copyAll' and count(parameter)=2 and parameter[1][@type='java.io.InputStream'] and parameter[2][@type='java.io.OutputStream']]"
		[Register ("copyAll", "(Ljava/io/InputStream;Ljava/io/OutputStream;)V", "")]
		public static unsafe void CopyAll (global::System.IO.Stream? @is, global::System.IO.Stream? os)
		{
			const string __id = "copyAll.(Ljava/io/InputStream;Ljava/io/OutputStream;)V";
			IntPtr native__is = global::Android.Runtime.InputStreamAdapter.ToLocalJniHandle (@is);
			IntPtr native_os = global::Android.Runtime.OutputStreamAdapter.ToLocalJniHandle (os);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native__is);
				__args [1] = new JniArgumentValue (native_os);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native__is);
				JNIEnv.DeleteLocalRef (native_os);
				global::System.GC.KeepAlive (@is);
				global::System.GC.KeepAlive (os);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='Utils']/method[@name='copyFile' and count(parameter)=2 and parameter[1][@type='java.io.File'] and parameter[2][@type='java.io.File']]"
		[Register ("copyFile", "(Ljava/io/File;Ljava/io/File;)V", "")]
		public static unsafe void CopyFile (global::Java.IO.File? fileSrc, global::Java.IO.File? fileDest)
		{
			const string __id = "copyFile.(Ljava/io/File;Ljava/io/File;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((fileSrc == null) ? IntPtr.Zero : ((global::Java.Lang.Object) fileSrc).Handle);
				__args [1] = new JniArgumentValue ((fileDest == null) ? IntPtr.Zero : ((global::Java.Lang.Object) fileDest).Handle);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				global::System.GC.KeepAlive (fileSrc);
				global::System.GC.KeepAlive (fileDest);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='Utils']/method[@name='dbg' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("dbg", "(Ljava/lang/String;)V", "")]
		public static unsafe void Dbg (string? str)
		{
			const string __id = "dbg.(Ljava/lang/String;)V";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_str);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='Utils']/method[@name='ensurePrefix' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String']]"
		[Register ("ensurePrefix", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? EnsurePrefix (string? str, string? prefix)
		{
			const string __id = "ensurePrefix.(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			IntPtr native_prefix = JNIEnv.NewString ((string?)prefix);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_str);
				__args [1] = new JniArgumentValue (native_prefix);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
				JNIEnv.DeleteLocalRef (native_prefix);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='Utils']/method[@name='equals' and count(parameter)=2 and parameter[1][@type='java.lang.Object'] and parameter[2][@type='java.lang.Object']]"
		[Register ("equals", "(Ljava/lang/Object;Ljava/lang/Object;)Z", "")]
		public static unsafe bool Equals (global::Java.Lang.Object? o1, global::Java.Lang.Object? o2)
		{
			const string __id = "equals.(Ljava/lang/Object;Ljava/lang/Object;)Z";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((o1 == null) ? IntPtr.Zero : ((global::Java.Lang.Object) o1).Handle);
				__args [1] = new JniArgumentValue ((o2 == null) ? IntPtr.Zero : ((global::Java.Lang.Object) o2).Handle);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (o1);
				global::System.GC.KeepAlive (o2);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='Utils']/method[@name='equalsMask' and count(parameter)=3 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='char']]"
		[Register ("equalsMask", "(Ljava/lang/String;Ljava/lang/String;C)Z", "")]
		public static unsafe bool EqualsMask (string? str, string? mask, char wildChar)
		{
			const string __id = "equalsMask.(Ljava/lang/String;Ljava/lang/String;C)Z";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			IntPtr native_mask = JNIEnv.NewString ((string?)mask);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_str);
				__args [1] = new JniArgumentValue (native_mask);
				__args [2] = new JniArgumentValue (wildChar);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
				JNIEnv.DeleteLocalRef (native_mask);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='Utils']/method[@name='find' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='byte[]']]"
		[Register ("find", "([B[B)I", "")]
		public static unsafe int Find (byte[]? buf, byte[]? pattern)
		{
			const string __id = "find.([B[B)I";
			IntPtr native_buf = JNIEnv.NewArray (buf);
			IntPtr native_pattern = JNIEnv.NewArray (pattern);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_buf);
				__args [1] = new JniArgumentValue (native_pattern);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (buf != null) {
					JNIEnv.CopyArray (native_buf, buf);
					JNIEnv.DeleteLocalRef (native_buf);
				}
				if (pattern != null) {
					JNIEnv.CopyArray (native_pattern, pattern);
					JNIEnv.DeleteLocalRef (native_pattern);
				}
				global::System.GC.KeepAlive (buf);
				global::System.GC.KeepAlive (pattern);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='Utils']/method[@name='find' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='byte[]']]"
		[Register ("find", "([BI[B)I", "")]
		public static unsafe int Find (byte[]? buf, int index, byte[]? pattern)
		{
			const string __id = "find.([BI[B)I";
			IntPtr native_buf = JNIEnv.NewArray (buf);
			IntPtr native_pattern = JNIEnv.NewArray (pattern);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_buf);
				__args [1] = new JniArgumentValue (index);
				__args [2] = new JniArgumentValue (native_pattern);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (buf != null) {
					JNIEnv.CopyArray (native_buf, buf);
					JNIEnv.DeleteLocalRef (native_buf);
				}
				if (pattern != null) {
					JNIEnv.CopyArray (native_pattern, pattern);
					JNIEnv.DeleteLocalRef (native_pattern);
				}
				global::System.GC.KeepAlive (buf);
				global::System.GC.KeepAlive (pattern);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='Utils']/method[@name='getExceptionStackTrace' and count(parameter)=1 and parameter[1][@type='java.lang.Throwable']]"
		[Register ("getExceptionStackTrace", "(Ljava/lang/Throwable;)Ljava/lang/String;", "")]
		public static unsafe string? GetExceptionStackTrace (global::Java.Lang.Throwable? e)
		{
			const string __id = "getExceptionStackTrace.(Ljava/lang/Throwable;)Ljava/lang/String;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((e == null) ? IntPtr.Zero : ((global::Java.Lang.Throwable) e).Handle);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				global::System.GC.KeepAlive (e);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='Utils']/method[@name='getWorkingDirectory' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("getWorkingDirectory", "(Ljava/lang/String;)Ljava/io/File;", "")]
		public static unsafe global::Java.IO.File? GetWorkingDirectory (string? applicationName)
		{
			const string __id = "getWorkingDirectory.(Ljava/lang/String;)Ljava/io/File;";
			IntPtr native_applicationName = JNIEnv.NewString ((string?)applicationName);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_applicationName);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Lang.Object.GetObject<global::Java.IO.File> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_applicationName);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='Utils']/method[@name='parseInt' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='int']]"
		[Register ("parseInt", "(Ljava/lang/String;I)I", "")]
		public static unsafe int ParseInt (string? str, int defVal)
		{
			const string __id = "parseInt.(Ljava/lang/String;I)I";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_str);
				__args [1] = new JniArgumentValue (defVal);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='Utils']/method[@name='readAll' and count(parameter)=1 and parameter[1][@type='java.io.InputStream']]"
		[Register ("readAll", "(Ljava/io/InputStream;)[B", "")]
		public static unsafe byte[]? ReadAll (global::System.IO.Stream? @is)
		{
			const string __id = "readAll.(Ljava/io/InputStream;)[B";
			IntPtr native__is = global::Android.Runtime.InputStreamAdapter.ToLocalJniHandle (@is);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native__is);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
				JNIEnv.DeleteLocalRef (native__is);
				global::System.GC.KeepAlive (@is);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='Utils']/method[@name='readFile' and count(parameter)=1 and parameter[1][@type='java.io.File']]"
		[Register ("readFile", "(Ljava/io/File;)Ljava/lang/String;", "")]
		public static unsafe string? ReadFile (global::Java.IO.File? file)
		{
			const string __id = "readFile.(Ljava/io/File;)Ljava/lang/String;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((file == null) ? IntPtr.Zero : ((global::Java.Lang.Object) file).Handle);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				global::System.GC.KeepAlive (file);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='Utils']/method[@name='readFile' and count(parameter)=2 and parameter[1][@type='java.io.File'] and parameter[2][@type='java.lang.String']]"
		[Register ("readFile", "(Ljava/io/File;Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? ReadFile (global::Java.IO.File? file, string? encoding)
		{
			const string __id = "readFile.(Ljava/io/File;Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native_encoding = JNIEnv.NewString ((string?)encoding);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((file == null) ? IntPtr.Zero : ((global::Java.Lang.Object) file).Handle);
				__args [1] = new JniArgumentValue (native_encoding);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_encoding);
				global::System.GC.KeepAlive (file);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='Utils']/method[@name='readLines' and count(parameter)=2 and parameter[1][@type='java.io.InputStream'] and parameter[2][@type='java.lang.String']]"
		[Register ("readLines", "(Ljava/io/InputStream;Ljava/lang/String;)[Ljava/lang/String;", "")]
		public static unsafe string[]? ReadLines (global::System.IO.Stream? @in, string? encoding)
		{
			const string __id = "readLines.(Ljava/io/InputStream;Ljava/lang/String;)[Ljava/lang/String;";
			IntPtr native__in = global::Android.Runtime.InputStreamAdapter.ToLocalJniHandle (@in);
			IntPtr native_encoding = JNIEnv.NewString ((string?)encoding);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native__in);
				__args [1] = new JniArgumentValue (native_encoding);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (string[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (string));
			} finally {
				JNIEnv.DeleteLocalRef (native__in);
				JNIEnv.DeleteLocalRef (native_encoding);
				global::System.GC.KeepAlive (@in);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='Utils']/method[@name='readText' and count(parameter)=2 and parameter[1][@type='java.io.InputStream'] and parameter[2][@type='java.lang.String']]"
		[Register ("readText", "(Ljava/io/InputStream;Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? ReadText (global::System.IO.Stream? @in, string? encoding)
		{
			const string __id = "readText.(Ljava/io/InputStream;Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native__in = global::Android.Runtime.InputStreamAdapter.ToLocalJniHandle (@in);
			IntPtr native_encoding = JNIEnv.NewString ((string?)encoding);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native__in);
				__args [1] = new JniArgumentValue (native_encoding);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native__in);
				JNIEnv.DeleteLocalRef (native_encoding);
				global::System.GC.KeepAlive (@in);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='Utils']/method[@name='removeObjectFromArray' and count(parameter)=2 and parameter[1][@type='java.lang.Object[]'] and parameter[2][@type='java.lang.Object']]"
		[Register ("removeObjectFromArray", "([Ljava/lang/Object;Ljava/lang/Object;)[Ljava/lang/Object;", "")]
		public static unsafe global::Java.Lang.Object[]? RemoveObjectFromArray (global::Java.Lang.Object[]? arr, global::Java.Lang.Object? obj)
		{
			const string __id = "removeObjectFromArray.([Ljava/lang/Object;Ljava/lang/Object;)[Ljava/lang/Object;";
			IntPtr native_arr = JNIEnv.NewArray (arr);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_arr);
				__args [1] = new JniArgumentValue ((obj == null) ? IntPtr.Zero : ((global::Java.Lang.Object) obj).Handle);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (global::Java.Lang.Object[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (global::Java.Lang.Object));
			} finally {
				if (arr != null) {
					JNIEnv.CopyArray (native_arr, arr);
					JNIEnv.DeleteLocalRef (native_arr);
				}
				global::System.GC.KeepAlive (arr);
				global::System.GC.KeepAlive (obj);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='Utils']/method[@name='removePrefix' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String']]"
		[Register ("removePrefix", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? RemovePrefix (string? str, string? prefix)
		{
			const string __id = "removePrefix.(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			IntPtr native_prefix = JNIEnv.NewString ((string?)prefix);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_str);
				__args [1] = new JniArgumentValue (native_prefix);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
				JNIEnv.DeleteLocalRef (native_prefix);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='Utils']/method[@name='removePrefix' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String[]']]"
		[Register ("removePrefix", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? RemovePrefix (string? str, string[]? prefixes)
		{
			const string __id = "removePrefix.(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			IntPtr native_prefixes = JNIEnv.NewArray (prefixes);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_str);
				__args [1] = new JniArgumentValue (native_prefixes);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
				if (prefixes != null) {
					JNIEnv.CopyArray (native_prefixes, prefixes);
					JNIEnv.DeleteLocalRef (native_prefixes);
				}
				global::System.GC.KeepAlive (prefixes);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='Utils']/method[@name='removeSuffix' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String']]"
		[Register ("removeSuffix", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? RemoveSuffix (string? str, string? suffix)
		{
			const string __id = "removeSuffix.(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			IntPtr native_suffix = JNIEnv.NewString ((string?)suffix);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_str);
				__args [1] = new JniArgumentValue (native_suffix);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
				JNIEnv.DeleteLocalRef (native_suffix);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='Utils']/method[@name='removeSuffix' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String[]']]"
		[Register ("removeSuffix", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? RemoveSuffix (string? str, string[]? suffixes)
		{
			const string __id = "removeSuffix.(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			IntPtr native_suffixes = JNIEnv.NewArray (suffixes);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_str);
				__args [1] = new JniArgumentValue (native_suffixes);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
				if (suffixes != null) {
					JNIEnv.CopyArray (native_suffixes, suffixes);
					JNIEnv.DeleteLocalRef (native_suffixes);
				}
				global::System.GC.KeepAlive (suffixes);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='Utils']/method[@name='showErrorMessage' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("showErrorMessage", "(Ljava/lang/String;)V", "")]
		public static unsafe void ShowErrorMessage (string? msg)
		{
			const string __id = "showErrorMessage.(Ljava/lang/String;)V";
			IntPtr native_msg = JNIEnv.NewString ((string?)msg);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_msg);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_msg);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='Utils']/method[@name='showMessage' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("showMessage", "(Ljava/lang/String;)V", "")]
		public static unsafe void ShowMessage (string? msg)
		{
			const string __id = "showMessage.(Ljava/lang/String;)V";
			IntPtr native_msg = JNIEnv.NewString ((string?)msg);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_msg);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_msg);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='Utils']/method[@name='tokenize' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String']]"
		[Register ("tokenize", "(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;", "")]
		public static unsafe string[]? Tokenize (string? str, string? delim)
		{
			const string __id = "tokenize.(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			IntPtr native_delim = JNIEnv.NewString ((string?)delim);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_str);
				__args [1] = new JniArgumentValue (native_delim);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (string[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (string));
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
				JNIEnv.DeleteLocalRef (native_delim);
			}
		}

	}
}
