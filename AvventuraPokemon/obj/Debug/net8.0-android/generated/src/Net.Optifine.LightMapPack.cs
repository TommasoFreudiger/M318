//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Net.Optifine {

	// Metadata.xml XPath class reference: path="/api/package[@name='net.optifine']/class[@name='LightMapPack']"
	[global::Android.Runtime.Register ("net/optifine/LightMapPack", DoNotGenerateAcw=true)]
	public partial class LightMapPack : global::Java.Lang.Object {
		static readonly JniPeerMembers _members = new XAPeerMembers ("net/optifine/LightMapPack", typeof (LightMapPack));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected LightMapPack (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='net.optifine']/class[@name='LightMapPack']/constructor[@name='LightMapPack' and count(parameter)=3 and parameter[1][@type='net.optifine.LightMap'] and parameter[2][@type='net.optifine.LightMap'] and parameter[3][@type='net.optifine.LightMap']]"
		[Register (".ctor", "(Lnet/optifine/LightMap;Lnet/optifine/LightMap;Lnet/optifine/LightMap;)V", "")]
		public unsafe LightMapPack (global::Net.Optifine.LightMap? lightMap, global::Net.Optifine.LightMap? lightMapRain, global::Net.Optifine.LightMap? lightMapThunder) : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "(Lnet/optifine/LightMap;Lnet/optifine/LightMap;Lnet/optifine/LightMap;)V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue ((lightMap == null) ? IntPtr.Zero : ((global::Java.Lang.Object) lightMap).Handle);
				__args [1] = new JniArgumentValue ((lightMapRain == null) ? IntPtr.Zero : ((global::Java.Lang.Object) lightMapRain).Handle);
				__args [2] = new JniArgumentValue ((lightMapThunder == null) ? IntPtr.Zero : ((global::Java.Lang.Object) lightMapThunder).Handle);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (lightMap);
				global::System.GC.KeepAlive (lightMapRain);
				global::System.GC.KeepAlive (lightMapThunder);
			}
		}

	}
}
