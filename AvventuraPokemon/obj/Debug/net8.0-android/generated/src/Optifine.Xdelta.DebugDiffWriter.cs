//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Optifine.Xdelta {

	// Metadata.xml XPath class reference: path="/api/package[@name='optifine.xdelta']/class[@name='DebugDiffWriter']"
	[global::Android.Runtime.Register ("optifine/xdelta/DebugDiffWriter", DoNotGenerateAcw=true)]
	public partial class DebugDiffWriter : global::Java.Lang.Object, global::Optifine.Xdelta.IDiffWriter {
		static readonly JniPeerMembers _members = new XAPeerMembers ("optifine/xdelta/DebugDiffWriter", typeof (DebugDiffWriter));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected DebugDiffWriter (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='optifine.xdelta']/class[@name='DebugDiffWriter']/constructor[@name='DebugDiffWriter' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe DebugDiffWriter () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		static Delegate? cb_addCopy_II;
#pragma warning disable 0169
		static Delegate GetAddCopy_IIHandler ()
		{
			if (cb_addCopy_II == null)
				cb_addCopy_II = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPII_V (n_AddCopy_II));
			return cb_addCopy_II;
		}

		static void n_AddCopy_II (IntPtr jnienv, IntPtr native__this, int offset, int length)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Optifine.Xdelta.DebugDiffWriter> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			__this.AddCopy (offset, length);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine.xdelta']/class[@name='DebugDiffWriter']/method[@name='addCopy' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='int']]"
		[Register ("addCopy", "(II)V", "GetAddCopy_IIHandler")]
		public virtual unsafe void AddCopy (int offset, int length)
		{
			const string __id = "addCopy.(II)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (offset);
				__args [1] = new JniArgumentValue (length);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
			}
		}

		static Delegate? cb_addData_B;
#pragma warning disable 0169
		static Delegate GetAddData_BHandler ()
		{
			if (cb_addData_B == null)
				cb_addData_B = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPB_V (n_AddData_B));
			return cb_addData_B;
		}

		static void n_AddData_B (IntPtr jnienv, IntPtr native__this, sbyte b)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Optifine.Xdelta.DebugDiffWriter> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			__this.AddData (b);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine.xdelta']/class[@name='DebugDiffWriter']/method[@name='addData' and count(parameter)=1 and parameter[1][@type='byte']]"
		[Register ("addData", "(B)V", "GetAddData_BHandler")]
		public virtual unsafe void AddData (sbyte b)
		{
			const string __id = "addData.(B)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (b);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
			}
		}

		static Delegate? cb_close;
#pragma warning disable 0169
		static Delegate GetCloseHandler ()
		{
			if (cb_close == null)
				cb_close = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_V (n_Close));
			return cb_close;
		}

		static void n_Close (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Optifine.Xdelta.DebugDiffWriter> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			__this.Close ();
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine.xdelta']/class[@name='DebugDiffWriter']/method[@name='close' and count(parameter)=0]"
		[Register ("close", "()V", "GetCloseHandler")]
		public virtual unsafe void Close ()
		{
			const string __id = "close.()V";
			try {
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, null);
			} finally {
			}
		}

		static Delegate? cb_flush;
#pragma warning disable 0169
		static Delegate GetFlushHandler ()
		{
			if (cb_flush == null)
				cb_flush = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_V (n_Flush));
			return cb_flush;
		}

		static void n_Flush (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Optifine.Xdelta.DebugDiffWriter> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			__this.Flush ();
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine.xdelta']/class[@name='DebugDiffWriter']/method[@name='flush' and count(parameter)=0]"
		[Register ("flush", "()V", "GetFlushHandler")]
		public virtual unsafe void Flush ()
		{
			const string __id = "flush.()V";
			try {
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, null);
			} finally {
			}
		}

	}
}
