//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Optifine {

	// Metadata.xml XPath class reference: path="/api/package[@name='optifine']/class[@name='HashUtils']"
	[global::Android.Runtime.Register ("optifine/HashUtils", DoNotGenerateAcw=true)]
	public partial class HashUtils : global::Java.Lang.Object {
		static readonly JniPeerMembers _members = new XAPeerMembers ("optifine/HashUtils", typeof (HashUtils));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected HashUtils (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='optifine']/class[@name='HashUtils']/constructor[@name='HashUtils' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe HashUtils () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='HashUtils']/method[@name='getHash' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='java.lang.String']]"
		[Register ("getHash", "([BLjava/lang/String;)[B", "")]
		public static unsafe byte[]? GetHash (byte[]? data, string? digest)
		{
			const string __id = "getHash.([BLjava/lang/String;)[B";
			IntPtr native_data = JNIEnv.NewArray (data);
			IntPtr native_digest = JNIEnv.NewString ((string?)digest);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_data);
				__args [1] = new JniArgumentValue (native_digest);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
				if (data != null) {
					JNIEnv.CopyArray (native_data, data);
					JNIEnv.DeleteLocalRef (native_data);
				}
				JNIEnv.DeleteLocalRef (native_digest);
				global::System.GC.KeepAlive (data);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='HashUtils']/method[@name='getHash' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String']]"
		[Register ("getHash", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? GetHash (string? data, string? digest)
		{
			const string __id = "getHash.(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native_data = JNIEnv.NewString ((string?)data);
			IntPtr native_digest = JNIEnv.NewString ((string?)digest);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_data);
				__args [1] = new JniArgumentValue (native_digest);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_data);
				JNIEnv.DeleteLocalRef (native_digest);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='HashUtils']/method[@name='getHashMd5' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("getHashMd5", "([B)[B", "")]
		public static unsafe byte[]? GetHashMd5 (byte[]? data)
		{
			const string __id = "getHashMd5.([B)[B";
			IntPtr native_data = JNIEnv.NewArray (data);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_data);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
				if (data != null) {
					JNIEnv.CopyArray (native_data, data);
					JNIEnv.DeleteLocalRef (native_data);
				}
				global::System.GC.KeepAlive (data);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='HashUtils']/method[@name='getHashMd5' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("getHashMd5", "(Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? GetHashMd5 (string? data)
		{
			const string __id = "getHashMd5.(Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native_data = JNIEnv.NewString ((string?)data);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_data);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_data);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='HashUtils']/method[@name='getHashSha1' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("getHashSha1", "([B)[B", "")]
		public static unsafe byte[]? GetHashSha1 (byte[]? data)
		{
			const string __id = "getHashSha1.([B)[B";
			IntPtr native_data = JNIEnv.NewArray (data);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_data);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
				if (data != null) {
					JNIEnv.CopyArray (native_data, data);
					JNIEnv.DeleteLocalRef (native_data);
				}
				global::System.GC.KeepAlive (data);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='HashUtils']/method[@name='getHashSha1' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("getHashSha1", "(Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? GetHashSha1 (string? data)
		{
			const string __id = "getHashSha1.(Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native_data = JNIEnv.NewString ((string?)data);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_data);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_data);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='HashUtils']/method[@name='getHashSha256' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("getHashSha256", "([B)[B", "")]
		public static unsafe byte[]? GetHashSha256 (byte[]? data)
		{
			const string __id = "getHashSha256.([B)[B";
			IntPtr native_data = JNIEnv.NewArray (data);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_data);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
				if (data != null) {
					JNIEnv.CopyArray (native_data, data);
					JNIEnv.DeleteLocalRef (native_data);
				}
				global::System.GC.KeepAlive (data);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='HashUtils']/method[@name='getHashSha256' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("getHashSha256", "(Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? GetHashSha256 (string? data)
		{
			const string __id = "getHashSha256.(Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native_data = JNIEnv.NewString ((string?)data);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_data);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_data);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine']/class[@name='HashUtils']/method[@name='toHexString' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("toHexString", "([B)Ljava/lang/String;", "")]
		public static unsafe string? ToHexString (byte[]? data)
		{
			const string __id = "toHexString.([B)Ljava/lang/String;";
			IntPtr native_data = JNIEnv.NewArray (data);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_data);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (data != null) {
					JNIEnv.CopyArray (native_data, data);
					JNIEnv.DeleteLocalRef (native_data);
				}
				global::System.GC.KeepAlive (data);
			}
		}

	}
}
