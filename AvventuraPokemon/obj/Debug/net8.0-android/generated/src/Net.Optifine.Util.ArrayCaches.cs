//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Net.Optifine.Util {

	// Metadata.xml XPath class reference: path="/api/package[@name='net.optifine.util']/class[@name='ArrayCaches']"
	[global::Android.Runtime.Register ("net/optifine/util/ArrayCaches", DoNotGenerateAcw=true)]
	public partial class ArrayCaches : global::Java.Lang.Object {
		static readonly JniPeerMembers _members = new XAPeerMembers ("net/optifine/util/ArrayCaches", typeof (ArrayCaches));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected ArrayCaches (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='net.optifine.util']/class[@name='ArrayCaches']/constructor[@name='ArrayCaches' and count(parameter)=3 and parameter[1][@type='int[]'] and parameter[2][@type='java.lang.Class'] and parameter[3][@type='int']]"
		[Register (".ctor", "([ILjava/lang/Class;I)V", "")]
		public unsafe ArrayCaches (int[]? sizes, global::Java.Lang.Class? elementClass, int maxCacheSize) : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "([ILjava/lang/Class;I)V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			IntPtr native_sizes = JNIEnv.NewArray (sizes);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_sizes);
				__args [1] = new JniArgumentValue ((elementClass == null) ? IntPtr.Zero : ((global::Java.Lang.Object) elementClass).Handle);
				__args [2] = new JniArgumentValue (maxCacheSize);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
				if (sizes != null) {
					JNIEnv.CopyArray (native_sizes, sizes);
					JNIEnv.DeleteLocalRef (native_sizes);
				}
				global::System.GC.KeepAlive (sizes);
				global::System.GC.KeepAlive (elementClass);
			}
		}

		static Delegate? cb_allocate_I;
#pragma warning disable 0169
		static Delegate GetAllocate_IHandler ()
		{
			if (cb_allocate_I == null)
				cb_allocate_I = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPI_L (n_Allocate_I));
			return cb_allocate_I;
		}

		static IntPtr n_Allocate_I (IntPtr jnienv, IntPtr native__this, int size)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.ArrayCaches> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			return JNIEnv.ToLocalJniHandle (__this.Allocate (size));
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='ArrayCaches']/method[@name='allocate' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("allocate", "(I)Ljava/lang/Object;", "GetAllocate_IHandler")]
		public virtual unsafe global::Java.Lang.Object? Allocate (int size)
		{
			const string __id = "allocate.(I)Ljava/lang/Object;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (size);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Lang.Object.GetObject<global::Java.Lang.Object> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
			}
		}

		static Delegate? cb_free_Ljava_lang_Object_;
#pragma warning disable 0169
		static Delegate GetFree_Ljava_lang_Object_Handler ()
		{
			if (cb_free_Ljava_lang_Object_ == null)
				cb_free_Ljava_lang_Object_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_Free_Ljava_lang_Object_));
			return cb_free_Ljava_lang_Object_;
		}

		static void n_Free_Ljava_lang_Object_ (IntPtr jnienv, IntPtr native__this, IntPtr native_arr)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.ArrayCaches> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var arr = global::Java.Lang.Object.GetObject<global::Java.Lang.Object> (native_arr, JniHandleOwnership.DoNotTransfer);
			__this.Free (arr);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='ArrayCaches']/method[@name='free' and count(parameter)=1 and parameter[1][@type='java.lang.Object']]"
		[Register ("free", "(Ljava/lang/Object;)V", "GetFree_Ljava_lang_Object_Handler")]
		public virtual unsafe void Free (global::Java.Lang.Object? arr)
		{
			const string __id = "free.(Ljava/lang/Object;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((arr == null) ? IntPtr.Zero : ((global::Java.Lang.Object) arr).Handle);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (arr);
			}
		}

	}
}
