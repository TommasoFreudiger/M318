//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Optifine.Xdelta {

	// Metadata.xml XPath class reference: path="/api/package[@name='optifine.xdelta']/class[@name='Delta']"
	[global::Android.Runtime.Register ("optifine/xdelta/Delta", DoNotGenerateAcw=true)]
	public partial class Delta : global::Java.Lang.Object {
		// Metadata.xml XPath field reference: path="/api/package[@name='optifine.xdelta']/class[@name='Delta']/field[@name='buff_size']"
		[Register ("buff_size")]
		public const int BuffSize = (int) 1024;

		// Metadata.xml XPath field reference: path="/api/package[@name='optifine.xdelta']/class[@name='Delta']/field[@name='debug']"
		[Register ("debug")]
		public const bool Debug = (bool) false;

		// Metadata.xml XPath field reference: path="/api/package[@name='optifine.xdelta']/class[@name='Delta']/field[@name='S']"
		[Register ("S")]
		public const int S = (int) 16;

		static readonly JniPeerMembers _members = new XAPeerMembers ("optifine/xdelta/Delta", typeof (Delta));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected Delta (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='optifine.xdelta']/class[@name='Delta']/constructor[@name='Delta' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe Delta () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine.xdelta']/class[@name='Delta']/method[@name='computeDelta' and count(parameter)=4 and parameter[1][@type='byte[]'] and parameter[2][@type='java.io.InputStream'] and parameter[3][@type='int'] and parameter[4][@type='optifine.xdelta.DiffWriter']]"
		[Register ("computeDelta", "([BLjava/io/InputStream;ILoptifine/xdelta/DiffWriter;)V", "")]
		public static unsafe void ComputeDelta (byte[]? source, global::System.IO.Stream? targetIS, int targetLength, global::Optifine.Xdelta.IDiffWriter? output)
		{
			const string __id = "computeDelta.([BLjava/io/InputStream;ILoptifine/xdelta/DiffWriter;)V";
			IntPtr native_source = JNIEnv.NewArray (source);
			IntPtr native_targetIS = global::Android.Runtime.InputStreamAdapter.ToLocalJniHandle (targetIS);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (native_source);
				__args [1] = new JniArgumentValue (native_targetIS);
				__args [2] = new JniArgumentValue (targetLength);
				__args [3] = new JniArgumentValue ((output == null) ? IntPtr.Zero : ((global::Java.Lang.Object) output).Handle);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (source != null) {
					JNIEnv.CopyArray (native_source, source);
					JNIEnv.DeleteLocalRef (native_source);
				}
				JNIEnv.DeleteLocalRef (native_targetIS);
				global::System.GC.KeepAlive (source);
				global::System.GC.KeepAlive (targetIS);
				global::System.GC.KeepAlive (output);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine.xdelta']/class[@name='Delta']/method[@name='computeDelta' and count(parameter)=3 and parameter[1][@type='java.io.File'] and parameter[2][@type='java.io.File'] and parameter[3][@type='optifine.xdelta.DiffWriter']]"
		[Register ("computeDelta", "(Ljava/io/File;Ljava/io/File;Loptifine/xdelta/DiffWriter;)V", "")]
		public static unsafe void ComputeDelta (global::Java.IO.File? sourceFile, global::Java.IO.File? targetFile, global::Optifine.Xdelta.IDiffWriter? output)
		{
			const string __id = "computeDelta.(Ljava/io/File;Ljava/io/File;Loptifine/xdelta/DiffWriter;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue ((sourceFile == null) ? IntPtr.Zero : ((global::Java.Lang.Object) sourceFile).Handle);
				__args [1] = new JniArgumentValue ((targetFile == null) ? IntPtr.Zero : ((global::Java.Lang.Object) targetFile).Handle);
				__args [2] = new JniArgumentValue ((output == null) ? IntPtr.Zero : ((global::Java.Lang.Object) output).Handle);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				global::System.GC.KeepAlive (sourceFile);
				global::System.GC.KeepAlive (targetFile);
				global::System.GC.KeepAlive (output);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine.xdelta']/class[@name='Delta']/method[@name='computeDelta' and count(parameter)=4 and parameter[1][@type='optifine.xdelta.SeekableSource'] and parameter[2][@type='java.io.InputStream'] and parameter[3][@type='int'] and parameter[4][@type='optifine.xdelta.DiffWriter']]"
		[Register ("computeDelta", "(Loptifine/xdelta/SeekableSource;Ljava/io/InputStream;ILoptifine/xdelta/DiffWriter;)V", "")]
		public static unsafe void ComputeDelta (global::Optifine.Xdelta.ISeekableSource? source, global::System.IO.Stream? targetIS, int targetLength, global::Optifine.Xdelta.IDiffWriter? output)
		{
			const string __id = "computeDelta.(Loptifine/xdelta/SeekableSource;Ljava/io/InputStream;ILoptifine/xdelta/DiffWriter;)V";
			IntPtr native_targetIS = global::Android.Runtime.InputStreamAdapter.ToLocalJniHandle (targetIS);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue ((source == null) ? IntPtr.Zero : ((global::Java.Lang.Object) source).Handle);
				__args [1] = new JniArgumentValue (native_targetIS);
				__args [2] = new JniArgumentValue (targetLength);
				__args [3] = new JniArgumentValue ((output == null) ? IntPtr.Zero : ((global::Java.Lang.Object) output).Handle);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_targetIS);
				global::System.GC.KeepAlive (source);
				global::System.GC.KeepAlive (targetIS);
				global::System.GC.KeepAlive (output);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine.xdelta']/class[@name='Delta']/method[@name='main' and count(parameter)=1 and parameter[1][@type='java.lang.String[]']]"
		[Register ("main", "([Ljava/lang/String;)V", "")]
		public static unsafe void Main (string[]? argv)
		{
			const string __id = "main.([Ljava/lang/String;)V";
			IntPtr native_argv = JNIEnv.NewArray (argv);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_argv);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (argv != null) {
					JNIEnv.CopyArray (native_argv, argv);
					JNIEnv.DeleteLocalRef (native_argv);
				}
				global::System.GC.KeepAlive (argv);
			}
		}

	}
}
