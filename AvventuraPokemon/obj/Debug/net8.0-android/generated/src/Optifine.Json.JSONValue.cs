//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Optifine.Json {

	// Metadata.xml XPath class reference: path="/api/package[@name='optifine.json']/class[@name='JSONValue']"
	[global::Android.Runtime.Register ("optifine/json/JSONValue", DoNotGenerateAcw=true)]
	public partial class JSONValue : global::Java.Lang.Object {
		static readonly JniPeerMembers _members = new XAPeerMembers ("optifine/json/JSONValue", typeof (JSONValue));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected JSONValue (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='optifine.json']/class[@name='JSONValue']/constructor[@name='JSONValue' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe JSONValue () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine.json']/class[@name='JSONValue']/method[@name='escape' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("escape", "(Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? Escape (string? s)
		{
			const string __id = "escape.(Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native_s = JNIEnv.NewString ((string?)s);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_s);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_s);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine.json']/class[@name='JSONValue']/method[@name='parse' and count(parameter)=1 and parameter[1][@type='java.io.Reader']]"
		[Register ("parse", "(Ljava/io/Reader;)Ljava/lang/Object;", "")]
		public static unsafe global::Java.Lang.Object? Parse (global::Java.IO.Reader? @in)
		{
			const string __id = "parse.(Ljava/io/Reader;)Ljava/lang/Object;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((@in == null) ? IntPtr.Zero : ((global::Java.Lang.Object) @in).Handle);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Lang.Object.GetObject<global::Java.Lang.Object> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				global::System.GC.KeepAlive (@in);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine.json']/class[@name='JSONValue']/method[@name='parse' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("parse", "(Ljava/lang/String;)Ljava/lang/Object;", "")]
		public static unsafe global::Java.Lang.Object? Parse (string? s)
		{
			const string __id = "parse.(Ljava/lang/String;)Ljava/lang/Object;";
			IntPtr native_s = JNIEnv.NewString ((string?)s);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_s);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Lang.Object.GetObject<global::Java.Lang.Object> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_s);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine.json']/class[@name='JSONValue']/method[@name='parseWithException' and count(parameter)=1 and parameter[1][@type='java.io.Reader']]"
		[Register ("parseWithException", "(Ljava/io/Reader;)Ljava/lang/Object;", "")]
		public static unsafe global::Java.Lang.Object? ParseWithException (global::Java.IO.Reader? @in)
		{
			const string __id = "parseWithException.(Ljava/io/Reader;)Ljava/lang/Object;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((@in == null) ? IntPtr.Zero : ((global::Java.Lang.Object) @in).Handle);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Lang.Object.GetObject<global::Java.Lang.Object> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				global::System.GC.KeepAlive (@in);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine.json']/class[@name='JSONValue']/method[@name='parseWithException' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("parseWithException", "(Ljava/lang/String;)Ljava/lang/Object;", "")]
		public static unsafe global::Java.Lang.Object? ParseWithException (string? s)
		{
			const string __id = "parseWithException.(Ljava/lang/String;)Ljava/lang/Object;";
			IntPtr native_s = JNIEnv.NewString ((string?)s);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_s);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Lang.Object.GetObject<global::Java.Lang.Object> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_s);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine.json']/class[@name='JSONValue']/method[@name='toJSONString' and count(parameter)=1 and parameter[1][@type='java.lang.Object']]"
		[Register ("toJSONString", "(Ljava/lang/Object;)Ljava/lang/String;", "")]
		public static unsafe string? ToJSONString (global::Java.Lang.Object? value)
		{
			const string __id = "toJSONString.(Ljava/lang/Object;)Ljava/lang/String;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((value == null) ? IntPtr.Zero : ((global::Java.Lang.Object) value).Handle);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				global::System.GC.KeepAlive (value);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine.json']/class[@name='JSONValue']/method[@name='writeJSONString' and count(parameter)=2 and parameter[1][@type='java.lang.Object'] and parameter[2][@type='java.io.Writer']]"
		[Register ("writeJSONString", "(Ljava/lang/Object;Ljava/io/Writer;)V", "")]
		public static unsafe void WriteJSONString (global::Java.Lang.Object? value, global::Java.IO.Writer? @out)
		{
			const string __id = "writeJSONString.(Ljava/lang/Object;Ljava/io/Writer;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((value == null) ? IntPtr.Zero : ((global::Java.Lang.Object) value).Handle);
				__args [1] = new JniArgumentValue ((@out == null) ? IntPtr.Zero : ((global::Java.Lang.Object) @out).Handle);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				global::System.GC.KeepAlive (value);
				global::System.GC.KeepAlive (@out);
			}
		}

	}
}
