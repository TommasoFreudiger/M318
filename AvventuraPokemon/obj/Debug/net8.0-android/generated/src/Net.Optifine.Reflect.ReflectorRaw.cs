//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Net.Optifine.Reflect {

	// Metadata.xml XPath class reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorRaw']"
	[global::Android.Runtime.Register ("net/optifine/reflect/ReflectorRaw", DoNotGenerateAcw=true)]
	public partial class ReflectorRaw : global::Java.Lang.Object {
		static readonly JniPeerMembers _members = new XAPeerMembers ("net/optifine/reflect/ReflectorRaw", typeof (ReflectorRaw));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected ReflectorRaw (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorRaw']/method[@name='getField' and count(parameter)=2 and parameter[1][@type='java.lang.Class'] and parameter[2][@type='java.lang.Class']]"
		[Register ("getField", "(Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Field;", "")]
		public static unsafe global::Java.Lang.Reflect.Field? GetField (global::Java.Lang.Class? cls, global::Java.Lang.Class? fieldType)
		{
			const string __id = "getField.(Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Field;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((cls == null) ? IntPtr.Zero : ((global::Java.Lang.Object) cls).Handle);
				__args [1] = new JniArgumentValue ((fieldType == null) ? IntPtr.Zero : ((global::Java.Lang.Object) fieldType).Handle);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Lang.Object.GetObject<global::Java.Lang.Reflect.Field> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				global::System.GC.KeepAlive (cls);
				global::System.GC.KeepAlive (fieldType);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorRaw']/method[@name='getField' and count(parameter)=3 and parameter[1][@type='java.lang.Class'] and parameter[2][@type='java.lang.Class'] and parameter[3][@type='int']]"
		[Register ("getField", "(Ljava/lang/Class;Ljava/lang/Class;I)Ljava/lang/reflect/Field;", "")]
		public static unsafe global::Java.Lang.Reflect.Field? GetField (global::Java.Lang.Class? cls, global::Java.Lang.Class? fieldType, int index)
		{
			const string __id = "getField.(Ljava/lang/Class;Ljava/lang/Class;I)Ljava/lang/reflect/Field;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue ((cls == null) ? IntPtr.Zero : ((global::Java.Lang.Object) cls).Handle);
				__args [1] = new JniArgumentValue ((fieldType == null) ? IntPtr.Zero : ((global::Java.Lang.Object) fieldType).Handle);
				__args [2] = new JniArgumentValue (index);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Lang.Object.GetObject<global::Java.Lang.Reflect.Field> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				global::System.GC.KeepAlive (cls);
				global::System.GC.KeepAlive (fieldType);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorRaw']/method[@name='getFieldAfter' and count(parameter)=4 and parameter[1][@type='java.lang.Class'] and parameter[2][@type='java.lang.reflect.Field'] and parameter[3][@type='java.lang.Class'] and parameter[4][@type='int']]"
		[Register ("getFieldAfter", "(Ljava/lang/Class;Ljava/lang/reflect/Field;Ljava/lang/Class;I)Ljava/lang/reflect/Field;", "")]
		public static unsafe global::Java.Lang.Reflect.Field? GetFieldAfter (global::Java.Lang.Class? cls, global::Java.Lang.Reflect.Field? field, global::Java.Lang.Class? fieldType, int index)
		{
			const string __id = "getFieldAfter.(Ljava/lang/Class;Ljava/lang/reflect/Field;Ljava/lang/Class;I)Ljava/lang/reflect/Field;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue ((cls == null) ? IntPtr.Zero : ((global::Java.Lang.Object) cls).Handle);
				__args [1] = new JniArgumentValue ((field == null) ? IntPtr.Zero : ((global::Java.Lang.Object) field).Handle);
				__args [2] = new JniArgumentValue ((fieldType == null) ? IntPtr.Zero : ((global::Java.Lang.Object) fieldType).Handle);
				__args [3] = new JniArgumentValue (index);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Lang.Object.GetObject<global::Java.Lang.Reflect.Field> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				global::System.GC.KeepAlive (cls);
				global::System.GC.KeepAlive (field);
				global::System.GC.KeepAlive (fieldType);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorRaw']/method[@name='getFieldValue' and count(parameter)=3 and parameter[1][@type='java.lang.Object'] and parameter[2][@type='java.lang.Class'] and parameter[3][@type='java.lang.Class']]"
		[Register ("getFieldValue", "(Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/Object;", "")]
		public static unsafe global::Java.Lang.Object? GetFieldValue (global::Java.Lang.Object? obj, global::Java.Lang.Class? cls, global::Java.Lang.Class? fieldType)
		{
			const string __id = "getFieldValue.(Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/Object;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue ((obj == null) ? IntPtr.Zero : ((global::Java.Lang.Object) obj).Handle);
				__args [1] = new JniArgumentValue ((cls == null) ? IntPtr.Zero : ((global::Java.Lang.Object) cls).Handle);
				__args [2] = new JniArgumentValue ((fieldType == null) ? IntPtr.Zero : ((global::Java.Lang.Object) fieldType).Handle);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Lang.Object.GetObject<global::Java.Lang.Object> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				global::System.GC.KeepAlive (obj);
				global::System.GC.KeepAlive (cls);
				global::System.GC.KeepAlive (fieldType);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorRaw']/method[@name='getFieldValue' and count(parameter)=4 and parameter[1][@type='java.lang.Object'] and parameter[2][@type='java.lang.Class'] and parameter[3][@type='java.lang.Class'] and parameter[4][@type='int']]"
		[Register ("getFieldValue", "(Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/Class;I)Ljava/lang/Object;", "")]
		public static unsafe global::Java.Lang.Object? GetFieldValue (global::Java.Lang.Object? obj, global::Java.Lang.Class? cls, global::Java.Lang.Class? fieldType, int index)
		{
			const string __id = "getFieldValue.(Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/Class;I)Ljava/lang/Object;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue ((obj == null) ? IntPtr.Zero : ((global::Java.Lang.Object) obj).Handle);
				__args [1] = new JniArgumentValue ((cls == null) ? IntPtr.Zero : ((global::Java.Lang.Object) cls).Handle);
				__args [2] = new JniArgumentValue ((fieldType == null) ? IntPtr.Zero : ((global::Java.Lang.Object) fieldType).Handle);
				__args [3] = new JniArgumentValue (index);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Lang.Object.GetObject<global::Java.Lang.Object> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				global::System.GC.KeepAlive (obj);
				global::System.GC.KeepAlive (cls);
				global::System.GC.KeepAlive (fieldType);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorRaw']/method[@name='getFields' and count(parameter)=2 and parameter[1][@type='java.lang.Class'] and parameter[2][@type='java.lang.Class']]"
		[Register ("getFields", "(Ljava/lang/Class;Ljava/lang/Class;)[Ljava/lang/reflect/Field;", "")]
		public static unsafe global::Java.Lang.Reflect.Field[]? GetFields (global::Java.Lang.Class? cls, global::Java.Lang.Class? fieldType)
		{
			const string __id = "getFields.(Ljava/lang/Class;Ljava/lang/Class;)[Ljava/lang/reflect/Field;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((cls == null) ? IntPtr.Zero : ((global::Java.Lang.Object) cls).Handle);
				__args [1] = new JniArgumentValue ((fieldType == null) ? IntPtr.Zero : ((global::Java.Lang.Object) fieldType).Handle);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (global::Java.Lang.Reflect.Field[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (global::Java.Lang.Reflect.Field));
			} finally {
				global::System.GC.KeepAlive (cls);
				global::System.GC.KeepAlive (fieldType);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorRaw']/method[@name='getFields' and count(parameter)=4 and parameter[1][@type='java.lang.Object'] and parameter[2][@type='java.lang.reflect.Field[]'] and parameter[3][@type='java.lang.Class'] and parameter[4][@type='java.lang.Object']]"
		[Register ("getFields", "(Ljava/lang/Object;[Ljava/lang/reflect/Field;Ljava/lang/Class;Ljava/lang/Object;)[Ljava/lang/reflect/Field;", "")]
		public static unsafe global::Java.Lang.Reflect.Field[]? GetFields (global::Java.Lang.Object? obj, global::Java.Lang.Reflect.Field[]? fields, global::Java.Lang.Class? fieldType, global::Java.Lang.Object? value)
		{
			const string __id = "getFields.(Ljava/lang/Object;[Ljava/lang/reflect/Field;Ljava/lang/Class;Ljava/lang/Object;)[Ljava/lang/reflect/Field;";
			IntPtr native_fields = JNIEnv.NewArray (fields);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue ((obj == null) ? IntPtr.Zero : ((global::Java.Lang.Object) obj).Handle);
				__args [1] = new JniArgumentValue (native_fields);
				__args [2] = new JniArgumentValue ((fieldType == null) ? IntPtr.Zero : ((global::Java.Lang.Object) fieldType).Handle);
				__args [3] = new JniArgumentValue ((value == null) ? IntPtr.Zero : ((global::Java.Lang.Object) value).Handle);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (global::Java.Lang.Reflect.Field[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (global::Java.Lang.Reflect.Field));
			} finally {
				if (fields != null) {
					JNIEnv.CopyArray (native_fields, fields);
					JNIEnv.DeleteLocalRef (native_fields);
				}
				global::System.GC.KeepAlive (obj);
				global::System.GC.KeepAlive (fields);
				global::System.GC.KeepAlive (fieldType);
				global::System.GC.KeepAlive (value);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorRaw']/method[@name='getFields' and count(parameter)=2 and parameter[1][@type='java.lang.reflect.Field[]'] and parameter[2][@type='java.lang.Class']]"
		[Register ("getFields", "([Ljava/lang/reflect/Field;Ljava/lang/Class;)[Ljava/lang/reflect/Field;", "")]
		public static unsafe global::Java.Lang.Reflect.Field[]? GetFields (global::Java.Lang.Reflect.Field[]? fields, global::Java.Lang.Class? fieldType)
		{
			const string __id = "getFields.([Ljava/lang/reflect/Field;Ljava/lang/Class;)[Ljava/lang/reflect/Field;";
			IntPtr native_fields = JNIEnv.NewArray (fields);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_fields);
				__args [1] = new JniArgumentValue ((fieldType == null) ? IntPtr.Zero : ((global::Java.Lang.Object) fieldType).Handle);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (global::Java.Lang.Reflect.Field[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (global::Java.Lang.Reflect.Field));
			} finally {
				if (fields != null) {
					JNIEnv.CopyArray (native_fields, fields);
					JNIEnv.DeleteLocalRef (native_fields);
				}
				global::System.GC.KeepAlive (fields);
				global::System.GC.KeepAlive (fieldType);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorRaw']/method[@name='getFieldsAfter' and count(parameter)=3 and parameter[1][@type='java.lang.Class'] and parameter[2][@type='java.lang.reflect.Field'] and parameter[3][@type='java.lang.Class']]"
		[Register ("getFieldsAfter", "(Ljava/lang/Class;Ljava/lang/reflect/Field;Ljava/lang/Class;)[Ljava/lang/reflect/Field;", "")]
		public static unsafe global::Java.Lang.Reflect.Field[]? GetFieldsAfter (global::Java.Lang.Class? cls, global::Java.Lang.Reflect.Field? field, global::Java.Lang.Class? fieldType)
		{
			const string __id = "getFieldsAfter.(Ljava/lang/Class;Ljava/lang/reflect/Field;Ljava/lang/Class;)[Ljava/lang/reflect/Field;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue ((cls == null) ? IntPtr.Zero : ((global::Java.Lang.Object) cls).Handle);
				__args [1] = new JniArgumentValue ((field == null) ? IntPtr.Zero : ((global::Java.Lang.Object) field).Handle);
				__args [2] = new JniArgumentValue ((fieldType == null) ? IntPtr.Zero : ((global::Java.Lang.Object) fieldType).Handle);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (global::Java.Lang.Reflect.Field[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (global::Java.Lang.Reflect.Field));
			} finally {
				global::System.GC.KeepAlive (cls);
				global::System.GC.KeepAlive (field);
				global::System.GC.KeepAlive (fieldType);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorRaw']/method[@name='getReflectorField' and count(parameter)=2 and parameter[1][@type='java.lang.Class'] and parameter[2][@type='java.lang.Class']]"
		[Register ("getReflectorField", "(Ljava/lang/Class;Ljava/lang/Class;)Lnet/optifine/reflect/ReflectorField;", "")]
		public static unsafe global::Net.Optifine.Reflect.ReflectorField? GetReflectorField (global::Java.Lang.Class? cls, global::Java.Lang.Class? fieldType)
		{
			const string __id = "getReflectorField.(Ljava/lang/Class;Ljava/lang/Class;)Lnet/optifine/reflect/ReflectorField;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((cls == null) ? IntPtr.Zero : ((global::Java.Lang.Object) cls).Handle);
				__args [1] = new JniArgumentValue ((fieldType == null) ? IntPtr.Zero : ((global::Java.Lang.Object) fieldType).Handle);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Lang.Object.GetObject<global::Net.Optifine.Reflect.ReflectorField> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				global::System.GC.KeepAlive (cls);
				global::System.GC.KeepAlive (fieldType);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorRaw']/method[@name='getReflectorField' and count(parameter)=3 and parameter[1][@type='java.lang.Class'] and parameter[2][@type='java.lang.Class'] and parameter[3][@type='int']]"
		[Register ("getReflectorField", "(Ljava/lang/Class;Ljava/lang/Class;I)Lnet/optifine/reflect/ReflectorField;", "")]
		public static unsafe global::Net.Optifine.Reflect.ReflectorField? GetReflectorField (global::Java.Lang.Class? cls, global::Java.Lang.Class? fieldType, int index)
		{
			const string __id = "getReflectorField.(Ljava/lang/Class;Ljava/lang/Class;I)Lnet/optifine/reflect/ReflectorField;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue ((cls == null) ? IntPtr.Zero : ((global::Java.Lang.Object) cls).Handle);
				__args [1] = new JniArgumentValue ((fieldType == null) ? IntPtr.Zero : ((global::Java.Lang.Object) fieldType).Handle);
				__args [2] = new JniArgumentValue (index);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Lang.Object.GetObject<global::Net.Optifine.Reflect.ReflectorField> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				global::System.GC.KeepAlive (cls);
				global::System.GC.KeepAlive (fieldType);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorRaw']/method[@name='setFieldValue' and count(parameter)=5 and parameter[1][@type='java.lang.Object'] and parameter[2][@type='java.lang.Class'] and parameter[3][@type='java.lang.Class'] and parameter[4][@type='int'] and parameter[5][@type='java.lang.Object']]"
		[Register ("setFieldValue", "(Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/Class;ILjava/lang/Object;)Z", "")]
		public static unsafe bool SetFieldValue (global::Java.Lang.Object? obj, global::Java.Lang.Class? cls, global::Java.Lang.Class? fieldType, int index, global::Java.Lang.Object? value)
		{
			const string __id = "setFieldValue.(Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/Class;ILjava/lang/Object;)Z";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [5];
				__args [0] = new JniArgumentValue ((obj == null) ? IntPtr.Zero : ((global::Java.Lang.Object) obj).Handle);
				__args [1] = new JniArgumentValue ((cls == null) ? IntPtr.Zero : ((global::Java.Lang.Object) cls).Handle);
				__args [2] = new JniArgumentValue ((fieldType == null) ? IntPtr.Zero : ((global::Java.Lang.Object) fieldType).Handle);
				__args [3] = new JniArgumentValue (index);
				__args [4] = new JniArgumentValue ((value == null) ? IntPtr.Zero : ((global::Java.Lang.Object) value).Handle);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (obj);
				global::System.GC.KeepAlive (cls);
				global::System.GC.KeepAlive (fieldType);
				global::System.GC.KeepAlive (value);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.reflect']/class[@name='ReflectorRaw']/method[@name='setFieldValue' and count(parameter)=4 and parameter[1][@type='java.lang.Object'] and parameter[2][@type='java.lang.Class'] and parameter[3][@type='java.lang.Class'] and parameter[4][@type='java.lang.Object']]"
		[Register ("setFieldValue", "(Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Object;)Z", "")]
		public static unsafe bool SetFieldValue (global::Java.Lang.Object? obj, global::Java.Lang.Class? cls, global::Java.Lang.Class? fieldType, global::Java.Lang.Object? value)
		{
			const string __id = "setFieldValue.(Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/Object;)Z";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue ((obj == null) ? IntPtr.Zero : ((global::Java.Lang.Object) obj).Handle);
				__args [1] = new JniArgumentValue ((cls == null) ? IntPtr.Zero : ((global::Java.Lang.Object) cls).Handle);
				__args [2] = new JniArgumentValue ((fieldType == null) ? IntPtr.Zero : ((global::Java.Lang.Object) fieldType).Handle);
				__args [3] = new JniArgumentValue ((value == null) ? IntPtr.Zero : ((global::Java.Lang.Object) value).Handle);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (obj);
				global::System.GC.KeepAlive (cls);
				global::System.GC.KeepAlive (fieldType);
				global::System.GC.KeepAlive (value);
			}
		}

	}
}
