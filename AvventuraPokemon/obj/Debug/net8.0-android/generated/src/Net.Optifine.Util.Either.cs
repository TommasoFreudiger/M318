//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Net.Optifine.Util {

	// Metadata.xml XPath class reference: path="/api/package[@name='net.optifine.util']/class[@name='Either']"
	[global::Android.Runtime.Register ("net/optifine/util/Either", DoNotGenerateAcw=true)]
	[global::Java.Interop.JavaTypeParameters (new string [] {"L", "R"})]
	public partial class Either : global::Java.Lang.Object {
		static readonly JniPeerMembers _members = new XAPeerMembers ("net/optifine/util/Either", typeof (Either));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected Either (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		static Delegate? cb_getLeft;
#pragma warning disable 0169
		static Delegate GetGetLeftHandler ()
		{
			if (cb_getLeft == null)
				cb_getLeft = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_L (n_GetLeft));
			return cb_getLeft;
		}

		static IntPtr n_GetLeft (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.Either> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			return JNIEnv.ToLocalJniHandle (__this.Left);
		}
#pragma warning restore 0169

		public virtual unsafe global::Java.Util.Optional? Left {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='Either']/method[@name='getLeft' and count(parameter)=0]"
			[Register ("getLeft", "()Ljava/util/Optional;", "GetGetLeftHandler")]
			get {
				const string __id = "getLeft.()Ljava/util/Optional;";
				try {
					var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
					return global::Java.Lang.Object.GetObject<global::Java.Util.Optional> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
		}

		static Delegate? cb_getRight;
#pragma warning disable 0169
		static Delegate GetGetRightHandler ()
		{
			if (cb_getRight == null)
				cb_getRight = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_L (n_GetRight));
			return cb_getRight;
		}

		static IntPtr n_GetRight (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.Either> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			return JNIEnv.ToLocalJniHandle (__this.Right);
		}
#pragma warning restore 0169

		public virtual unsafe global::Java.Util.Optional? Right {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='Either']/method[@name='getRight' and count(parameter)=0]"
			[Register ("getRight", "()Ljava/util/Optional;", "GetGetRightHandler")]
			get {
				const string __id = "getRight.()Ljava/util/Optional;";
				try {
					var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
					return global::Java.Lang.Object.GetObject<global::Java.Util.Optional> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='Either']/method[@name='makeLeft' and count(parameter)=1 and parameter[1][@type='L']]"
		[Register ("makeLeft", "(Ljava/lang/Object;)Lnet/optifine/util/Either;", "")]
		[global::Java.Interop.JavaTypeParameters (new string [] {"L", "R"})]
		public static unsafe global::Net.Optifine.Util.Either? MakeLeft (global::Java.Lang.Object? value)
		{
			const string __id = "makeLeft.(Ljava/lang/Object;)Lnet/optifine/util/Either;";
			IntPtr native_value = JNIEnv.ToLocalJniHandle (value);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_value);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.Either> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_value);
				global::System.GC.KeepAlive (value);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='Either']/method[@name='makeRight' and count(parameter)=1 and parameter[1][@type='R']]"
		[Register ("makeRight", "(Ljava/lang/Object;)Lnet/optifine/util/Either;", "")]
		[global::Java.Interop.JavaTypeParameters (new string [] {"L", "R"})]
		public static unsafe global::Net.Optifine.Util.Either? MakeRight (global::Java.Lang.Object? value)
		{
			const string __id = "makeRight.(Ljava/lang/Object;)Lnet/optifine/util/Either;";
			IntPtr native_value = JNIEnv.ToLocalJniHandle (value);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_value);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.Either> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_value);
				global::System.GC.KeepAlive (value);
			}
		}

	}
}
