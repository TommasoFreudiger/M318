//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Net.Optifine.Expr {

	// Metadata.xml XPath class reference: path="/api/package[@name='net.optifine.expr']/class[@name='Parameters']"
	[global::Android.Runtime.Register ("net/optifine/expr/Parameters", DoNotGenerateAcw=true)]
	public partial class Parameters : global::Java.Lang.Object, global::Net.Optifine.Expr.IParameters {
		static readonly JniPeerMembers _members = new XAPeerMembers ("net/optifine/expr/Parameters", typeof (Parameters));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected Parameters (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='net.optifine.expr']/class[@name='Parameters']/constructor[@name='Parameters' and count(parameter)=1 and parameter[1][@type='net.optifine.expr.ExpressionType[]']]"
		[Register (".ctor", "([Lnet/optifine/expr/ExpressionType;)V", "")]
		public unsafe Parameters (global::Net.Optifine.Expr.ExpressionType[]? parameterTypes) : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "([Lnet/optifine/expr/ExpressionType;)V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			IntPtr native_parameterTypes = JNIEnv.NewArray (parameterTypes);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_parameterTypes);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
				if (parameterTypes != null) {
					JNIEnv.CopyArray (native_parameterTypes, parameterTypes);
					JNIEnv.DeleteLocalRef (native_parameterTypes);
				}
				global::System.GC.KeepAlive (parameterTypes);
			}
		}

		static Delegate? cb_getParameterTypes_arrayLnet_optifine_expr_IExpression_;
#pragma warning disable 0169
		static Delegate GetGetParameterTypes_arrayLnet_optifine_expr_IExpression_Handler ()
		{
			if (cb_getParameterTypes_arrayLnet_optifine_expr_IExpression_ == null)
				cb_getParameterTypes_arrayLnet_optifine_expr_IExpression_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_L (n_GetParameterTypes_arrayLnet_optifine_expr_IExpression_));
			return cb_getParameterTypes_arrayLnet_optifine_expr_IExpression_;
		}

		static IntPtr n_GetParameterTypes_arrayLnet_optifine_expr_IExpression_ (IntPtr jnienv, IntPtr native__this, IntPtr native__params)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Expr.Parameters> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var @params = (global::Net.Optifine.Expr.IExpression[]?) JNIEnv.GetArray (native__params, JniHandleOwnership.DoNotTransfer, typeof (global::Net.Optifine.Expr.IExpression));
			IntPtr __ret = JNIEnv.NewArray (__this.GetParameterTypes (@params));
			if (@params != null)
				JNIEnv.CopyArray (@params, native__params);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.expr']/class[@name='Parameters']/method[@name='getParameterTypes' and count(parameter)=1 and parameter[1][@type='net.optifine.expr.IExpression[]']]"
		[Register ("getParameterTypes", "([Lnet/optifine/expr/IExpression;)[Lnet/optifine/expr/ExpressionType;", "GetGetParameterTypes_arrayLnet_optifine_expr_IExpression_Handler")]
		public virtual unsafe global::Net.Optifine.Expr.ExpressionType[]? GetParameterTypes (global::Net.Optifine.Expr.IExpression[]? @params)
		{
			const string __id = "getParameterTypes.([Lnet/optifine/expr/IExpression;)[Lnet/optifine/expr/ExpressionType;";
			IntPtr native__params = JNIEnv.NewArray (@params);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native__params);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return (global::Net.Optifine.Expr.ExpressionType[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (global::Net.Optifine.Expr.ExpressionType));
			} finally {
				if (@params != null) {
					JNIEnv.CopyArray (native__params, @params);
					JNIEnv.DeleteLocalRef (native__params);
				}
				global::System.GC.KeepAlive (@params);
			}
		}

	}
}
