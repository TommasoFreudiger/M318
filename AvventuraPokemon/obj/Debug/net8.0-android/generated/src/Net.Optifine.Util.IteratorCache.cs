//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Net.Optifine.Util {

	// Metadata.xml XPath class reference: path="/api/package[@name='net.optifine.util']/class[@name='IteratorCache']"
	[global::Android.Runtime.Register ("net/optifine/util/IteratorCache", DoNotGenerateAcw=true)]
	public partial class IteratorCache : global::Java.Lang.Object {
		// Metadata.xml XPath class reference: path="/api/package[@name='net.optifine.util']/class[@name='IteratorCache.IteratorReadOnly']"
		[global::Android.Runtime.Register ("net/optifine/util/IteratorCache$IteratorReadOnly", DoNotGenerateAcw=true)]
		public partial class IteratorReadOnly : global::Java.Lang.Object, global::Net.Optifine.Util.IteratorCache.IIteratorReusable {
			static readonly JniPeerMembers _members = new XAPeerMembers ("net/optifine/util/IteratorCache$IteratorReadOnly", typeof (IteratorReadOnly));

			internal static IntPtr class_ref {
				get { return _members.JniPeerType.PeerReference.Handle; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			public override global::Java.Interop.JniPeerMembers JniPeerMembers {
				get { return _members; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			protected override IntPtr ThresholdClass {
				get { return _members.JniPeerType.PeerReference.Handle; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			protected override global::System.Type ThresholdType {
				get { return _members.ManagedPeerType; }
			}

			protected IteratorReadOnly (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
			{
			}

			// Metadata.xml XPath constructor reference: path="/api/package[@name='net.optifine.util']/class[@name='IteratorCache.IteratorReadOnly']/constructor[@name='IteratorCache.IteratorReadOnly' and count(parameter)=0]"
			[Register (".ctor", "()V", "")]
			public unsafe IteratorReadOnly () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
			{
				const string __id = "()V";

				if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
					return;

				try {
					var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
					SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
					_members.InstanceMethods.FinishCreateInstance (__id, this, null);
				} finally {
				}
			}

			static Delegate? cb_hasNext;
#pragma warning disable 0169
			static Delegate GetHasNextHandler ()
			{
				if (cb_hasNext == null)
					cb_hasNext = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_Z (n_HasNext));
				return cb_hasNext;
			}

			static bool n_HasNext (IntPtr jnienv, IntPtr native__this)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.IteratorCache.IteratorReadOnly> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
				return __this.HasNext;
			}
#pragma warning restore 0169

			public virtual unsafe bool HasNext {
				// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='IteratorCache.IteratorReadOnly']/method[@name='hasNext' and count(parameter)=0]"
				[Register ("hasNext", "()Z", "GetHasNextHandler")]
				get {
					const string __id = "hasNext.()Z";
					try {
						var __rm = _members.InstanceMethods.InvokeVirtualBooleanMethod (__id, this, null);
						return __rm;
					} finally {
					}
				}
			}

			static Delegate? cb_next;
#pragma warning disable 0169
			static Delegate GetNextHandler ()
			{
				if (cb_next == null)
					cb_next = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_L (n_Next));
				return cb_next;
			}

			static IntPtr n_Next (IntPtr jnienv, IntPtr native__this)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.IteratorCache.IteratorReadOnly> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
				return JNIEnv.ToLocalJniHandle (__this.Next ());
			}
#pragma warning restore 0169

			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='IteratorCache.IteratorReadOnly']/method[@name='next' and count(parameter)=0]"
			[Register ("next", "()Ljava/lang/Object;", "GetNextHandler")]
			public virtual unsafe global::Java.Lang.Object? Next ()
			{
				const string __id = "next.()Ljava/lang/Object;";
				try {
					var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
					return global::Java.Lang.Object.GetObject<global::Java.Lang.Object> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}

			static Delegate? cb_setList_Ljava_util_List_;
#pragma warning disable 0169
			static Delegate GetSetList_Ljava_util_List_Handler ()
			{
				if (cb_setList_Ljava_util_List_ == null)
					cb_setList_Ljava_util_List_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_SetList_Ljava_util_List_));
				return cb_setList_Ljava_util_List_;
			}

			static void n_SetList_Ljava_util_List_ (IntPtr jnienv, IntPtr native__this, IntPtr native_list)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.IteratorCache.IteratorReadOnly> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
				var list = global::Android.Runtime.JavaList<global::Java.Lang.Object>.FromJniHandle (native_list, JniHandleOwnership.DoNotTransfer);
				__this.SetList (list);
			}
#pragma warning restore 0169

			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='IteratorCache.IteratorReadOnly']/method[@name='setList' and count(parameter)=1 and parameter[1][@type='java.util.List&lt;java.lang.Object&gt;']]"
			[Register ("setList", "(Ljava/util/List;)V", "GetSetList_Ljava_util_List_Handler")]
			public virtual unsafe void SetList (global::System.Collections.Generic.IList<global::Java.Lang.Object>? list)
			{
				const string __id = "setList.(Ljava/util/List;)V";
				IntPtr native_list = global::Android.Runtime.JavaList<global::Java.Lang.Object>.ToLocalJniHandle (list);
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue (native_list);
					_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
				} finally {
					JNIEnv.DeleteLocalRef (native_list);
					global::System.GC.KeepAlive (list);
				}
			}

		}

		// Metadata.xml XPath interface reference: path="/api/package[@name='net.optifine.util']/interface[@name='IteratorCache.IteratorReusable']"
		[Register ("net/optifine/util/IteratorCache$IteratorReusable", "", "Net.Optifine.Util.IteratorCache/IIteratorReusableInvoker")]
		[global::Java.Interop.JavaTypeParameters (new string [] {"E"})]
		public partial interface IIteratorReusable : global::Java.Util.IIterator {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/interface[@name='IteratorCache.IteratorReusable']/method[@name='setList' and count(parameter)=1 and parameter[1][@type='java.util.List&lt;E&gt;']]"
			[Register ("setList", "(Ljava/util/List;)V", "GetSetList_Ljava_util_List_Handler:Net.Optifine.Util.IteratorCache/IIteratorReusableInvoker, AvventuraPokemon")]
			void SetList (global::System.Collections.IList? p0);

		}

		[global::Android.Runtime.Register ("net/optifine/util/IteratorCache$IteratorReusable", DoNotGenerateAcw=true)]
		internal partial class IIteratorReusableInvoker : global::Java.Lang.Object, IIteratorReusable {
			static readonly JniPeerMembers _members = new XAPeerMembers ("net/optifine/util/IteratorCache$IteratorReusable", typeof (IIteratorReusableInvoker));

			static IntPtr java_class_ref {
				get { return _members.JniPeerType.PeerReference.Handle; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			public override global::Java.Interop.JniPeerMembers JniPeerMembers {
				get { return _members; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			protected override IntPtr ThresholdClass {
				get { return class_ref; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			protected override global::System.Type ThresholdType {
				get { return _members.ManagedPeerType; }
			}

			IntPtr class_ref;

			public static IIteratorReusable? GetObject (IntPtr handle, JniHandleOwnership transfer)
			{
				return global::Java.Lang.Object.GetObject<IIteratorReusable> (handle, transfer);
			}

			static IntPtr Validate (IntPtr handle)
			{
				if (!JNIEnv.IsInstanceOf (handle, java_class_ref))
					throw new InvalidCastException ($"Unable to convert instance of type '{JNIEnv.GetClassNameFromInstance (handle)}' to type 'net.optifine.util.IteratorCache.IteratorReusable'.");
				return handle;
			}

			protected override void Dispose (bool disposing)
			{
				if (this.class_ref != IntPtr.Zero)
					JNIEnv.DeleteGlobalRef (this.class_ref);
				this.class_ref = IntPtr.Zero;
				base.Dispose (disposing);
			}

			public IIteratorReusableInvoker (IntPtr handle, JniHandleOwnership transfer) : base (Validate (handle), transfer)
			{
				IntPtr local_ref = JNIEnv.GetObjectClass (((global::Java.Lang.Object) this).Handle);
				this.class_ref = JNIEnv.NewGlobalRef (local_ref);
				JNIEnv.DeleteLocalRef (local_ref);
			}

			static Delegate? cb_setList_Ljava_util_List_;
#pragma warning disable 0169
			static Delegate GetSetList_Ljava_util_List_Handler ()
			{
				if (cb_setList_Ljava_util_List_ == null)
					cb_setList_Ljava_util_List_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_SetList_Ljava_util_List_));
				return cb_setList_Ljava_util_List_;
			}

			static void n_SetList_Ljava_util_List_ (IntPtr jnienv, IntPtr native__this, IntPtr native_p0)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.IteratorCache.IIteratorReusable> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
				var p0 = global::Android.Runtime.JavaList.FromJniHandle (native_p0, JniHandleOwnership.DoNotTransfer);
				__this.SetList (p0);
			}
#pragma warning restore 0169

			IntPtr id_setList_Ljava_util_List_;
			public unsafe void SetList (global::System.Collections.IList? p0)
			{
				if (id_setList_Ljava_util_List_ == IntPtr.Zero)
					id_setList_Ljava_util_List_ = JNIEnv.GetMethodID (class_ref, "setList", "(Ljava/util/List;)V");
				IntPtr native_p0 = global::Android.Runtime.JavaList.ToLocalJniHandle (p0);
				JValue* __args = stackalloc JValue [1];
				__args [0] = new JValue (native_p0);
				JNIEnv.CallVoidMethod (((global::Java.Lang.Object) this).Handle, id_setList_Ljava_util_List_, __args);
				JNIEnv.DeleteLocalRef (native_p0);
			}

			static Delegate? cb_hasNext;
#pragma warning disable 0169
			static Delegate GetGetHasNextHandler ()
			{
				if (cb_hasNext == null)
					cb_hasNext = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_Z (n_GetHasNext));
				return cb_hasNext;
			}

			static bool n_GetHasNext (IntPtr jnienv, IntPtr native__this)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.IteratorCache.IIteratorReusable> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
				return __this.HasNext;
			}
#pragma warning restore 0169

			IntPtr id_hasNext;
			public unsafe bool HasNext {
				get {
					if (id_hasNext == IntPtr.Zero)
						id_hasNext = JNIEnv.GetMethodID (class_ref, "hasNext", "()Z");
					return JNIEnv.CallBooleanMethod (((global::Java.Lang.Object) this).Handle, id_hasNext);
				}
			}

			static Delegate? cb_next;
#pragma warning disable 0169
			static Delegate GetNextHandler ()
			{
				if (cb_next == null)
					cb_next = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_L (n_Next));
				return cb_next;
			}

			static IntPtr n_Next (IntPtr jnienv, IntPtr native__this)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.IteratorCache.IIteratorReusable> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
				return JNIEnv.ToLocalJniHandle (__this.Next ());
			}
#pragma warning restore 0169

			IntPtr id_next;
			public unsafe global::Java.Lang.Object? Next ()
			{
				if (id_next == IntPtr.Zero)
					id_next = JNIEnv.GetMethodID (class_ref, "next", "()Ljava/lang/Object;");
				return global::Java.Lang.Object.GetObject<global::Java.Lang.Object> (JNIEnv.CallObjectMethod (((global::Java.Lang.Object) this).Handle, id_next), JniHandleOwnership.TransferLocalRef);
			}

			static Delegate? cb_remove;
#pragma warning disable 0169
			static Delegate GetRemoveHandler ()
			{
				if (cb_remove == null)
					cb_remove = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_V (n_Remove));
				return cb_remove;
			}

			static void n_Remove (IntPtr jnienv, IntPtr native__this)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.IteratorCache.IIteratorReusable> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
				__this.Remove ();
			}
#pragma warning restore 0169

			IntPtr id_remove;
			public unsafe void Remove ()
			{
				if (id_remove == IntPtr.Zero)
					id_remove = JNIEnv.GetMethodID (class_ref, "remove", "()V");
				JNIEnv.CallVoidMethod (((global::Java.Lang.Object) this).Handle, id_remove);
			}

		}

		static readonly JniPeerMembers _members = new XAPeerMembers ("net/optifine/util/IteratorCache", typeof (IteratorCache));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected IteratorCache (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='net.optifine.util']/class[@name='IteratorCache']/constructor[@name='IteratorCache' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe IteratorCache () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='IteratorCache']/method[@name='getReadOnly' and count(parameter)=1 and parameter[1][@type='java.util.List']]"
		[Register ("getReadOnly", "(Ljava/util/List;)Ljava/util/Iterator;", "")]
		public static unsafe global::Java.Util.IIterator? GetReadOnly (global::System.Collections.IList? list)
		{
			const string __id = "getReadOnly.(Ljava/util/List;)Ljava/util/Iterator;";
			IntPtr native_list = global::Android.Runtime.JavaList.ToLocalJniHandle (list);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_list);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Lang.Object.GetObject<global::Java.Util.IIterator> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_list);
				global::System.GC.KeepAlive (list);
			}
		}

	}
}
