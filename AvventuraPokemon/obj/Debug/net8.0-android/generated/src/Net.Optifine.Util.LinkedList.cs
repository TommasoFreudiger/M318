//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Net.Optifine.Util {

	// Metadata.xml XPath class reference: path="/api/package[@name='net.optifine.util']/class[@name='LinkedList']"
	[global::Android.Runtime.Register ("net/optifine/util/LinkedList", DoNotGenerateAcw=true)]
	[global::Java.Interop.JavaTypeParameters (new string [] {"T"})]
	public partial class LinkedList : global::Java.Lang.Object {
		// Metadata.xml XPath class reference: path="/api/package[@name='net.optifine.util']/class[@name='LinkedList.Node']"
		[global::Android.Runtime.Register ("net/optifine/util/LinkedList$Node", DoNotGenerateAcw=true)]
		[global::Java.Interop.JavaTypeParameters (new string [] {"T"})]
		public partial class Node : global::Java.Lang.Object {
			static readonly JniPeerMembers _members = new XAPeerMembers ("net/optifine/util/LinkedList$Node", typeof (Node));

			internal static IntPtr class_ref {
				get { return _members.JniPeerType.PeerReference.Handle; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			public override global::Java.Interop.JniPeerMembers JniPeerMembers {
				get { return _members; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			protected override IntPtr ThresholdClass {
				get { return _members.JniPeerType.PeerReference.Handle; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			protected override global::System.Type ThresholdType {
				get { return _members.ManagedPeerType; }
			}

			protected Node (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
			{
			}

			// Metadata.xml XPath constructor reference: path="/api/package[@name='net.optifine.util']/class[@name='LinkedList.Node']/constructor[@name='LinkedList.Node' and count(parameter)=1 and parameter[1][@type='T']]"
			[Register (".ctor", "(Ljava/lang/Object;)V", "")]
			public unsafe Node (global::Java.Lang.Object? item) : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
			{
				const string __id = "(Ljava/lang/Object;)V";

				if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
					return;

				IntPtr native_item = JNIEnv.ToLocalJniHandle (item);
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue (native_item);
					var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
					SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
					_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
				} finally {
					JNIEnv.DeleteLocalRef (native_item);
					global::System.GC.KeepAlive (item);
				}
			}

			static Delegate? cb_getItem;
#pragma warning disable 0169
			static Delegate GetGetItemHandler ()
			{
				if (cb_getItem == null)
					cb_getItem = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_L (n_GetItem));
				return cb_getItem;
			}

			static IntPtr n_GetItem (IntPtr jnienv, IntPtr native__this)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LinkedList.Node> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
				return JNIEnv.ToLocalJniHandle (__this.Item);
			}
#pragma warning restore 0169

			public virtual unsafe global::Java.Lang.Object? Item {
				// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='LinkedList.Node']/method[@name='getItem' and count(parameter)=0]"
				[Register ("getItem", "()Ljava/lang/Object;", "GetGetItemHandler")]
				get {
					const string __id = "getItem.()Ljava/lang/Object;";
					try {
						var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
						return (global::Java.Lang.Object?) global::Java.Lang.Object.GetObject<global::Java.Lang.Object> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
					} finally {
					}
				}
			}

			static Delegate? cb_getNext;
#pragma warning disable 0169
			static Delegate GetGetNextHandler ()
			{
				if (cb_getNext == null)
					cb_getNext = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_L (n_GetNext));
				return cb_getNext;
			}

			static IntPtr n_GetNext (IntPtr jnienv, IntPtr native__this)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LinkedList.Node> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
				return JNIEnv.ToLocalJniHandle (__this.Next);
			}
#pragma warning restore 0169

			public virtual unsafe global::Net.Optifine.Util.LinkedList.Node? Next {
				// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='LinkedList.Node']/method[@name='getNext' and count(parameter)=0]"
				[Register ("getNext", "()Lnet/optifine/util/LinkedList$Node;", "GetGetNextHandler")]
				get {
					const string __id = "getNext.()Lnet/optifine/util/LinkedList$Node;";
					try {
						var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
						return global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LinkedList.Node> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
					} finally {
					}
				}
			}

			static Delegate? cb_getPrev;
#pragma warning disable 0169
			static Delegate GetGetPrevHandler ()
			{
				if (cb_getPrev == null)
					cb_getPrev = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_L (n_GetPrev));
				return cb_getPrev;
			}

			static IntPtr n_GetPrev (IntPtr jnienv, IntPtr native__this)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LinkedList.Node> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
				return JNIEnv.ToLocalJniHandle (__this.Prev);
			}
#pragma warning restore 0169

			public virtual unsafe global::Net.Optifine.Util.LinkedList.Node? Prev {
				// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='LinkedList.Node']/method[@name='getPrev' and count(parameter)=0]"
				[Register ("getPrev", "()Lnet/optifine/util/LinkedList$Node;", "GetGetPrevHandler")]
				get {
					const string __id = "getPrev.()Lnet/optifine/util/LinkedList$Node;";
					try {
						var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
						return global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LinkedList.Node> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
					} finally {
					}
				}
			}

		}

		static readonly JniPeerMembers _members = new XAPeerMembers ("net/optifine/util/LinkedList", typeof (LinkedList));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected LinkedList (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='net.optifine.util']/class[@name='LinkedList']/constructor[@name='LinkedList' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe LinkedList () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		static Delegate? cb_getFirst;
#pragma warning disable 0169
		static Delegate GetGetFirstHandler ()
		{
			if (cb_getFirst == null)
				cb_getFirst = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_L (n_GetFirst));
			return cb_getFirst;
		}

		static IntPtr n_GetFirst (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LinkedList> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			return JNIEnv.ToLocalJniHandle (__this.First);
		}
#pragma warning restore 0169

		public virtual unsafe global::Net.Optifine.Util.LinkedList.Node? First {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='LinkedList']/method[@name='getFirst' and count(parameter)=0]"
			[Register ("getFirst", "()Lnet/optifine/util/LinkedList$Node;", "GetGetFirstHandler")]
			get {
				const string __id = "getFirst.()Lnet/optifine/util/LinkedList$Node;";
				try {
					var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
					return global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LinkedList.Node> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
		}

		static Delegate? cb_isEmpty;
#pragma warning disable 0169
		static Delegate GetIsEmptyHandler ()
		{
			if (cb_isEmpty == null)
				cb_isEmpty = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_Z (n_IsEmpty));
			return cb_isEmpty;
		}

		static bool n_IsEmpty (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LinkedList> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			return __this.IsEmpty;
		}
#pragma warning restore 0169

		public virtual unsafe bool IsEmpty {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='LinkedList']/method[@name='isEmpty' and count(parameter)=0]"
			[Register ("isEmpty", "()Z", "GetIsEmptyHandler")]
			get {
				const string __id = "isEmpty.()Z";
				try {
					var __rm = _members.InstanceMethods.InvokeVirtualBooleanMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		static Delegate? cb_getLast;
#pragma warning disable 0169
		static Delegate GetGetLastHandler ()
		{
			if (cb_getLast == null)
				cb_getLast = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_L (n_GetLast));
			return cb_getLast;
		}

		static IntPtr n_GetLast (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LinkedList> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			return JNIEnv.ToLocalJniHandle (__this.Last);
		}
#pragma warning restore 0169

		public virtual unsafe global::Net.Optifine.Util.LinkedList.Node? Last {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='LinkedList']/method[@name='getLast' and count(parameter)=0]"
			[Register ("getLast", "()Lnet/optifine/util/LinkedList$Node;", "GetGetLastHandler")]
			get {
				const string __id = "getLast.()Lnet/optifine/util/LinkedList$Node;";
				try {
					var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
					return global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LinkedList.Node> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
		}

		static Delegate? cb_getSize;
#pragma warning disable 0169
		static Delegate GetGetSizeHandler ()
		{
			if (cb_getSize == null)
				cb_getSize = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_I (n_GetSize));
			return cb_getSize;
		}

		static int n_GetSize (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LinkedList> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			return __this.Size;
		}
#pragma warning restore 0169

		public virtual unsafe int Size {
			// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='LinkedList']/method[@name='getSize' and count(parameter)=0]"
			[Register ("getSize", "()I", "GetGetSizeHandler")]
			get {
				const string __id = "getSize.()I";
				try {
					var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		static Delegate? cb_addAfter_Lnet_optifine_util_LinkedList_Node_Lnet_optifine_util_LinkedList_Node_;
#pragma warning disable 0169
		static Delegate GetAddAfter_Lnet_optifine_util_LinkedList_Node_Lnet_optifine_util_LinkedList_Node_Handler ()
		{
			if (cb_addAfter_Lnet_optifine_util_LinkedList_Node_Lnet_optifine_util_LinkedList_Node_ == null)
				cb_addAfter_Lnet_optifine_util_LinkedList_Node_Lnet_optifine_util_LinkedList_Node_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPLL_V (n_AddAfter_Lnet_optifine_util_LinkedList_Node_Lnet_optifine_util_LinkedList_Node_));
			return cb_addAfter_Lnet_optifine_util_LinkedList_Node_Lnet_optifine_util_LinkedList_Node_;
		}

		static void n_AddAfter_Lnet_optifine_util_LinkedList_Node_Lnet_optifine_util_LinkedList_Node_ (IntPtr jnienv, IntPtr native__this, IntPtr native_nodePrev, IntPtr native_node)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LinkedList> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var nodePrev = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LinkedList.Node> (native_nodePrev, JniHandleOwnership.DoNotTransfer);
			var node = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LinkedList.Node> (native_node, JniHandleOwnership.DoNotTransfer);
			__this.AddAfter (nodePrev, node);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='LinkedList']/method[@name='addAfter' and count(parameter)=2 and parameter[1][@type='net.optifine.util.LinkedList.Node&lt;T&gt;'] and parameter[2][@type='net.optifine.util.LinkedList.Node&lt;T&gt;']]"
		[Register ("addAfter", "(Lnet/optifine/util/LinkedList$Node;Lnet/optifine/util/LinkedList$Node;)V", "GetAddAfter_Lnet_optifine_util_LinkedList_Node_Lnet_optifine_util_LinkedList_Node_Handler")]
		public virtual unsafe void AddAfter (global::Net.Optifine.Util.LinkedList.Node? nodePrev, global::Net.Optifine.Util.LinkedList.Node? node)
		{
			const string __id = "addAfter.(Lnet/optifine/util/LinkedList$Node;Lnet/optifine/util/LinkedList$Node;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((nodePrev == null) ? IntPtr.Zero : ((global::Java.Lang.Object) nodePrev).Handle);
				__args [1] = new JniArgumentValue ((node == null) ? IntPtr.Zero : ((global::Java.Lang.Object) node).Handle);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (nodePrev);
				global::System.GC.KeepAlive (node);
			}
		}

		static Delegate? cb_addFirst_Lnet_optifine_util_LinkedList_Node_;
#pragma warning disable 0169
		static Delegate GetAddFirst_Lnet_optifine_util_LinkedList_Node_Handler ()
		{
			if (cb_addFirst_Lnet_optifine_util_LinkedList_Node_ == null)
				cb_addFirst_Lnet_optifine_util_LinkedList_Node_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_AddFirst_Lnet_optifine_util_LinkedList_Node_));
			return cb_addFirst_Lnet_optifine_util_LinkedList_Node_;
		}

		static void n_AddFirst_Lnet_optifine_util_LinkedList_Node_ (IntPtr jnienv, IntPtr native__this, IntPtr native_node)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LinkedList> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var node = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LinkedList.Node> (native_node, JniHandleOwnership.DoNotTransfer);
			__this.AddFirst (node);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='LinkedList']/method[@name='addFirst' and count(parameter)=1 and parameter[1][@type='net.optifine.util.LinkedList.Node&lt;T&gt;']]"
		[Register ("addFirst", "(Lnet/optifine/util/LinkedList$Node;)V", "GetAddFirst_Lnet_optifine_util_LinkedList_Node_Handler")]
		public virtual unsafe void AddFirst (global::Net.Optifine.Util.LinkedList.Node? node)
		{
			const string __id = "addFirst.(Lnet/optifine/util/LinkedList$Node;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((node == null) ? IntPtr.Zero : ((global::Java.Lang.Object) node).Handle);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (node);
			}
		}

		static Delegate? cb_addLast_Lnet_optifine_util_LinkedList_Node_;
#pragma warning disable 0169
		static Delegate GetAddLast_Lnet_optifine_util_LinkedList_Node_Handler ()
		{
			if (cb_addLast_Lnet_optifine_util_LinkedList_Node_ == null)
				cb_addLast_Lnet_optifine_util_LinkedList_Node_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_AddLast_Lnet_optifine_util_LinkedList_Node_));
			return cb_addLast_Lnet_optifine_util_LinkedList_Node_;
		}

		static void n_AddLast_Lnet_optifine_util_LinkedList_Node_ (IntPtr jnienv, IntPtr native__this, IntPtr native_node)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LinkedList> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var node = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LinkedList.Node> (native_node, JniHandleOwnership.DoNotTransfer);
			__this.AddLast (node);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='LinkedList']/method[@name='addLast' and count(parameter)=1 and parameter[1][@type='net.optifine.util.LinkedList.Node&lt;T&gt;']]"
		[Register ("addLast", "(Lnet/optifine/util/LinkedList$Node;)V", "GetAddLast_Lnet_optifine_util_LinkedList_Node_Handler")]
		public virtual unsafe void AddLast (global::Net.Optifine.Util.LinkedList.Node? node)
		{
			const string __id = "addLast.(Lnet/optifine/util/LinkedList$Node;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((node == null) ? IntPtr.Zero : ((global::Java.Lang.Object) node).Handle);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (node);
			}
		}

		static Delegate? cb_contains_Lnet_optifine_util_LinkedList_Node_;
#pragma warning disable 0169
		static Delegate GetContains_Lnet_optifine_util_LinkedList_Node_Handler ()
		{
			if (cb_contains_Lnet_optifine_util_LinkedList_Node_ == null)
				cb_contains_Lnet_optifine_util_LinkedList_Node_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_Z (n_Contains_Lnet_optifine_util_LinkedList_Node_));
			return cb_contains_Lnet_optifine_util_LinkedList_Node_;
		}

		static bool n_Contains_Lnet_optifine_util_LinkedList_Node_ (IntPtr jnienv, IntPtr native__this, IntPtr native_node)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LinkedList> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var node = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LinkedList.Node> (native_node, JniHandleOwnership.DoNotTransfer);
			bool __ret = __this.Contains (node);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='LinkedList']/method[@name='contains' and count(parameter)=1 and parameter[1][@type='net.optifine.util.LinkedList.Node&lt;T&gt;']]"
		[Register ("contains", "(Lnet/optifine/util/LinkedList$Node;)Z", "GetContains_Lnet_optifine_util_LinkedList_Node_Handler")]
		public virtual unsafe bool Contains (global::Net.Optifine.Util.LinkedList.Node? node)
		{
			const string __id = "contains.(Lnet/optifine/util/LinkedList$Node;)Z";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((node == null) ? IntPtr.Zero : ((global::Java.Lang.Object) node).Handle);
				var __rm = _members.InstanceMethods.InvokeVirtualBooleanMethod (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (node);
			}
		}

		static Delegate? cb_find_Lnet_optifine_util_LinkedList_Node_Lnet_optifine_util_LinkedList_Node_Lnet_optifine_util_LinkedList_Node_;
#pragma warning disable 0169
		static Delegate GetFind_Lnet_optifine_util_LinkedList_Node_Lnet_optifine_util_LinkedList_Node_Lnet_optifine_util_LinkedList_Node_Handler ()
		{
			if (cb_find_Lnet_optifine_util_LinkedList_Node_Lnet_optifine_util_LinkedList_Node_Lnet_optifine_util_LinkedList_Node_ == null)
				cb_find_Lnet_optifine_util_LinkedList_Node_Lnet_optifine_util_LinkedList_Node_Lnet_optifine_util_LinkedList_Node_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPLLL_Z (n_Find_Lnet_optifine_util_LinkedList_Node_Lnet_optifine_util_LinkedList_Node_Lnet_optifine_util_LinkedList_Node_));
			return cb_find_Lnet_optifine_util_LinkedList_Node_Lnet_optifine_util_LinkedList_Node_Lnet_optifine_util_LinkedList_Node_;
		}

		static bool n_Find_Lnet_optifine_util_LinkedList_Node_Lnet_optifine_util_LinkedList_Node_Lnet_optifine_util_LinkedList_Node_ (IntPtr jnienv, IntPtr native__this, IntPtr native_nodeFind, IntPtr native_nodeFrom, IntPtr native_nodeTo)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LinkedList> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var nodeFind = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LinkedList.Node> (native_nodeFind, JniHandleOwnership.DoNotTransfer);
			var nodeFrom = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LinkedList.Node> (native_nodeFrom, JniHandleOwnership.DoNotTransfer);
			var nodeTo = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LinkedList.Node> (native_nodeTo, JniHandleOwnership.DoNotTransfer);
			bool __ret = __this.Find (nodeFind, nodeFrom, nodeTo);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='LinkedList']/method[@name='find' and count(parameter)=3 and parameter[1][@type='net.optifine.util.LinkedList.Node&lt;T&gt;'] and parameter[2][@type='net.optifine.util.LinkedList.Node&lt;T&gt;'] and parameter[3][@type='net.optifine.util.LinkedList.Node&lt;T&gt;']]"
		[Register ("find", "(Lnet/optifine/util/LinkedList$Node;Lnet/optifine/util/LinkedList$Node;Lnet/optifine/util/LinkedList$Node;)Z", "GetFind_Lnet_optifine_util_LinkedList_Node_Lnet_optifine_util_LinkedList_Node_Lnet_optifine_util_LinkedList_Node_Handler")]
		public virtual unsafe bool Find (global::Net.Optifine.Util.LinkedList.Node? nodeFind, global::Net.Optifine.Util.LinkedList.Node? nodeFrom, global::Net.Optifine.Util.LinkedList.Node? nodeTo)
		{
			const string __id = "find.(Lnet/optifine/util/LinkedList$Node;Lnet/optifine/util/LinkedList$Node;Lnet/optifine/util/LinkedList$Node;)Z";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue ((nodeFind == null) ? IntPtr.Zero : ((global::Java.Lang.Object) nodeFind).Handle);
				__args [1] = new JniArgumentValue ((nodeFrom == null) ? IntPtr.Zero : ((global::Java.Lang.Object) nodeFrom).Handle);
				__args [2] = new JniArgumentValue ((nodeTo == null) ? IntPtr.Zero : ((global::Java.Lang.Object) nodeTo).Handle);
				var __rm = _members.InstanceMethods.InvokeVirtualBooleanMethod (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (nodeFind);
				global::System.GC.KeepAlive (nodeFrom);
				global::System.GC.KeepAlive (nodeTo);
			}
		}

		static Delegate? cb_iterator;
#pragma warning disable 0169
		static Delegate GetIteratorHandler ()
		{
			if (cb_iterator == null)
				cb_iterator = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_L (n_Iterator));
			return cb_iterator;
		}

		static IntPtr n_Iterator (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LinkedList> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			return JNIEnv.ToLocalJniHandle (__this.Iterator ());
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='LinkedList']/method[@name='iterator' and count(parameter)=0]"
		[Register ("iterator", "()Ljava/util/Iterator;", "GetIteratorHandler")]
		public virtual unsafe global::Java.Util.IIterator? Iterator ()
		{
			const string __id = "iterator.()Ljava/util/Iterator;";
			try {
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
				return global::Java.Lang.Object.GetObject<global::Java.Util.IIterator> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
			}
		}

		static Delegate? cb_moveAfter_Lnet_optifine_util_LinkedList_Node_Lnet_optifine_util_LinkedList_Node_;
#pragma warning disable 0169
		static Delegate GetMoveAfter_Lnet_optifine_util_LinkedList_Node_Lnet_optifine_util_LinkedList_Node_Handler ()
		{
			if (cb_moveAfter_Lnet_optifine_util_LinkedList_Node_Lnet_optifine_util_LinkedList_Node_ == null)
				cb_moveAfter_Lnet_optifine_util_LinkedList_Node_Lnet_optifine_util_LinkedList_Node_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPLL_V (n_MoveAfter_Lnet_optifine_util_LinkedList_Node_Lnet_optifine_util_LinkedList_Node_));
			return cb_moveAfter_Lnet_optifine_util_LinkedList_Node_Lnet_optifine_util_LinkedList_Node_;
		}

		static void n_MoveAfter_Lnet_optifine_util_LinkedList_Node_Lnet_optifine_util_LinkedList_Node_ (IntPtr jnienv, IntPtr native__this, IntPtr native_nodePrev, IntPtr native_node)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LinkedList> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var nodePrev = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LinkedList.Node> (native_nodePrev, JniHandleOwnership.DoNotTransfer);
			var node = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LinkedList.Node> (native_node, JniHandleOwnership.DoNotTransfer);
			__this.MoveAfter (nodePrev, node);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='LinkedList']/method[@name='moveAfter' and count(parameter)=2 and parameter[1][@type='net.optifine.util.LinkedList.Node&lt;T&gt;'] and parameter[2][@type='net.optifine.util.LinkedList.Node&lt;T&gt;']]"
		[Register ("moveAfter", "(Lnet/optifine/util/LinkedList$Node;Lnet/optifine/util/LinkedList$Node;)V", "GetMoveAfter_Lnet_optifine_util_LinkedList_Node_Lnet_optifine_util_LinkedList_Node_Handler")]
		public virtual unsafe void MoveAfter (global::Net.Optifine.Util.LinkedList.Node? nodePrev, global::Net.Optifine.Util.LinkedList.Node? node)
		{
			const string __id = "moveAfter.(Lnet/optifine/util/LinkedList$Node;Lnet/optifine/util/LinkedList$Node;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((nodePrev == null) ? IntPtr.Zero : ((global::Java.Lang.Object) nodePrev).Handle);
				__args [1] = new JniArgumentValue ((node == null) ? IntPtr.Zero : ((global::Java.Lang.Object) node).Handle);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (nodePrev);
				global::System.GC.KeepAlive (node);
			}
		}

		static Delegate? cb_remove_Lnet_optifine_util_LinkedList_Node_;
#pragma warning disable 0169
		static Delegate GetRemove_Lnet_optifine_util_LinkedList_Node_Handler ()
		{
			if (cb_remove_Lnet_optifine_util_LinkedList_Node_ == null)
				cb_remove_Lnet_optifine_util_LinkedList_Node_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_L (n_Remove_Lnet_optifine_util_LinkedList_Node_));
			return cb_remove_Lnet_optifine_util_LinkedList_Node_;
		}

		static IntPtr n_Remove_Lnet_optifine_util_LinkedList_Node_ (IntPtr jnienv, IntPtr native__this, IntPtr native_node)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LinkedList> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var node = global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LinkedList.Node> (native_node, JniHandleOwnership.DoNotTransfer);
			IntPtr __ret = JNIEnv.ToLocalJniHandle (__this.Remove (node));
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='LinkedList']/method[@name='remove' and count(parameter)=1 and parameter[1][@type='net.optifine.util.LinkedList.Node&lt;T&gt;']]"
		[Register ("remove", "(Lnet/optifine/util/LinkedList$Node;)Lnet/optifine/util/LinkedList$Node;", "GetRemove_Lnet_optifine_util_LinkedList_Node_Handler")]
		public virtual unsafe global::Net.Optifine.Util.LinkedList.Node? Remove (global::Net.Optifine.Util.LinkedList.Node? node)
		{
			const string __id = "remove.(Lnet/optifine/util/LinkedList$Node;)Lnet/optifine/util/LinkedList$Node;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((node == null) ? IntPtr.Zero : ((global::Java.Lang.Object) node).Handle);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Lang.Object.GetObject<global::Net.Optifine.Util.LinkedList.Node> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				global::System.GC.KeepAlive (node);
			}
		}

	}
}
