//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Net.Optifine.Util {

	// Metadata.xml XPath class reference: path="/api/package[@name='net.optifine.util']/class[@name='MathUtils']"
	[global::Android.Runtime.Register ("net/optifine/util/MathUtils", DoNotGenerateAcw=true)]
	public partial class MathUtils : global::Java.Lang.Object {
		// Metadata.xml XPath field reference: path="/api/package[@name='net.optifine.util']/class[@name='MathUtils']/field[@name='PI']"
		[Register ("PI")]
		public const float Pi = (float) 3.14159274;

		// Metadata.xml XPath field reference: path="/api/package[@name='net.optifine.util']/class[@name='MathUtils']/field[@name='PI2']"
		[Register ("PI2")]
		public const float Pi2 = (float) 6.28318548;

		// Metadata.xml XPath field reference: path="/api/package[@name='net.optifine.util']/class[@name='MathUtils']/field[@name='PId2']"
		[Register ("PId2")]
		public const float PId2 = (float) 1.57079637;

		static readonly JniPeerMembers _members = new XAPeerMembers ("net/optifine/util/MathUtils", typeof (MathUtils));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected MathUtils (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='net.optifine.util']/class[@name='MathUtils']/constructor[@name='MathUtils' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe MathUtils () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='MathUtils']/method[@name='acos' and count(parameter)=1 and parameter[1][@type='float']]"
		[Register ("acos", "(F)F", "")]
		public static unsafe float Acos (float value)
		{
			const string __id = "acos.(F)F";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (value);
				var __rm = _members.StaticMethods.InvokeSingleMethod (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='MathUtils']/method[@name='asin' and count(parameter)=1 and parameter[1][@type='float']]"
		[Register ("asin", "(F)F", "")]
		public static unsafe float Asin (float value)
		{
			const string __id = "asin.(F)F";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (value);
				var __rm = _members.StaticMethods.InvokeSingleMethod (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='MathUtils']/method[@name='distanceSq' and count(parameter)=6 and parameter[1][@type='double'] and parameter[2][@type='double'] and parameter[3][@type='double'] and parameter[4][@type='double'] and parameter[5][@type='double'] and parameter[6][@type='double']]"
		[Register ("distanceSq", "(DDDDDD)D", "")]
		public static unsafe double DistanceSq (double x1, double y1, double z1, double x2, double y2, double z2)
		{
			const string __id = "distanceSq.(DDDDDD)D";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [6];
				__args [0] = new JniArgumentValue (x1);
				__args [1] = new JniArgumentValue (y1);
				__args [2] = new JniArgumentValue (z1);
				__args [3] = new JniArgumentValue (x2);
				__args [4] = new JniArgumentValue (y2);
				__args [5] = new JniArgumentValue (z2);
				var __rm = _members.StaticMethods.InvokeDoubleMethod (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='MathUtils']/method[@name='distanceSq' and count(parameter)=6 and parameter[1][@type='float'] and parameter[2][@type='float'] and parameter[3][@type='float'] and parameter[4][@type='float'] and parameter[5][@type='float'] and parameter[6][@type='float']]"
		[Register ("distanceSq", "(FFFFFF)F", "")]
		public static unsafe float DistanceSq (float x1, float y1, float z1, float x2, float y2, float z2)
		{
			const string __id = "distanceSq.(FFFFFF)F";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [6];
				__args [0] = new JniArgumentValue (x1);
				__args [1] = new JniArgumentValue (y1);
				__args [2] = new JniArgumentValue (z1);
				__args [3] = new JniArgumentValue (x2);
				__args [4] = new JniArgumentValue (y2);
				__args [5] = new JniArgumentValue (z2);
				var __rm = _members.StaticMethods.InvokeSingleMethod (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='MathUtils']/method[@name='equalsDelta' and count(parameter)=3 and parameter[1][@type='float'] and parameter[2][@type='float'] and parameter[3][@type='float']]"
		[Register ("equalsDelta", "(FFF)Z", "")]
		public static unsafe bool EqualsDelta (float f1, float f2, float delta)
		{
			const string __id = "equalsDelta.(FFF)Z";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (f1);
				__args [1] = new JniArgumentValue (f2);
				__args [2] = new JniArgumentValue (delta);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='MathUtils']/method[@name='getAverage' and count(parameter)=1 and parameter[1][@type='int[]']]"
		[Register ("getAverage", "([I)I", "")]
		public static unsafe int GetAverage (int[]? vals)
		{
			const string __id = "getAverage.([I)I";
			IntPtr native_vals = JNIEnv.NewArray (vals);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_vals);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (vals != null) {
					JNIEnv.CopyArray (native_vals, vals);
					JNIEnv.DeleteLocalRef (native_vals);
				}
				global::System.GC.KeepAlive (vals);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='MathUtils']/method[@name='getSum' and count(parameter)=1 and parameter[1][@type='int[]']]"
		[Register ("getSum", "([I)I", "")]
		public static unsafe int GetSum (int[]? vals)
		{
			const string __id = "getSum.([I)I";
			IntPtr native_vals = JNIEnv.NewArray (vals);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_vals);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (vals != null) {
					JNIEnv.CopyArray (native_vals, vals);
					JNIEnv.DeleteLocalRef (native_vals);
				}
				global::System.GC.KeepAlive (vals);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='MathUtils']/method[@name='roundDownToPowerOfTwo' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("roundDownToPowerOfTwo", "(I)I", "")]
		public static unsafe int RoundDownToPowerOfTwo (int val)
		{
			const string __id = "roundDownToPowerOfTwo.(I)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (val);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='MathUtils']/method[@name='roundToFloat' and count(parameter)=1 and parameter[1][@type='double']]"
		[Register ("roundToFloat", "(D)F", "")]
		public static unsafe float RoundToFloat (double d)
		{
			const string __id = "roundToFloat.(D)F";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (d);
				var __rm = _members.StaticMethods.InvokeSingleMethod (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='MathUtils']/method[@name='toDeg' and count(parameter)=1 and parameter[1][@type='float']]"
		[Register ("toDeg", "(F)F", "")]
		public static unsafe float ToDeg (float angle)
		{
			const string __id = "toDeg.(F)F";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (angle);
				var __rm = _members.StaticMethods.InvokeSingleMethod (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='net.optifine.util']/class[@name='MathUtils']/method[@name='toRad' and count(parameter)=1 and parameter[1][@type='float']]"
		[Register ("toRad", "(F)F", "")]
		public static unsafe float ToRad (float angle)
		{
			const string __id = "toRad.(F)F";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (angle);
				var __rm = _members.StaticMethods.InvokeSingleMethod (__id, __args);
				return __rm;
			} finally {
			}
		}

	}
}
