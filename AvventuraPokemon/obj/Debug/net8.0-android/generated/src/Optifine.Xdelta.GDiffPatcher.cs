//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Optifine.Xdelta {

	// Metadata.xml XPath class reference: path="/api/package[@name='optifine.xdelta']/class[@name='GDiffPatcher']"
	[global::Android.Runtime.Register ("optifine/xdelta/GDiffPatcher", DoNotGenerateAcw=true)]
	public partial class GDiffPatcher : global::Java.Lang.Object {
		static readonly JniPeerMembers _members = new XAPeerMembers ("optifine/xdelta/GDiffPatcher", typeof (GDiffPatcher));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected GDiffPatcher (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='optifine.xdelta']/class[@name='GDiffPatcher']/constructor[@name='GDiffPatcher' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='java.io.InputStream'] and parameter[3][@type='java.io.OutputStream']]"
		[Register (".ctor", "([BLjava/io/InputStream;Ljava/io/OutputStream;)V", "")]
		public unsafe GDiffPatcher (byte[]? source, global::System.IO.Stream? patch, global::System.IO.Stream? output) : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "([BLjava/io/InputStream;Ljava/io/OutputStream;)V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			IntPtr native_source = JNIEnv.NewArray (source);
			IntPtr native_patch = global::Android.Runtime.InputStreamAdapter.ToLocalJniHandle (patch);
			IntPtr native_output = global::Android.Runtime.OutputStreamAdapter.ToLocalJniHandle (output);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_source);
				__args [1] = new JniArgumentValue (native_patch);
				__args [2] = new JniArgumentValue (native_output);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
				if (source != null) {
					JNIEnv.CopyArray (native_source, source);
					JNIEnv.DeleteLocalRef (native_source);
				}
				JNIEnv.DeleteLocalRef (native_patch);
				JNIEnv.DeleteLocalRef (native_output);
				global::System.GC.KeepAlive (source);
				global::System.GC.KeepAlive (patch);
				global::System.GC.KeepAlive (output);
			}
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='optifine.xdelta']/class[@name='GDiffPatcher']/constructor[@name='GDiffPatcher' and count(parameter)=3 and parameter[1][@type='java.io.File'] and parameter[2][@type='java.io.File'] and parameter[3][@type='java.io.File']]"
		[Register (".ctor", "(Ljava/io/File;Ljava/io/File;Ljava/io/File;)V", "")]
		public unsafe GDiffPatcher (global::Java.IO.File? sourceFile, global::Java.IO.File? patchFile, global::Java.IO.File? outputFile) : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "(Ljava/io/File;Ljava/io/File;Ljava/io/File;)V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue ((sourceFile == null) ? IntPtr.Zero : ((global::Java.Lang.Object) sourceFile).Handle);
				__args [1] = new JniArgumentValue ((patchFile == null) ? IntPtr.Zero : ((global::Java.Lang.Object) patchFile).Handle);
				__args [2] = new JniArgumentValue ((outputFile == null) ? IntPtr.Zero : ((global::Java.Lang.Object) outputFile).Handle);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (sourceFile);
				global::System.GC.KeepAlive (patchFile);
				global::System.GC.KeepAlive (outputFile);
			}
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='optifine.xdelta']/class[@name='GDiffPatcher']/constructor[@name='GDiffPatcher' and count(parameter)=3 and parameter[1][@type='optifine.xdelta.SeekableSource'] and parameter[2][@type='java.io.InputStream'] and parameter[3][@type='java.io.OutputStream']]"
		[Register (".ctor", "(Loptifine/xdelta/SeekableSource;Ljava/io/InputStream;Ljava/io/OutputStream;)V", "")]
		public unsafe GDiffPatcher (global::Optifine.Xdelta.ISeekableSource? source, global::System.IO.Stream? patch, global::System.IO.Stream? @out) : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "(Loptifine/xdelta/SeekableSource;Ljava/io/InputStream;Ljava/io/OutputStream;)V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			IntPtr native_patch = global::Android.Runtime.InputStreamAdapter.ToLocalJniHandle (patch);
			IntPtr native__out = global::Android.Runtime.OutputStreamAdapter.ToLocalJniHandle (@out);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue ((source == null) ? IntPtr.Zero : ((global::Java.Lang.Object) source).Handle);
				__args [1] = new JniArgumentValue (native_patch);
				__args [2] = new JniArgumentValue (native__out);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_patch);
				JNIEnv.DeleteLocalRef (native__out);
				global::System.GC.KeepAlive (source);
				global::System.GC.KeepAlive (patch);
				global::System.GC.KeepAlive (@out);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine.xdelta']/class[@name='GDiffPatcher']/method[@name='append' and count(parameter)=3 and parameter[1][@type='int'] and parameter[2][@type='java.io.InputStream'] and parameter[3][@type='java.io.OutputStream']]"
		[Register ("append", "(ILjava/io/InputStream;Ljava/io/OutputStream;)V", "")]
		protected static unsafe void Append (int length, global::System.IO.Stream? patch, global::System.IO.Stream? output)
		{
			const string __id = "append.(ILjava/io/InputStream;Ljava/io/OutputStream;)V";
			IntPtr native_patch = global::Android.Runtime.InputStreamAdapter.ToLocalJniHandle (patch);
			IntPtr native_output = global::Android.Runtime.OutputStreamAdapter.ToLocalJniHandle (output);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (length);
				__args [1] = new JniArgumentValue (native_patch);
				__args [2] = new JniArgumentValue (native_output);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_patch);
				JNIEnv.DeleteLocalRef (native_output);
				global::System.GC.KeepAlive (patch);
				global::System.GC.KeepAlive (output);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine.xdelta']/class[@name='GDiffPatcher']/method[@name='copy' and count(parameter)=4 and parameter[1][@type='long'] and parameter[2][@type='int'] and parameter[3][@type='optifine.xdelta.SeekableSource'] and parameter[4][@type='java.io.OutputStream']]"
		[Register ("copy", "(JILoptifine/xdelta/SeekableSource;Ljava/io/OutputStream;)V", "")]
		protected static unsafe void Copy (long offset, int length, global::Optifine.Xdelta.ISeekableSource? source, global::System.IO.Stream? output)
		{
			const string __id = "copy.(JILoptifine/xdelta/SeekableSource;Ljava/io/OutputStream;)V";
			IntPtr native_output = global::Android.Runtime.OutputStreamAdapter.ToLocalJniHandle (output);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (offset);
				__args [1] = new JniArgumentValue (length);
				__args [2] = new JniArgumentValue ((source == null) ? IntPtr.Zero : ((global::Java.Lang.Object) source).Handle);
				__args [3] = new JniArgumentValue (native_output);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_output);
				global::System.GC.KeepAlive (source);
				global::System.GC.KeepAlive (output);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='optifine.xdelta']/class[@name='GDiffPatcher']/method[@name='main' and count(parameter)=1 and parameter[1][@type='java.lang.String[]']]"
		[Register ("main", "([Ljava/lang/String;)V", "")]
		public static unsafe void Main (string[]? argv)
		{
			const string __id = "main.([Ljava/lang/String;)V";
			IntPtr native_argv = JNIEnv.NewArray (argv);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_argv);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (argv != null) {
					JNIEnv.CopyArray (native_argv, argv);
					JNIEnv.DeleteLocalRef (native_argv);
				}
				global::System.GC.KeepAlive (argv);
			}
		}

	}
}
